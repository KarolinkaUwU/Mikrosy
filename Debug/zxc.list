
zxc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008370  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08008540  08008540  00009540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800876c  0800876c  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  0800876c  0800876c  0000976c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008774  08008774  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008774  08008774  00009774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008778  08008778  00009778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800877c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a74  20000070  080087ec  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ae4  080087ec  0000aae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d014  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f35  00000000  00000000  000170b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00018ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000910  00000000  00000000  00019b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227b6  00000000  00000000  0001a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f19b  00000000  00000000  0003cc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce246  00000000  00000000  0004bdf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a037  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af8  00000000  00000000  0011a07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011db74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008528 	.word	0x08008528

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008528 	.word	0x08008528

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <QMC_init>:
uint8_t is_char_endmessage(char single_char);

// Funkcje typowo pod czujnik

uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af04      	add	r7, sp, #16
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	4613      	mov	r3, r2
 80005dc:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2211      	movs	r2, #17
 80005e8:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2bc8      	cmp	r3, #200	@ 0xc8
 80005f8:	d107      	bne.n	800060a <QMC_init+0x3a>
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	f043 030c 	orr.w	r3, r3, #12
 8000602:	b2da      	uxtb	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	711a      	strb	r2, [r3, #4]
 8000608:	e024      	b.n	8000654 <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b64      	cmp	r3, #100	@ 0x64
 800060e:	d107      	bne.n	8000620 <QMC_init+0x50>
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	b2da      	uxtb	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	711a      	strb	r2, [r3, #4]
 800061e:	e019      	b.n	8000654 <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b32      	cmp	r3, #50	@ 0x32
 8000624:	d107      	bne.n	8000636 <QMC_init+0x66>
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	b2da      	uxtb	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	711a      	strb	r2, [r3, #4]
 8000634:	e00e      	b.n	8000654 <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b0a      	cmp	r3, #10
 800063a:	d104      	bne.n	8000646 <QMC_init+0x76>
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	791a      	ldrb	r2, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	711a      	strb	r2, [r3, #4]
 8000644:	e006      	b.n	8000654 <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	f043 030c 	orr.w	r3, r3, #12
 800064e:	b2da      	uxtb	r2, r3
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	2364      	movs	r3, #100	@ 0x64
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	2301      	movs	r3, #1
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	220b      	movs	r2, #11
 800066a:	211a      	movs	r1, #26
 800066c:	f002 fa4e 	bl	8002b0c <HAL_I2C_Mem_Write>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <QMC_init+0xaa>
 8000676:	2301      	movs	r3, #1
 8000678:	e014      	b.n	80006a4 <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	2364      	movs	r3, #100	@ 0x64
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	2301      	movs	r3, #1
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	3301      	adds	r3, #1
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	2209      	movs	r2, #9
 8000692:	211a      	movs	r1, #26
 8000694:	f002 fa3a 	bl	8002b0c <HAL_I2C_Mem_Write>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <QMC_init+0xd2>
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <QMC_init+0xd4>

	return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <QMC_read>:

uint8_t QMC_read(QMC_t *qmc, int16_t *x, int16_t *y, int16_t *z)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	603b      	str	r3, [r7, #0]
    uint8_t data[6];
    if (HAL_I2C_Mem_Read_DMA(qmc->i2c, 0x1A, 0x00, I2C_MEMADD_SIZE_8BIT, data, 6) != HAL_OK)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	2306      	movs	r3, #6
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2301      	movs	r3, #1
 80006ca:	2200      	movs	r2, #0
 80006cc:	211a      	movs	r1, #26
 80006ce:	f002 fc75 	bl	8002fbc <HAL_I2C_Mem_Read_DMA>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <QMC_read+0x30>
        return 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	e038      	b.n	800074e <QMC_read+0xa2>

    *x = (int16_t)((data[1] << 8) | data[0]);
 80006dc:	7c7b      	ldrb	r3, [r7, #17]
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	7c3b      	ldrb	r3, [r7, #16]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b21a      	sxth	r2, r3
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]);
 80006ee:	7cfb      	ldrb	r3, [r7, #19]
 80006f0:	021b      	lsls	r3, r3, #8
 80006f2:	b21a      	sxth	r2, r3
 80006f4:	7cbb      	ldrb	r3, [r7, #18]
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b21a      	sxth	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]);
 8000700:	7d7b      	ldrb	r3, [r7, #21]
 8000702:	021b      	lsls	r3, r3, #8
 8000704:	b21a      	sxth	r2, r3
 8000706:	7d3b      	ldrb	r3, [r7, #20]
 8000708:	b21b      	sxth	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	b21a      	sxth	r2, r3
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	801a      	strh	r2, [r3, #0]

    qmc->heading = atan2f((float)*y, (float)*x) * 57.3f; // Konwersja na stopnie
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000718:	ee07 3a90 	vmov	s15, r3
 800071c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000726:	ee07 3a10 	vmov	s14, r3
 800072a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800072e:	eef0 0a47 	vmov.f32	s1, s14
 8000732:	eeb0 0a67 	vmov.f32	s0, s15
 8000736:	f007 fd79 	bl	800822c <atan2f>
 800073a:	eef0 7a40 	vmov.f32	s15, s0
 800073e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000758 <QMC_read+0xac>
 8000742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	edc3 7a05 	vstr	s15, [r3, #20]
    return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3718      	adds	r7, #24
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	42653333 	.word	0x42653333

0800075c <QMC_Standby>:
    return qmc->heading;
}


uint8_t QMC_Standby(QMC_t *qmc)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af02      	add	r7, sp, #8
 8000762:	6078      	str	r0, [r7, #4]
    uint8_t array[1] = {0};
 8000764:	2300      	movs	r3, #0
 8000766:	733b      	strb	r3, [r7, #12]
    if (HAL_I2C_Mem_Write_DMA(qmc->i2c, 0x1A, 0x09, 1, &array[0], 1) != HAL_OK)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	2209      	movs	r2, #9
 800077a:	211a      	movs	r1, #26
 800077c:	f002 fac0 	bl	8002d00 <HAL_I2C_Mem_Write_DMA>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <QMC_Standby+0x2e>
        return 1;
 8000786:	2301      	movs	r3, #1
 8000788:	e000      	b.n	800078c <QMC_Standby+0x30>
    return 0;
 800078a:	2300      	movs	r3, #0
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <QMC_Reset>:


uint8_t QMC_Reset(QMC_t *qmc)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af02      	add	r7, sp, #8
 800079a:	6078      	str	r0, [r7, #4]
    uint8_t array[1] = {0x80};
 800079c:	2380      	movs	r3, #128	@ 0x80
 800079e:	733b      	strb	r3, [r7, #12]
    return HAL_I2C_Mem_Write_DMA(qmc->i2c, 0x1A, 0x0A, I2C_MEMADD_SIZE_8BIT, &array[0], 1) != HAL_OK;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	2301      	movs	r3, #1
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2301      	movs	r3, #1
 80007b0:	220a      	movs	r2, #10
 80007b2:	211a      	movs	r1, #26
 80007b4:	f002 faa4 	bl	8002d00 <HAL_I2C_Mem_Write_DMA>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bf14      	ite	ne
 80007be:	2301      	movne	r3, #1
 80007c0:	2300      	moveq	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <rx_has_data>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Sprawdzenie czy bufor odbiorczy zawiera jakieś dane
uint8_t rx_has_data() {
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	// Jeśli empty i busy wskazuja to samo miejsce to znaczy, że pusty
	if (rx_empty == rx_busy)
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <rx_has_data+0x24>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <rx_has_data+0x28>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	429a      	cmp	r2, r3
 80007de:	d101      	bne.n	80007e4 <rx_has_data+0x18>
		return 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e000      	b.n	80007e6 <rx_has_data+0x1a>
	else
		return 1;
 80007e4:	2301      	movs	r3, #1
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	200011b0 	.word	0x200011b0
 80007f4:	200011b2 	.word	0x200011b2

080007f8 <tx_has_data>:

// To samo do bufora nadawczego
uint8_t tx_has_data() {
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	if (tx_empty == tx_busy)
 80007fc:	4b07      	ldr	r3, [pc, #28]	@ (800081c <tx_has_data+0x24>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	b29a      	uxth	r2, r3
 8000802:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <tx_has_data+0x28>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	b29b      	uxth	r3, r3
 8000808:	429a      	cmp	r2, r3
 800080a:	d101      	bne.n	8000810 <tx_has_data+0x18>
		return 0;
 800080c:	2300      	movs	r3, #0
 800080e:	e000      	b.n	8000812 <tx_has_data+0x1a>
	else
		return 1;
 8000810:	2301      	movs	r3, #1
}
 8000812:	4618      	mov	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	2000159c 	.word	0x2000159c
 8000820:	2000159e 	.word	0x2000159e

08000824 <increase_tx_busy>:
void increase_tx_empty(){
	tx_empty++;
	tx_empty %= buff_length;
}

void increase_tx_busy(){
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	tx_busy++;
 8000828:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <increase_tx_busy+0x3c>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	b29b      	uxth	r3, r3
 800082e:	3301      	adds	r3, #1
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <increase_tx_busy+0x3c>)
 8000834:	801a      	strh	r2, [r3, #0]
	tx_busy %= buff_length;
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <increase_tx_busy+0x3c>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	b29b      	uxth	r3, r3
 800083c:	4a09      	ldr	r2, [pc, #36]	@ (8000864 <increase_tx_busy+0x40>)
 800083e:	fba2 1203 	umull	r1, r2, r2, r3
 8000842:	0992      	lsrs	r2, r2, #6
 8000844:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000848:	fb01 f202 	mul.w	r2, r1, r2
 800084c:	1a9b      	subs	r3, r3, r2
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b03      	ldr	r3, [pc, #12]	@ (8000860 <increase_tx_busy+0x3c>)
 8000852:	801a      	strh	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	2000159e 	.word	0x2000159e
 8000864:	10624dd3 	.word	0x10624dd3

08000868 <is_char_endmessage>:
	else {
		return 0;
	}
}

uint8_t is_char_endmessage(char single_char){
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
	if (single_char == 10 || single_char == 13)
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b0a      	cmp	r3, #10
 8000876:	d002      	beq.n	800087e <is_char_endmessage+0x16>
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b0d      	cmp	r3, #13
 800087c:	d101      	bne.n	8000882 <is_char_endmessage+0x1a>
		return 1;
 800087e:	2301      	movs	r3, #1
 8000880:	e000      	b.n	8000884 <is_char_endmessage+0x1c>
	else
		return 0;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <get_message>:


uint8_t get_message(char *array_reference) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_buff[buff_length];
	static uint8_t idx = 0;
	uint8_t mess_length;

	while (rx_has_data() == 1) {
 8000898:	e03b      	b.n	8000912 <get_message+0x82>
		tmp_buff[idx] = getchar();
 800089a:	f006 fd4b 	bl	8007334 <getchar>
 800089e:	4601      	mov	r1, r0
 80008a0:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <get_message+0x98>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	b2c9      	uxtb	r1, r1
 80008a8:	4b20      	ldr	r3, [pc, #128]	@ (800092c <get_message+0x9c>)
 80008aa:	5499      	strb	r1, [r3, r2]

		if(is_char_endmessage(tmp_buff[idx])) {
 80008ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <get_message+0x98>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <get_message+0x9c>)
 80008b4:	5c9b      	ldrb	r3, [r3, r2]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffd6 	bl	8000868 <is_char_endmessage>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d021      	beq.n	8000906 <get_message+0x76>
			tmp_buff[idx] = 0;
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <get_message+0x98>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <get_message+0x9c>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	5499      	strb	r1, [r3, r2]

			for (int i = 0; i <= idx; i++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	e00a      	b.n	80008ea <get_message+0x5a>
				array_reference[i] = tmp_buff[i];
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4914      	ldr	r1, [pc, #80]	@ (800092c <get_message+0x9c>)
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	440a      	add	r2, r1
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i <= idx; i++)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <get_message+0x98>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4293      	cmp	r3, r2
 80008f4:	ddee      	ble.n	80008d4 <get_message+0x44>

			mess_length = idx;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <get_message+0x98>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	72fb      	strb	r3, [r7, #11]
			idx = 0;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <get_message+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
			return mess_length;
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	e00b      	b.n	800091e <get_message+0x8e>
		}
		else {
			idx++;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <get_message+0x98>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <get_message+0x98>)
 8000910:	701a      	strb	r2, [r3, #0]
	while (rx_has_data() == 1) {
 8000912:	f7ff ff5b 	bl	80007cc <rx_has_data>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d0be      	beq.n	800089a <get_message+0xa>
			if (idx >= buff_length)
				return 0;
		}
	}
	return 0;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200015a6 	.word	0x200015a6
 800092c:	200015a8 	.word	0x200015a8

08000930 <change_int_to_char_arr>:

void change_int_to_char_arr(char *array_reference, uint8_t int_val) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
	if (int_val > 100)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	2b64      	cmp	r3, #100	@ 0x64
 8000940:	d906      	bls.n	8000950 <change_int_to_char_arr+0x20>
		sprintf(array_reference, "%d", int_val);
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	461a      	mov	r2, r3
 8000946:	490c      	ldr	r1, [pc, #48]	@ (8000978 <change_int_to_char_arr+0x48>)
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f006 fcfb 	bl	8007344 <siprintf>
	else if (int_val > 10)
		sprintf(array_reference,"0%d", int_val);
	else
		sprintf(array_reference,"00%d", int_val);
}
 800094e:	e00f      	b.n	8000970 <change_int_to_char_arr+0x40>
	else if (int_val > 10)
 8000950:	78fb      	ldrb	r3, [r7, #3]
 8000952:	2b0a      	cmp	r3, #10
 8000954:	d906      	bls.n	8000964 <change_int_to_char_arr+0x34>
		sprintf(array_reference,"0%d", int_val);
 8000956:	78fb      	ldrb	r3, [r7, #3]
 8000958:	461a      	mov	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	@ (800097c <change_int_to_char_arr+0x4c>)
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f006 fcf1 	bl	8007344 <siprintf>
}
 8000962:	e005      	b.n	8000970 <change_int_to_char_arr+0x40>
		sprintf(array_reference,"00%d", int_val);
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	461a      	mov	r2, r3
 8000968:	4905      	ldr	r1, [pc, #20]	@ (8000980 <change_int_to_char_arr+0x50>)
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f006 fcea 	bl	8007344 <siprintf>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	08008540 	.word	0x08008540
 800097c:	08008544 	.word	0x08008544
 8000980:	08008548 	.word	0x08008548

08000984 <send>:

// Z STM do PC wysyłanie danych

void send(char *msgToSend, ...) {
 8000984:	b40f      	push	{r0, r1, r2, r3}
 8000986:	b580      	push	{r7, lr}
 8000988:	f5ad 7d7e 	sub.w	sp, sp, #1016	@ 0x3f8
 800098c:	af00      	add	r7, sp, #0
	uint16_t idx;
	// lista argumentów
	va_list arglist;

	// kopiowanie znaków (char) do tablicy
	va_start(arglist, msgToSend);
 800098e:	f207 4204 	addw	r2, r7, #1028	@ 0x404
 8000992:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8000996:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 800099a:	601a      	str	r2, [r3, #0]
	vsprintf(data_to_send, msgToSend, arglist);
 800099c:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 80009a0:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 80009a4:	f107 0008 	add.w	r0, r7, #8
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	f8d7 1400 	ldr.w	r1, [r7, #1024]	@ 0x400
 80009ae:	f006 fd43 	bl	8007438 <vsiprintf>
	va_end(arglist);

	// Ustawienie wskaźnika pomocnicznego na pierwsze wolne miejsce
	idx = tx_empty;
 80009b2:	4b31      	ldr	r3, [pc, #196]	@ (8000a78 <send+0xf4>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	f8a7 33f6 	strh.w	r3, [r7, #1014]	@ 0x3f6

	// wrzucanie danych do bufora nadawczego
	for (int i = 0; i < strlen(data_to_send); i++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 80009c0:	e022      	b.n	8000a08 <send+0x84>
		buf_tx[idx] = data_to_send[i];
 80009c2:	f8b7 33f6 	ldrh.w	r3, [r7, #1014]	@ 0x3f6
 80009c6:	f507 727e 	add.w	r2, r7, #1016	@ 0x3f8
 80009ca:	f5a2 717c 	sub.w	r1, r2, #1008	@ 0x3f0
 80009ce:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	@ 0x3f0
 80009d2:	440a      	add	r2, r1
 80009d4:	7811      	ldrb	r1, [r2, #0]
 80009d6:	4a29      	ldr	r2, [pc, #164]	@ (8000a7c <send+0xf8>)
 80009d8:	54d1      	strb	r1, [r2, r3]
		idx++;
 80009da:	f8b7 33f6 	ldrh.w	r3, [r7, #1014]	@ 0x3f6
 80009de:	3301      	adds	r3, #1
 80009e0:	f8a7 33f6 	strh.w	r3, [r7, #1014]	@ 0x3f6
		idx %= buff_length;
 80009e4:	f8b7 33f6 	ldrh.w	r3, [r7, #1014]	@ 0x3f6
 80009e8:	4a25      	ldr	r2, [pc, #148]	@ (8000a80 <send+0xfc>)
 80009ea:	fba2 1203 	umull	r1, r2, r2, r3
 80009ee:	0992      	lsrs	r2, r2, #6
 80009f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009f4:	fb01 f202 	mul.w	r2, r1, r2
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	f8a7 33f6 	strh.w	r3, [r7, #1014]	@ 0x3f6
	for (int i = 0; i < strlen(data_to_send); i++) {
 80009fe:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8000a02:	3301      	adds	r3, #1
 8000a04:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fc09 	bl	8000224 <strlen>
 8000a12:	4602      	mov	r2, r0
 8000a14:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8d2      	bhi.n	80009c2 <send+0x3e>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
	}

	__disable_irq();

	if (tx_has_data() == 0 && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000a20:	f7ff feea 	bl	80007f8 <tx_has_data>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d118      	bne.n	8000a5c <send+0xd8>
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <send+0x100>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a34:	2b80      	cmp	r3, #128	@ 0x80
 8000a36:	d111      	bne.n	8000a5c <send+0xd8>
		tx_empty = idx;
 8000a38:	4a0f      	ldr	r2, [pc, #60]	@ (8000a78 <send+0xf4>)
 8000a3a:	f8b7 33f6 	ldrh.w	r3, [r7, #1014]	@ 0x3f6
 8000a3e:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2, &buf_tx[tx_busy], 1);
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <send+0x104>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <send+0xf8>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <send+0x100>)
 8000a52:	f005 fbc1 	bl	80061d8 <HAL_UART_Transmit_IT>
		increase_tx_busy();
 8000a56:	f7ff fee5 	bl	8000824 <increase_tx_busy>
 8000a5a:	e003      	b.n	8000a64 <send+0xe0>
	}
	else
		tx_empty = idx;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <send+0xf4>)
 8000a5e:	f8b7 33f6 	ldrh.w	r3, [r7, #1014]	@ 0x3f6
 8000a62:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a64:	b662      	cpsie	i
}
 8000a66:	bf00      	nop
	__enable_irq();
}
 8000a68:	bf00      	nop
 8000a6a:	f507 777e 	add.w	r7, r7, #1016	@ 0x3f8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a74:	b004      	add	sp, #16
 8000a76:	4770      	bx	lr
 8000a78:	2000159c 	.word	0x2000159c
 8000a7c:	200011b4 	.word	0x200011b4
 8000a80:	10624dd3 	.word	0x10624dd3
 8000a84:	200001a0 	.word	0x200001a0
 8000a88:	2000159e 	.word	0x2000159e

08000a8c <send_answer_message>:

// Z STM do PC
void send_answer_message(char* ans_msg, ...) {
 8000a8c:	b40f      	push	{r0, r1, r2, r3}
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	f5ad 6dff 	sub.w	sp, sp, #2040	@ 0x7f8
 8000a94:	af04      	add	r7, sp, #16
	char answer_data[buff_length];
	char answer_msg[buff_length];
	uint16_t answer_length;
	va_list arglist;

	va_start(arglist, ans_msg);
 8000a96:	f207 72f4 	addw	r2, r7, #2036	@ 0x7f4
 8000a9a:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8000a9e:	f5a3 63fc 	sub.w	r3, r3, #2016	@ 0x7e0
 8000aa2:	601a      	str	r2, [r3, #0]
	vsprintf(answer_data, ans_msg, arglist);
 8000aa4:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8000aa8:	f5a3 63fc 	sub.w	r3, r3, #2016	@ 0x7e0
 8000aac:	f507 707d 	add.w	r0, r7, #1012	@ 0x3f4
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	@ 0x7f0
 8000ab6:	f006 fcbf 	bl	8007438 <vsiprintf>
	va_end(arglist);

	answer_length = strlen(answer_data);
 8000aba:	f507 737d 	add.w	r3, r7, #1012	@ 0x3f4
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fbb0 	bl	8000224 <strlen>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f8a7 37de 	strh.w	r3, [r7, #2014]	@ 0x7de

	uint8_t ans_checksum = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 37dd 	strb.w	r3, [r7, #2013]	@ 0x7dd
	uint16_t ans_checksum_sum = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8a7 37e6 	strh.w	r3, [r7, #2022]	@ 0x7e6

	for (int i = 0; i < answer_length; i++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
 8000adc:	e012      	b.n	8000b04 <send_answer_message+0x78>
		ans_checksum_sum += answer_data[i];
 8000ade:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8000ae2:	f5a3 727d 	sub.w	r2, r3, #1012	@ 0x3f4
 8000ae6:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	@ 0x7e6
 8000af4:	4413      	add	r3, r2
 8000af6:	f8a7 37e6 	strh.w	r3, [r7, #2022]	@ 0x7e6
	for (int i = 0; i < answer_length; i++)
 8000afa:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 8000afe:	3301      	adds	r3, #1
 8000b00:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
 8000b04:	f8b7 37de 	ldrh.w	r3, [r7, #2014]	@ 0x7de
 8000b08:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbe6      	blt.n	8000ade <send_answer_message+0x52>

	ans_checksum = ans_checksum_sum % checksum_div;
 8000b10:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	@ 0x7e6
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f003 031f 	and.w	r3, r3, #31
 8000b1a:	f887 37dd 	strb.w	r3, [r7, #2013]	@ 0x7dd

	char ans_command_len_arr[3];
	change_int_to_char_arr(ans_command_len_arr, answer_length);
 8000b1e:	f8b7 37de 	ldrh.w	r3, [r7, #2014]	@ 0x7de
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff01 	bl	8000930 <change_int_to_char_arr>
	char ans_checksum_arr[3];
	change_int_to_char_arr(ans_checksum_arr, ans_checksum);
 8000b2e:	f897 27dd 	ldrb.w	r2, [r7, #2013]	@ 0x7dd
 8000b32:	463b      	mov	r3, r7
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fefa 	bl	8000930 <change_int_to_char_arr>
	sprintf(answer_msg, "\%s%s%s%s%s\*" , device_address, source_address, ans_command_len_arr, ans_msg, ans_checksum_arr);
 8000b3c:	f107 000c 	add.w	r0, r7, #12
 8000b40:	463b      	mov	r3, r7
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <send_answer_message+0xe8>)
 8000b50:	4a09      	ldr	r2, [pc, #36]	@ (8000b78 <send_answer_message+0xec>)
 8000b52:	490a      	ldr	r1, [pc, #40]	@ (8000b7c <send_answer_message+0xf0>)
 8000b54:	f006 fbf6 	bl	8007344 <siprintf>
	send(answer_msg);
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff11 	bl	8000984 <send>
}
 8000b62:	bf00      	nop
 8000b64:	f507 67fd 	add.w	r7, r7, #2024	@ 0x7e8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b6e:	b004      	add	sp, #16
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000004 	.word	0x20000004
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	08008550 	.word	0x08008550

08000b80 <is_char_frame_start>:



//odpowiedni znak!
uint8_t is_char_frame_start(uint8_t *single_char) {
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	if (single_char == 0x3A)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b3a      	cmp	r3, #58	@ 0x3a
 8000b8c:	d101      	bne.n	8000b92 <is_char_frame_start+0x12>
		return 1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e000      	b.n	8000b94 <is_char_frame_start+0x14>
	else
		return 0;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <is_char_frame_end>:


//odpowiedni znak!
uint8_t is_char_frame_end(uint8_t *single_char) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if (single_char == 0x3B)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b3b      	cmp	r3, #59	@ 0x3b
 8000bac:	d101      	bne.n	8000bb2 <is_char_frame_end+0x12>
		return 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e000      	b.n	8000bb4 <is_char_frame_end+0x14>
	else
		return 0;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <reset_frame_state>:

void reset_frame_state() {
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	frame_length = 0;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <reset_frame_state+0x1c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	801a      	strh	r2, [r3, #0]
	frame_state = FIND_FRAME_START;
 8000bca:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <reset_frame_state+0x20>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	701a      	strb	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000204 	.word	0x20000204
 8000be0:	20000007 	.word	0x20000007

08000be4 <is_string_alphanumeric>:

uint8_t is_string_alphanumeric(char tmp[], int array_size) {
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < array_size; i++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e010      	b.n	8000c16 <is_string_alphanumeric+0x32>
		if (!(tmp[i] >= '0' && tmp[i] <= '9'))
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000bfe:	d905      	bls.n	8000c0c <is_string_alphanumeric+0x28>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b39      	cmp	r3, #57	@ 0x39
 8000c0a:	d901      	bls.n	8000c10 <is_string_alphanumeric+0x2c>
			return 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e007      	b.n	8000c20 <is_string_alphanumeric+0x3c>
	for (int i = 0; i < array_size; i++) {
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3301      	adds	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	dbea      	blt.n	8000bf4 <is_string_alphanumeric+0x10>
	}
	return 1;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0cc      	sub	sp, #304	@ 0x130
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c32:	f000 fec3 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c36:	f000 fae7 	bl	8001208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3a:	f000 fbd3 	bl	80013e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c3e:	f000 fba9 	bl	8001394 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c42:	f000 fb7d 	bl	8001340 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c46:	f000 fb4d 	bl	80012e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &buf_rx[rx_empty], 1);
 8000c4a:	4bb3      	ldr	r3, [pc, #716]	@ (8000f18 <main+0x2ec>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	461a      	mov	r2, r3
 8000c52:	4bb2      	ldr	r3, [pc, #712]	@ (8000f1c <main+0x2f0>)
 8000c54:	4413      	add	r3, r2
 8000c56:	2201      	movs	r2, #1
 8000c58:	4619      	mov	r1, r3
 8000c5a:	48b1      	ldr	r0, [pc, #708]	@ (8000f20 <main+0x2f4>)
 8000c5c:	f005 faf2 	bl	8006244 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (rx_has_data() || (frame_state != WAIT_FOR_MESSAGE && rx_has_data() == 0)) {
 8000c60:	f7ff fdb4 	bl	80007cc <rx_has_data>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d109      	bne.n	8000c7e <main+0x52>
 8000c6a:	4bae      	ldr	r3, [pc, #696]	@ (8000f24 <main+0x2f8>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d0f5      	beq.n	8000c60 <main+0x34>
 8000c74:	f7ff fdaa 	bl	80007cc <rx_has_data>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f0      	bne.n	8000c60 <main+0x34>
		  uint8_t single_char;
		  char temp[3];

		  switch (frame_state) {
 8000c7e:	4ba9      	ldr	r3, [pc, #676]	@ (8000f24 <main+0x2f8>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	3b01      	subs	r3, #1
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d8ea      	bhi.n	8000c60 <main+0x34>
 8000c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c90 <main+0x64>)
 8000c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c90:	08000cad 	.word	0x08000cad
 8000c94:	08000d3d 	.word	0x08000d3d
 8000c98:	08000dc7 	.word	0x08000dc7
 8000c9c:	08000ec5 	.word	0x08000ec5
 8000ca0:	08000eed 	.word	0x08000eed
 8000ca4:	08000fb3 	.word	0x08000fb3
 8000ca8:	0800106d 	.word	0x0800106d
		  case WAIT_FOR_MESSAGE:
			  if (message_idx == rx_empty)
 8000cac:	4b9e      	ldr	r3, [pc, #632]	@ (8000f28 <main+0x2fc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b98      	ldr	r3, [pc, #608]	@ (8000f18 <main+0x2ec>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	f000 826f 	beq.w	800119e <main+0x572>
				  break;
			  single_char = buf_rx[message_idx];
 8000cc0:	4b99      	ldr	r3, [pc, #612]	@ (8000f28 <main+0x2fc>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b94      	ldr	r3, [pc, #592]	@ (8000f1c <main+0x2f0>)
 8000cca:	5c9b      	ldrb	r3, [r3, r2]
 8000ccc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

			  message_idx++;
 8000cd0:	4b95      	ldr	r3, [pc, #596]	@ (8000f28 <main+0x2fc>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b93      	ldr	r3, [pc, #588]	@ (8000f28 <main+0x2fc>)
 8000cdc:	701a      	strb	r2, [r3, #0]
			  message_idx %= buff_length;
 8000cde:	4b92      	ldr	r3, [pc, #584]	@ (8000f28 <main+0x2fc>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b91      	ldr	r3, [pc, #580]	@ (8000f2c <main+0x300>)
 8000ce8:	fb83 1302 	smull	r1, r3, r3, r2
 8000cec:	1199      	asrs	r1, r3, #6
 8000cee:	17d3      	asrs	r3, r2, #31
 8000cf0:	1acb      	subs	r3, r1, r3
 8000cf2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cf6:	fb01 f303 	mul.w	r3, r1, r3
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b8a      	ldr	r3, [pc, #552]	@ (8000f28 <main+0x2fc>)
 8000d00:	701a      	strb	r2, [r3, #0]

			  if (is_char_endmessage(single_char)) {
 8000d02:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fdae 	bl	8000868 <is_char_endmessage>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 8247 	beq.w	80011a2 <main+0x576>
				  message_length = get_message(message);
 8000d14:	4886      	ldr	r0, [pc, #536]	@ (8000f30 <main+0x304>)
 8000d16:	f7ff fdbb 	bl	8000890 <get_message>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b85      	ldr	r3, [pc, #532]	@ (8000f34 <main+0x308>)
 8000d20:	801a      	strh	r2, [r3, #0]

				  if (message_length > 0){
 8000d22:	4b84      	ldr	r3, [pc, #528]	@ (8000f34 <main+0x308>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 823a 	beq.w	80011a2 <main+0x576>
					  message_idx = 0;
 8000d2e:	4b7e      	ldr	r3, [pc, #504]	@ (8000f28 <main+0x2fc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
					  frame_state = FIND_FRAME_START;
 8000d34:	4b7b      	ldr	r3, [pc, #492]	@ (8000f24 <main+0x2f8>)
 8000d36:	2202      	movs	r2, #2
 8000d38:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  break;
 8000d3a:	e232      	b.n	80011a2 <main+0x576>

		  case FIND_FRAME_START:
			  for (int i = message_idx; i < message_length; i++) {
 8000d3c:	4b7a      	ldr	r3, [pc, #488]	@ (8000f28 <main+0x2fc>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000d46:	e026      	b.n	8000d96 <main+0x16a>
				  if (is_char_frame_start(message[i])) {
 8000d48:	4a79      	ldr	r2, [pc, #484]	@ (8000f30 <main+0x304>)
 8000d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff13 	bl	8000b80 <is_char_frame_start>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d015      	beq.n	8000d8c <main+0x160>
					  if (++i < message_length) {
 8000d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000d64:	3301      	adds	r3, #1
 8000d66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000d6a:	4b72      	ldr	r3, [pc, #456]	@ (8000f34 <main+0x308>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000d76:	4293      	cmp	r3, r2
 8000d78:	da08      	bge.n	8000d8c <main+0x160>
						  message_idx = i;
 8000d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b69      	ldr	r3, [pc, #420]	@ (8000f28 <main+0x2fc>)
 8000d82:	701a      	strb	r2, [r3, #0]
						  frame_state = COLLECT_FRAME;
 8000d84:	4b67      	ldr	r3, [pc, #412]	@ (8000f24 <main+0x2f8>)
 8000d86:	2203      	movs	r2, #3
 8000d88:	701a      	strb	r2, [r3, #0]
						  break;
 8000d8a:	e00c      	b.n	8000da6 <main+0x17a>
			  for (int i = message_idx; i < message_length; i++) {
 8000d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000d90:	3301      	adds	r3, #1
 8000d92:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000d96:	4b67      	ldr	r3, [pc, #412]	@ (8000f34 <main+0x308>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000da2:	4293      	cmp	r3, r2
 8000da4:	dbd0      	blt.n	8000d48 <main+0x11c>
					  }
				  }
			  }
			  if (frame_state == FIND_FRAME_START) {
 8000da6:	4b5f      	ldr	r3, [pc, #380]	@ (8000f24 <main+0x2f8>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	f040 81fa 	bne.w	80011a6 <main+0x57a>
				  frame_state = WAIT_FOR_MESSAGE;
 8000db2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f24 <main+0x2f8>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
				  message_idx = rx_busy;
 8000db8:	4b5f      	ldr	r3, [pc, #380]	@ (8000f38 <main+0x30c>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b59      	ldr	r3, [pc, #356]	@ (8000f28 <main+0x2fc>)
 8000dc2:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000dc4:	e1ef      	b.n	80011a6 <main+0x57a>
		  case COLLECT_FRAME:
			  for (int i = message_idx; i < message_length; i++) {
 8000dc6:	4b58      	ldr	r3, [pc, #352]	@ (8000f28 <main+0x2fc>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000dd0:	e067      	b.n	8000ea2 <main+0x276>
				  single_char = message[i];
 8000dd2:	4a57      	ldr	r2, [pc, #348]	@ (8000f30 <main+0x304>)
 8000dd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000dd8:	4413      	add	r3, r2
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

				  if (is_char_frame_start(single_char) == 1) {
 8000de0:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fecb 	bl	8000b80 <is_char_frame_start>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d109      	bne.n	8000e04 <main+0x1d8>
					  message_idx = 1;
 8000df0:	4b4d      	ldr	r3, [pc, #308]	@ (8000f28 <main+0x2fc>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
					  frame_state = FIND_FRAME_START;
 8000df6:	4b4b      	ldr	r3, [pc, #300]	@ (8000f24 <main+0x2f8>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	701a      	strb	r2, [r3, #0]
					  frame_length = 0;
 8000dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8000f3c <main+0x310>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	801a      	strh	r2, [r3, #0]
					  break;
 8000e02:	e056      	b.n	8000eb2 <main+0x286>
				  }
				  else if (is_char_frame_end(single_char) == 1) {
 8000e04:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fec9 	bl	8000ba0 <is_char_frame_end>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d11f      	bne.n	8000e54 <main+0x228>
					  if (frame_length < frame_min_length) {
 8000e14:	4b49      	ldr	r3, [pc, #292]	@ (8000f3c <main+0x310>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	2b0b      	cmp	r3, #11
 8000e1c:	d80c      	bhi.n	8000e38 <main+0x20c>
						  message_idx = ++i;
 8000e1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e22:	3301      	adds	r3, #1
 8000e24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000e28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f28 <main+0x2fc>)
 8000e30:	701a      	strb	r2, [r3, #0]
						  reset_frame_state();
 8000e32:	f7ff fec5 	bl	8000bc0 <reset_frame_state>
						  break;
 8000e36:	e03c      	b.n	8000eb2 <main+0x286>
					  }
					  message_idx = ++i;
 8000e38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b37      	ldr	r3, [pc, #220]	@ (8000f28 <main+0x2fc>)
 8000e4a:	701a      	strb	r2, [r3, #0]
					  frame_state = CHECK_RECEIVER_SENDER;
 8000e4c:	4b35      	ldr	r3, [pc, #212]	@ (8000f24 <main+0x2f8>)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	701a      	strb	r2, [r3, #0]
					  break;
 8000e52:	e02e      	b.n	8000eb2 <main+0x286>
				  }
				  else {
					  frame[frame_length] = single_char;
 8000e54:	4b39      	ldr	r3, [pc, #228]	@ (8000f3c <main+0x310>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 8000e60:	b299      	uxth	r1, r3
 8000e62:	4b37      	ldr	r3, [pc, #220]	@ (8000f40 <main+0x314>)
 8000e64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					  frame_length++;
 8000e68:	4b34      	ldr	r3, [pc, #208]	@ (8000f3c <main+0x310>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	3301      	adds	r3, #1
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <main+0x310>)
 8000e74:	801a      	strh	r2, [r3, #0]

					  if (frame_length >= frame_max_length) {
 8000e76:	4b31      	ldr	r3, [pc, #196]	@ (8000f3c <main+0x310>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8000e80:	d30a      	bcc.n	8000e98 <main+0x26c>
						  message_idx = ++i;
 8000e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e86:	3301      	adds	r3, #1
 8000e88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b25      	ldr	r3, [pc, #148]	@ (8000f28 <main+0x2fc>)
 8000e94:	701a      	strb	r2, [r3, #0]
						  break;
 8000e96:	e00c      	b.n	8000eb2 <main+0x286>
			  for (int i = message_idx; i < message_length; i++) {
 8000e98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000ea2:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <main+0x308>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	db8f      	blt.n	8000dd2 <main+0x1a6>
					  }
				  }
			  }

			  if (frame_state == COLLECT_FRAME)
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <main+0x2f8>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	f040 8176 	bne.w	80011aa <main+0x57e>
				  reset_frame_state();
 8000ebe:	f7ff fe7f 	bl	8000bc0 <reset_frame_state>
			  break;
 8000ec2:	e172      	b.n	80011aa <main+0x57e>

		  case CHECK_RECEIVER_SENDER:
		  				;

		  				// Porównanie odbiorcy
		  				if (strncmp(&frame[3], device_address, 3) == 0) {
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	491f      	ldr	r1, [pc, #124]	@ (8000f44 <main+0x318>)
 8000ec8:	481f      	ldr	r0, [pc, #124]	@ (8000f48 <main+0x31c>)
 8000eca:	f006 fad4 	bl	8007476 <strncmp>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d108      	bne.n	8000ee6 <main+0x2ba>

		  					// Kopiowanie nadawcy
		  					strncpy(source_address, frame, 3);
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	491a      	ldr	r1, [pc, #104]	@ (8000f40 <main+0x314>)
 8000ed8:	481c      	ldr	r0, [pc, #112]	@ (8000f4c <main+0x320>)
 8000eda:	f006 fade 	bl	800749a <strncpy>
		  					frame_state = CHECK_COMMAND_LENGTH;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <main+0x2f8>)
 8000ee0:	2205      	movs	r2, #5
 8000ee2:	701a      	strb	r2, [r3, #0]
		  				}
		  				else {
		  					reset_frame_state();
		  				}

		  				break;
 8000ee4:	e163      	b.n	80011ae <main+0x582>
		  					reset_frame_state();
 8000ee6:	f7ff fe6b 	bl	8000bc0 <reset_frame_state>
		  				break;
 8000eea:	e160      	b.n	80011ae <main+0x582>

		  case CHECK_COMMAND_LENGTH:
			  strncpy(temp, &frame[6], 3);
 8000eec:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	4917      	ldr	r1, [pc, #92]	@ (8000f50 <main+0x324>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f006 fad0 	bl	800749a <strncpy>
			  if (is_string_alphanumeric(temp, 3) == 0) {
 8000efa:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000efe:	2103      	movs	r1, #3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fe6f 	bl	8000be4 <is_string_alphanumeric>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d125      	bne.n	8000f58 <main+0x32c>
				  send_answer_message("WRLEN");
 8000f0c:	4811      	ldr	r0, [pc, #68]	@ (8000f54 <main+0x328>)
 8000f0e:	f7ff fdbd 	bl	8000a8c <send_answer_message>
				  reset_frame_state();
 8000f12:	f7ff fe55 	bl	8000bc0 <reset_frame_state>
				  break;
 8000f16:	e14a      	b.n	80011ae <main+0x582>
 8000f18:	200011b0 	.word	0x200011b0
 8000f1c:	20000dc8 	.word	0x20000dc8
 8000f20:	200001a0 	.word	0x200001a0
 8000f24:	20000007 	.word	0x20000007
 8000f28:	20000dc4 	.word	0x20000dc4
 8000f2c:	10624dd3 	.word	0x10624dd3
 8000f30:	200009dc 	.word	0x200009dc
 8000f34:	200009da 	.word	0x200009da
 8000f38:	200011b2 	.word	0x200011b2
 8000f3c:	20000204 	.word	0x20000204
 8000f40:	20000208 	.word	0x20000208
 8000f44:	20000000 	.word	0x20000000
 8000f48:	2000020e 	.word	0x2000020e
 8000f4c:	20000004 	.word	0x20000004
 8000f50:	20000214 	.word	0x20000214
 8000f54:	0800855c 	.word	0x0800855c
			  }
			  command_length = atoi(temp);
 8000f58:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f006 f89f 	bl	80070a0 <atoi>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	4b92      	ldr	r3, [pc, #584]	@ (80011b0 <main+0x584>)
 8000f68:	801a      	strh	r2, [r3, #0]

			  if (command_length <= 265 && frame_length - frame_min_length == command_length) {
 8000f6a:	4b91      	ldr	r3, [pc, #580]	@ (80011b0 <main+0x584>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	f5b3 7f85 	cmp.w	r3, #266	@ 0x10a
 8000f74:	d20c      	bcs.n	8000f90 <main+0x364>
 8000f76:	4b8f      	ldr	r3, [pc, #572]	@ (80011b4 <main+0x588>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	3b0c      	subs	r3, #12
 8000f7e:	4a8c      	ldr	r2, [pc, #560]	@ (80011b0 <main+0x584>)
 8000f80:	8812      	ldrh	r2, [r2, #0]
 8000f82:	b292      	uxth	r2, r2
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d103      	bne.n	8000f90 <main+0x364>
				  frame_state = CHECK_CHECKSUM;
 8000f88:	4b8b      	ldr	r3, [pc, #556]	@ (80011b8 <main+0x58c>)
 8000f8a:	2206      	movs	r2, #6
 8000f8c:	701a      	strb	r2, [r3, #0]
			  }
			  else {
				  reset_frame_state();
				  send_answer_message("WRLEN");
			  }
			  break;
 8000f8e:	e10e      	b.n	80011ae <main+0x582>
			  else if (frame_length - frame_min_length == 0) {
 8000f90:	4b88      	ldr	r3, [pc, #544]	@ (80011b4 <main+0x588>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	2b0c      	cmp	r3, #12
 8000f98:	d105      	bne.n	8000fa6 <main+0x37a>
				  reset_frame_state();
 8000f9a:	f7ff fe11 	bl	8000bc0 <reset_frame_state>
				  send_answer_message("WRFRM");
 8000f9e:	4887      	ldr	r0, [pc, #540]	@ (80011bc <main+0x590>)
 8000fa0:	f7ff fd74 	bl	8000a8c <send_answer_message>
			  break;
 8000fa4:	e103      	b.n	80011ae <main+0x582>
				  reset_frame_state();
 8000fa6:	f7ff fe0b 	bl	8000bc0 <reset_frame_state>
				  send_answer_message("WRLEN");
 8000faa:	4885      	ldr	r0, [pc, #532]	@ (80011c0 <main+0x594>)
 8000fac:	f7ff fd6e 	bl	8000a8c <send_answer_message>
			  break;
 8000fb0:	e0fd      	b.n	80011ae <main+0x582>

		  case CHECK_CHECKSUM:
			  uint16_t checksumStart = frame_length - 3;
 8000fb2:	4b80      	ldr	r3, [pc, #512]	@ (80011b4 <main+0x588>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	3b03      	subs	r3, #3
 8000fba:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			  uint16_t checksum;

			  strncpy(temp, &frame[checksumStart], 3);
 8000fbe:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4a7f      	ldr	r2, [pc, #508]	@ (80011c4 <main+0x598>)
 8000fc6:	1899      	adds	r1, r3, r2
 8000fc8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000fcc:	2203      	movs	r2, #3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f006 fa63 	bl	800749a <strncpy>

			  if (is_string_alphanumeric(temp, 3) == 0) {
 8000fd4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000fd8:	2103      	movs	r1, #3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe02 	bl	8000be4 <is_string_alphanumeric>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d105      	bne.n	8000ff2 <main+0x3c6>
				  send_answer_message("WRCHSUM");
 8000fe6:	4878      	ldr	r0, [pc, #480]	@ (80011c8 <main+0x59c>)
 8000fe8:	f7ff fd50 	bl	8000a8c <send_answer_message>
				  reset_frame_state();
 8000fec:	f7ff fde8 	bl	8000bc0 <reset_frame_state>
				  break;
 8000ff0:	e0dd      	b.n	80011ae <main+0x582>
			  }
			  checksum = atoi(temp);
 8000ff2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 f852 	bl	80070a0 <atoi>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

			  uint16_t dataSum = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126

			  for (int i = 9; i < checksumStart; i++)
 8001008:	2309      	movs	r3, #9
 800100a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800100e:	e00f      	b.n	8001030 <main+0x404>
				  dataSum += frame[i];
 8001010:	4a6c      	ldr	r2, [pc, #432]	@ (80011c4 <main+0x598>)
 8001012:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800101a:	b29a      	uxth	r2, r3
 800101c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001020:	4413      	add	r3, r2
 8001022:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
			  for (int i = 9; i < checksumStart; i++)
 8001026:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800102a:	3301      	adds	r3, #1
 800102c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001030:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8001034:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8001038:	429a      	cmp	r2, r3
 800103a:	dbe9      	blt.n	8001010 <main+0x3e4>

			  uint8_t readChecksum = dataSum % checksum_div;
 800103c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f003 031f 	and.w	r3, r3, #31
 8001046:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
			  if (checksum == readChecksum) {
 800104a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800104e:	b29b      	uxth	r3, r3
 8001050:	f8b7 210c 	ldrh.w	r2, [r7, #268]	@ 0x10c
 8001054:	429a      	cmp	r2, r3
 8001056:	d103      	bne.n	8001060 <main+0x434>
				  frame_state = ANALYZE_COMMAND;
 8001058:	4b57      	ldr	r3, [pc, #348]	@ (80011b8 <main+0x58c>)
 800105a:	2207      	movs	r2, #7
 800105c:	701a      	strb	r2, [r3, #0]
			  }
			  else {
				  send_answer_message("WRCHSUM");
				  reset_frame_state();
			  }
			  break;
 800105e:	e0a6      	b.n	80011ae <main+0x582>
				  send_answer_message("WRCHSUM");
 8001060:	4859      	ldr	r0, [pc, #356]	@ (80011c8 <main+0x59c>)
 8001062:	f7ff fd13 	bl	8000a8c <send_answer_message>
				  reset_frame_state();
 8001066:	f7ff fdab 	bl	8000bc0 <reset_frame_state>
			  break;
 800106a:	e0a0      	b.n	80011ae <main+0x582>
		  case ANALYZE_COMMAND:
			  char command[256];
			  uint8_t acctual_command = frame_length - frame_min_length;
 800106c:	4b51      	ldr	r3, [pc, #324]	@ (80011b4 <main+0x588>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	3b0c      	subs	r3, #12
 8001076:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
			  strncpy(command, &frame[9], acctual_command);
 800107a:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	4952      	ldr	r1, [pc, #328]	@ (80011cc <main+0x5a0>)
 8001082:	4618      	mov	r0, r3
 8001084:	f006 fa09 	bl	800749a <strncpy>

			  //Reset urządzenia
			  if (strcmp(command, "RST") == 0) {
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4951      	ldr	r1, [pc, #324]	@ (80011d0 <main+0x5a4>)
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f8bf 	bl	8000210 <strcmp>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d108      	bne.n	80010aa <main+0x47e>
			      // Wykonanie resetu
			      QMC_Reset(&sensor);
 8001098:	484e      	ldr	r0, [pc, #312]	@ (80011d4 <main+0x5a8>)
 800109a:	f7ff fb7b 	bl	8000794 <QMC_Reset>
			      send_answer_message("RESET_STM");
 800109e:	484e      	ldr	r0, [pc, #312]	@ (80011d8 <main+0x5ac>)
 80010a0:	f7ff fcf4 	bl	8000a8c <send_answer_message>
			      reset_frame_state();
 80010a4:	f7ff fd8c 	bl	8000bc0 <reset_frame_state>
			      break;
 80010a8:	e081      	b.n	80011ae <main+0x582>
			  }

			  //Standby
			  else if (strcmp(command, "STANDBY") == 0){
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	494b      	ldr	r1, [pc, #300]	@ (80011dc <main+0x5b0>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f8ae 	bl	8000210 <strcmp>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d108      	bne.n	80010cc <main+0x4a0>
				  QMC_Standby(&sensor);
 80010ba:	4846      	ldr	r0, [pc, #280]	@ (80011d4 <main+0x5a8>)
 80010bc:	f7ff fb4e 	bl	800075c <QMC_Standby>
				  send_answer_message("ZASTOPOWANO");
 80010c0:	4847      	ldr	r0, [pc, #284]	@ (80011e0 <main+0x5b4>)
 80010c2:	f7ff fce3 	bl	8000a8c <send_answer_message>
				  reset_frame_state();
 80010c6:	f7ff fd7b 	bl	8000bc0 <reset_frame_state>
				  break;
 80010ca:	e070      	b.n	80011ae <main+0x582>
			  }

			  // Ustawienie i włączenie pobioru danych w danym interwale czasowym
			  else if (strncmp(command, "SETINTERVAL[", 12) == 0) {
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	220c      	movs	r2, #12
 80010d0:	4944      	ldr	r1, [pc, #272]	@ (80011e4 <main+0x5b8>)
 80010d2:	4618      	mov	r0, r3
 80010d4:	f006 f9cf 	bl	8007476 <strncmp>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d13f      	bne.n	800115e <main+0x532>
			      char *delayPtr = command + 12; // wskaźnik na fragment po "SETINTERVAL["
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	330c      	adds	r3, #12
 80010e2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
			      char *endBracket = strchr(delayPtr, ']');
 80010e6:	215d      	movs	r1, #93	@ 0x5d
 80010e8:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80010ec:	f006 f9b6 	bl	800745c <strchr>
 80010f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
			      if (endBracket != NULL) {
 80010f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f43f adb1 	beq.w	8000c60 <main+0x34>
			          *endBracket = '\0'; // Zakończ ciąg
 80010fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
			          int Hz = atoi(delayPtr); // Konwersja na int
 8001106:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800110a:	f005 ffc9 	bl	80070a0 <atoi>
 800110e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
			          if (Hz == 200 || Hz == 100 || Hz == 50 || Hz == 10) {
 8001112:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001116:	2bc8      	cmp	r3, #200	@ 0xc8
 8001118:	d00b      	beq.n	8001132 <main+0x506>
 800111a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800111e:	2b64      	cmp	r3, #100	@ 0x64
 8001120:	d007      	beq.n	8001132 <main+0x506>
 8001122:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001126:	2b32      	cmp	r3, #50	@ 0x32
 8001128:	d003      	beq.n	8001132 <main+0x506>
 800112a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800112e:	2b0a      	cmp	r3, #10
 8001130:	d10f      	bne.n	8001152 <main+0x526>
			              QMC_init(&sensor, &hi2c1, Hz);
 8001132:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001136:	b2db      	uxtb	r3, r3
 8001138:	461a      	mov	r2, r3
 800113a:	492b      	ldr	r1, [pc, #172]	@ (80011e8 <main+0x5bc>)
 800113c:	4825      	ldr	r0, [pc, #148]	@ (80011d4 <main+0x5a8>)
 800113e:	f7ff fa47 	bl	80005d0 <QMC_init>
			              send_answer_message("INTERVAL=%d", Hz);
 8001142:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8001146:	4829      	ldr	r0, [pc, #164]	@ (80011ec <main+0x5c0>)
 8001148:	f7ff fca0 	bl	8000a8c <send_answer_message>
			              reset_frame_state();
 800114c:	f7ff fd38 	bl	8000bc0 <reset_frame_state>
			              break;
 8001150:	e02d      	b.n	80011ae <main+0x582>
			          } else {
			              send_answer_message("WPISANO_ZLY_INTERWAL");
 8001152:	4827      	ldr	r0, [pc, #156]	@ (80011f0 <main+0x5c4>)
 8001154:	f7ff fc9a 	bl	8000a8c <send_answer_message>
			              reset_frame_state();
 8001158:	f7ff fd32 	bl	8000bc0 <reset_frame_state>
			              break;
 800115c:	e027      	b.n	80011ae <main+0x582>
			  }



			  // Aktualne dane pobiór
			  else if (strcmp(command, "GET") == 0)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4924      	ldr	r1, [pc, #144]	@ (80011f4 <main+0x5c8>)
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f854 	bl	8000210 <strcmp>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	f47f ad78 	bne.w	8000c60 <main+0x34>
			  {
				  QMC_read(&sensor, &x, &y, &z);
 8001170:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <main+0x5cc>)
 8001172:	4a22      	ldr	r2, [pc, #136]	@ (80011fc <main+0x5d0>)
 8001174:	4922      	ldr	r1, [pc, #136]	@ (8001200 <main+0x5d4>)
 8001176:	4817      	ldr	r0, [pc, #92]	@ (80011d4 <main+0x5a8>)
 8001178:	f7ff fa98 	bl	80006ac <QMC_read>
				  send_answer_message("X:%d,Y:%d,Z:%d\n", x, y, z);
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <main+0x5d4>)
 800117e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001182:	4619      	mov	r1, r3
 8001184:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <main+0x5d0>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	461a      	mov	r2, r3
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <main+0x5cc>)
 800118e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001192:	481c      	ldr	r0, [pc, #112]	@ (8001204 <main+0x5d8>)
 8001194:	f7ff fc7a 	bl	8000a8c <send_answer_message>
				  reset_frame_state();
 8001198:	f7ff fd12 	bl	8000bc0 <reset_frame_state>
				  break;
 800119c:	e007      	b.n	80011ae <main+0x582>
				  break;
 800119e:	bf00      	nop
 80011a0:	e55e      	b.n	8000c60 <main+0x34>
			  break;
 80011a2:	bf00      	nop
 80011a4:	e55c      	b.n	8000c60 <main+0x34>
			  break;
 80011a6:	bf00      	nop
 80011a8:	e55a      	b.n	8000c60 <main+0x34>
			  break;
 80011aa:	bf00      	nop
 80011ac:	e558      	b.n	8000c60 <main+0x34>
	  if (rx_has_data() || (frame_state != WAIT_FOR_MESSAGE && rx_has_data() == 0)) {
 80011ae:	e557      	b.n	8000c60 <main+0x34>
 80011b0:	200009d8 	.word	0x200009d8
 80011b4:	20000204 	.word	0x20000204
 80011b8:	20000007 	.word	0x20000007
 80011bc:	08008564 	.word	0x08008564
 80011c0:	0800855c 	.word	0x0800855c
 80011c4:	20000208 	.word	0x20000208
 80011c8:	0800856c 	.word	0x0800856c
 80011cc:	2000021a 	.word	0x2000021a
 80011d0:	08008574 	.word	0x08008574
 80011d4:	200001e8 	.word	0x200001e8
 80011d8:	08008578 	.word	0x08008578
 80011dc:	08008584 	.word	0x08008584
 80011e0:	0800858c 	.word	0x0800858c
 80011e4:	08008598 	.word	0x08008598
 80011e8:	2000008c 	.word	0x2000008c
 80011ec:	080085a8 	.word	0x080085a8
 80011f0:	080085b4 	.word	0x080085b4
 80011f4:	080085cc 	.word	0x080085cc
 80011f8:	200015a4 	.word	0x200015a4
 80011fc:	200015a2 	.word	0x200015a2
 8001200:	200015a0 	.word	0x200015a0
 8001204:	080085d0 	.word	0x080085d0

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	@ 0x50
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2234      	movs	r2, #52	@ 0x34
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f006 f918 	bl	800744c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <SystemClock_Config+0xd4>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	4a29      	ldr	r2, [pc, #164]	@ (80012dc <SystemClock_Config+0xd4>)
 8001236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	@ 0x40
 800123c:	4b27      	ldr	r3, [pc, #156]	@ (80012dc <SystemClock_Config+0xd4>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001248:	2300      	movs	r3, #0
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <SystemClock_Config+0xd8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001254:	4a22      	ldr	r2, [pc, #136]	@ (80012e0 <SystemClock_Config+0xd8>)
 8001256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <SystemClock_Config+0xd8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001268:	2302      	movs	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126c:	2301      	movs	r3, #1
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001270:	2310      	movs	r3, #16
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001274:	2302      	movs	r3, #2
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001278:	2300      	movs	r3, #0
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800127c:	2310      	movs	r3, #16
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001280:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001284:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001286:	2304      	movs	r3, #4
 8001288:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800128a:	2302      	movs	r3, #2
 800128c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800128e:	2302      	movs	r3, #2
 8001290:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4618      	mov	r0, r3
 8001298:	f004 fcb0 	bl	8005bfc <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012a2:	f000 f90d 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2302      	movs	r3, #2
 80012ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2102      	movs	r1, #2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 f950 	bl	8005568 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012ce:	f000 f8f7 	bl	80014c0 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3750      	adds	r7, #80	@ 0x50
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000

080012e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012ea:	4a13      	ldr	r2, [pc, #76]	@ (8001338 <MX_I2C1_Init+0x54>)
 80012ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012f0:	4a12      	ldr	r2, [pc, #72]	@ (800133c <MX_I2C1_Init+0x58>)
 80012f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001302:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001306:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <MX_I2C1_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001322:	f001 fa99 	bl	8002858 <HAL_I2C_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800132c:	f000 f8c8 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000008c 	.word	0x2000008c
 8001338:	40005400 	.word	0x40005400
 800133c:	000186a0 	.word	0x000186a0

08001340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001346:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <MX_USART2_UART_Init+0x50>)
 8001348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001378:	f004 fede 	bl	8006138 <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001382:	f000 f89d 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001a0 	.word	0x200001a0
 8001390:	40004400 	.word	0x40004400

08001394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <MX_DMA_Init+0x4c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a0f      	ldr	r2, [pc, #60]	@ (80013e0 <MX_DMA_Init+0x4c>)
 80013a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <MX_DMA_Init+0x4c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	200b      	movs	r0, #11
 80013bc:	f000 fc4b 	bl	8001c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013c0:	200b      	movs	r0, #11
 80013c2:	f000 fc64 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2011      	movs	r0, #17
 80013cc:	f000 fc43 	bl	8001c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013d0:	2011      	movs	r0, #17
 80013d2:	f000 fc5c 	bl	8001c8e <HAL_NVIC_EnableIRQ>

}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a2c      	ldr	r2, [pc, #176]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a25      	ldr	r2, [pc, #148]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <MX_GPIO_Init+0xd0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2120      	movs	r1, #32
 800146e:	4812      	ldr	r0, [pc, #72]	@ (80014b8 <MX_GPIO_Init+0xd4>)
 8001470:	f001 f9d8 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001474:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800147a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	480c      	ldr	r0, [pc, #48]	@ (80014bc <MX_GPIO_Init+0xd8>)
 800148c:	f001 f836 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001490:	2320      	movs	r3, #32
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4804      	ldr	r0, [pc, #16]	@ (80014b8 <MX_GPIO_Init+0xd4>)
 80014a8:	f001 f828 	bl	80024fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	@ 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020800 	.word	0x40020800

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a0f      	ldr	r2, [pc, #60]	@ (8001518 <HAL_MspInit+0x4c>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800150a:	2007      	movs	r0, #7
 800150c:	f000 fb98 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a50      	ldr	r2, [pc, #320]	@ (800167c <HAL_I2C_MspInit+0x160>)
 800153a:	4293      	cmp	r3, r2
 800153c:	f040 8099 	bne.w	8001672 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	4b4e      	ldr	r3, [pc, #312]	@ (8001680 <HAL_I2C_MspInit+0x164>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	4a4d      	ldr	r2, [pc, #308]	@ (8001680 <HAL_I2C_MspInit+0x164>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001550:	4b4b      	ldr	r3, [pc, #300]	@ (8001680 <HAL_I2C_MspInit+0x164>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800155c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001562:	2312      	movs	r3, #18
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001566:	2301      	movs	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156e:	2304      	movs	r3, #4
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4842      	ldr	r0, [pc, #264]	@ (8001684 <HAL_I2C_MspInit+0x168>)
 800157a:	f000 ffbf 	bl	80024fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <HAL_I2C_MspInit+0x164>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	4a3e      	ldr	r2, [pc, #248]	@ (8001680 <HAL_I2C_MspInit+0x164>)
 8001588:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800158c:	6413      	str	r3, [r2, #64]	@ 0x40
 800158e:	4b3c      	ldr	r3, [pc, #240]	@ (8001680 <HAL_I2C_MspInit+0x164>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800159a:	4b3b      	ldr	r3, [pc, #236]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 800159c:	4a3b      	ldr	r2, [pc, #236]	@ (800168c <HAL_I2C_MspInit+0x170>)
 800159e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015a0:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a8:	4b37      	ldr	r3, [pc, #220]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ae:	4b36      	ldr	r3, [pc, #216]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b34      	ldr	r3, [pc, #208]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015bc:	4b32      	ldr	r3, [pc, #200]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c2:	4b31      	ldr	r3, [pc, #196]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80015da:	482b      	ldr	r0, [pc, #172]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015dc:	f000 fb72 	bl	8001cc4 <HAL_DMA_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80015e6:	f7ff ff6b 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a26      	ldr	r2, [pc, #152]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80015f0:	4a25      	ldr	r2, [pc, #148]	@ (8001688 <HAL_I2C_MspInit+0x16c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80015f6:	4b26      	ldr	r3, [pc, #152]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 80015f8:	4a26      	ldr	r2, [pc, #152]	@ (8001694 <HAL_I2C_MspInit+0x178>)
 80015fa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 80015fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001602:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 8001606:	2240      	movs	r2, #64	@ 0x40
 8001608:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160a:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001610:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 8001612:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001616:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001624:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800162a:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001636:	4816      	ldr	r0, [pc, #88]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 8001638:	f000 fb44 	bl	8001cc4 <HAL_DMA_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001642:	f7ff ff3d 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a11      	ldr	r2, [pc, #68]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 800164a:	635a      	str	r2, [r3, #52]	@ 0x34
 800164c:	4a10      	ldr	r2, [pc, #64]	@ (8001690 <HAL_I2C_MspInit+0x174>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	201f      	movs	r0, #31
 8001658:	f000 fafd 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800165c:	201f      	movs	r0, #31
 800165e:	f000 fb16 	bl	8001c8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2020      	movs	r0, #32
 8001668:	f000 faf5 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800166c:	2020      	movs	r0, #32
 800166e:	f000 fb0e 	bl	8001c8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	@ 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40005400 	.word	0x40005400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400
 8001688:	200000e0 	.word	0x200000e0
 800168c:	40026010 	.word	0x40026010
 8001690:	20000140 	.word	0x20000140
 8001694:	400260a0 	.word	0x400260a0

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a1d      	ldr	r2, [pc, #116]	@ (800172c <HAL_UART_MspInit+0x94>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d133      	bne.n	8001722 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <HAL_UART_MspInit+0x98>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001730 <HAL_UART_MspInit+0x98>)
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_UART_MspInit+0x98>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_UART_MspInit+0x98>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <HAL_UART_MspInit+0x98>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_UART_MspInit+0x98>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016f2:	230c      	movs	r3, #12
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001702:	2307      	movs	r3, #7
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4809      	ldr	r0, [pc, #36]	@ (8001734 <HAL_UART_MspInit+0x9c>)
 800170e:	f000 fef5 	bl	80024fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2026      	movs	r0, #38	@ 0x26
 8001718:	f000 fa9d 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800171c:	2026      	movs	r0, #38	@ 0x26
 800171e:	f000 fab6 	bl	8001c8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	@ 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40004400 	.word	0x40004400
 8001730:	40023800 	.word	0x40023800
 8001734:	40020000 	.word	0x40020000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <NMI_Handler+0x4>

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <UsageFault_Handler+0x4>

08001760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178e:	f000 f967 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <DMA1_Stream0_IRQHandler+0x10>)
 800179e:	f000 fc29 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200000e0 	.word	0x200000e0

080017ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <DMA1_Stream6_IRQHandler+0x10>)
 80017b2:	f000 fc1f 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000140 	.word	0x20000140

080017c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <I2C1_EV_IRQHandler+0x10>)
 80017c6:	f001 fd89 	bl	80032dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000008c 	.word	0x2000008c

080017d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <I2C1_ER_IRQHandler+0x10>)
 80017da:	f001 fed2 	bl	8003582 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000008c 	.word	0x2000008c

080017e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <USART2_IRQHandler+0x10>)
 80017ee:	f004 fd4f 	bl	8006290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200001a0 	.word	0x200001a0

080017fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e00a      	b.n	8001824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180e:	f3af 8000 	nop.w
 8001812:	4601      	mov	r1, r0
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	60ba      	str	r2, [r7, #8]
 800181a:	b2ca      	uxtb	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbf0      	blt.n	800180e <_read+0x12>
  }

  return len;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e009      	b.n	800185c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	60ba      	str	r2, [r7, #8]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf1      	blt.n	8001848 <_write+0x12>
  }
  return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_close>:

int _close(int file)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001896:	605a      	str	r2, [r3, #4]
  return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_isatty>:

int _isatty(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	@ (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f005 fe20 	bl	800754c <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	@ (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <_sbrk+0x64>)
 8001928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20020000 	.word	0x20020000
 8001938:	00000400 	.word	0x00000400
 800193c:	20001990 	.word	0x20001990
 8001940:	20001ae8 	.word	0x20001ae8

08001944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	@ (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800196c:	f7ff ffea 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	@ (80019a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	@ (80019a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	@ (80019b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001996:	f005 fddf 	bl	8007558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7ff f947 	bl	8000c2c <main>
  bx  lr    
 800199e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019ac:	0800877c 	.word	0x0800877c
  ldr r2, =_sbss
 80019b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019b4:	20001ae4 	.word	0x20001ae4

080019b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC_IRQHandler>
	...

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c0:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <HAL_Init+0x40>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	@ (80019fc <HAL_Init+0x40>)
 80019c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <HAL_Init+0x40>)
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	@ (80019fc <HAL_Init+0x40>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 f92b 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 f808 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7ff fd6c 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_InitTick+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_InitTick+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f943 	bl	8001caa <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00e      	b.n	8001a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d80a      	bhi.n	8001a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f000 f90b 	bl	8001c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a40:	4a06      	ldr	r2, [pc, #24]	@ (8001a5c <HAL_InitTick+0x5c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000010 	.word	0x20000010
 8001a5c:	2000000c 	.word	0x2000000c

08001a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000010 	.word	0x20000010
 8001a84:	20001994 	.word	0x20001994

08001a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20001994 	.word	0x20001994

08001aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	db0b      	blt.n	8001b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	4907      	ldr	r1, [pc, #28]	@ (8001b3c <__NVIC_EnableIRQ+0x38>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	2001      	movs	r0, #1
 8001b26:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000e100 	.word	0xe000e100

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db0a      	blt.n	8001b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	490c      	ldr	r1, [pc, #48]	@ (8001b8c <__NVIC_SetPriority+0x4c>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	0112      	lsls	r2, r2, #4
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b68:	e00a      	b.n	8001b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4908      	ldr	r1, [pc, #32]	@ (8001b90 <__NVIC_SetPriority+0x50>)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3b04      	subs	r3, #4
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	761a      	strb	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	@ 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	bf28      	it	cs
 8001bb2:	2304      	movcs	r3, #4
 8001bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d902      	bls.n	8001bc4 <NVIC_EncodePriority+0x30>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b03      	subs	r3, #3
 8001bc2:	e000      	b.n	8001bc6 <NVIC_EncodePriority+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	4313      	orrs	r3, r2
         );
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	@ 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c0c:	d301      	bcc.n	8001c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00f      	b.n	8001c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <SysTick_Config+0x40>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f7ff ff8e 	bl	8001b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <SysTick_Config+0x40>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2a:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <SysTick_Config+0x40>)
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	e000e010 	.word	0xe000e010

08001c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff29 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c68:	f7ff ff3e 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	f7ff ff8e 	bl	8001b94 <NVIC_EncodePriority>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff5d 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff31 	bl	8001b04 <__NVIC_EnableIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffa2 	bl	8001bfc <SysTick_Config>
 8001cb8:	4603      	mov	r3, r0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff feda 	bl	8001a88 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e099      	b.n	8001e14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d00:	e00f      	b.n	8001d22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d02:	f7ff fec1 	bl	8001a88 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d908      	bls.n	8001d22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2203      	movs	r2, #3
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e078      	b.n	8001e14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e8      	bne.n	8001d02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	4b38      	ldr	r3, [pc, #224]	@ (8001e1c <HAL_DMA_Init+0x158>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d107      	bne.n	8001d8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	4313      	orrs	r3, r2
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f023 0307 	bic.w	r3, r3, #7
 8001da2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d117      	bne.n	8001de6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00e      	beq.n	8001de6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fb1b 	bl	8002404 <DMA_CheckFifoParam>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2240      	movs	r2, #64	@ 0x40
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001de2:	2301      	movs	r3, #1
 8001de4:	e016      	b.n	8001e14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fad2 	bl	8002398 <DMA_CalcBaseAndBitshift>
 8001df4:	4603      	mov	r3, r0
 8001df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfc:	223f      	movs	r2, #63	@ 0x3f
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	f010803f 	.word	0xf010803f

08001e20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_DMA_Start_IT+0x26>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e040      	b.n	8001ec8 <HAL_DMA_Start_IT+0xa8>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d12f      	bne.n	8001eba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fa64 	bl	800233c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e78:	223f      	movs	r2, #63	@ 0x3f
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0216 	orr.w	r2, r2, #22
 8001e8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0208 	orr.w	r2, r2, #8
 8001ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e005      	b.n	8001ec6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001edc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ede:	f7ff fdd3 	bl	8001a88 <HAL_GetTick>
 8001ee2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d008      	beq.n	8001f02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2280      	movs	r2, #128	@ 0x80
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e052      	b.n	8001fa8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0216 	bic.w	r2, r2, #22
 8001f10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <HAL_DMA_Abort+0x62>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0208 	bic.w	r2, r2, #8
 8001f40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f52:	e013      	b.n	8001f7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f54:	f7ff fd98 	bl	8001a88 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d90c      	bls.n	8001f7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e015      	b.n	8001fa8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1e4      	bne.n	8001f54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8e:	223f      	movs	r2, #63	@ 0x3f
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d004      	beq.n	8001fce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2280      	movs	r2, #128	@ 0x80
 8001fc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00c      	b.n	8001fe8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2205      	movs	r2, #5
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002000:	4b8e      	ldr	r3, [pc, #568]	@ (800223c <HAL_DMA_IRQHandler+0x248>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a8e      	ldr	r2, [pc, #568]	@ (8002240 <HAL_DMA_IRQHandler+0x24c>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0a9b      	lsrs	r3, r3, #10
 800200c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201e:	2208      	movs	r2, #8
 8002020:	409a      	lsls	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d01a      	beq.n	8002060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0204 	bic.w	r2, r2, #4
 8002046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204c:	2208      	movs	r2, #8
 800204e:	409a      	lsls	r2, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	2201      	movs	r2, #1
 8002066:	409a      	lsls	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d012      	beq.n	8002096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002082:	2201      	movs	r2, #1
 8002084:	409a      	lsls	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208e:	f043 0202 	orr.w	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209a:	2204      	movs	r2, #4
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d012      	beq.n	80020cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b8:	2204      	movs	r2, #4
 80020ba:	409a      	lsls	r2, r3
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c4:	f043 0204 	orr.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	2210      	movs	r2, #16
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d043      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03c      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ee:	2210      	movs	r2, #16
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d018      	beq.n	8002136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d108      	bne.n	8002124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d024      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	4798      	blx	r3
 8002122:	e01f      	b.n	8002164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01b      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
 8002134:	e016      	b.n	8002164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0208 	bic.w	r2, r2, #8
 8002152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002168:	2220      	movs	r2, #32
 800216a:	409a      	lsls	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 808f 	beq.w	8002294 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8087 	beq.w	8002294 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218a:	2220      	movs	r2, #32
 800218c:	409a      	lsls	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b05      	cmp	r3, #5
 800219c:	d136      	bne.n	800220c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0216 	bic.w	r2, r2, #22
 80021ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <HAL_DMA_IRQHandler+0x1da>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0208 	bic.w	r2, r2, #8
 80021dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e2:	223f      	movs	r2, #63	@ 0x3f
 80021e4:	409a      	lsls	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d07e      	beq.n	8002300 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
        }
        return;
 800220a:	e079      	b.n	8002300 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01d      	beq.n	8002256 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10d      	bne.n	8002244 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222c:	2b00      	cmp	r3, #0
 800222e:	d031      	beq.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
 8002238:	e02c      	b.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
 800223a:	bf00      	nop
 800223c:	20000008 	.word	0x20000008
 8002240:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d023      	beq.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
 8002254:	e01e      	b.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10f      	bne.n	8002284 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0210 	bic.w	r2, r2, #16
 8002272:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002298:	2b00      	cmp	r3, #0
 800229a:	d032      	beq.n	8002302 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d022      	beq.n	80022ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2205      	movs	r2, #5
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	3301      	adds	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d307      	bcc.n	80022dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f2      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x2cc>
 80022da:	e000      	b.n	80022de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
 80022fe:	e000      	b.n	8002302 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002300:	bf00      	nop
    }
  }
}
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002316:	b2db      	uxtb	r3, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002358:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b40      	cmp	r3, #64	@ 0x40
 8002368:	d108      	bne.n	800237c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800237a:	e007      	b.n	800238c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	60da      	str	r2, [r3, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	3b10      	subs	r3, #16
 80023a8:	4a14      	ldr	r2, [pc, #80]	@ (80023fc <DMA_CalcBaseAndBitshift+0x64>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023b2:	4a13      	ldr	r2, [pc, #76]	@ (8002400 <DMA_CalcBaseAndBitshift+0x68>)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d909      	bls.n	80023da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	1d1a      	adds	r2, r3, #4
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80023d8:	e007      	b.n	80023ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	aaaaaaab 	.word	0xaaaaaaab
 8002400:	080085f8 	.word	0x080085f8

08002404 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002414:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d11f      	bne.n	800245e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d856      	bhi.n	80024d2 <DMA_CheckFifoParam+0xce>
 8002424:	a201      	add	r2, pc, #4	@ (adr r2, 800242c <DMA_CheckFifoParam+0x28>)
 8002426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242a:	bf00      	nop
 800242c:	0800243d 	.word	0x0800243d
 8002430:	0800244f 	.word	0x0800244f
 8002434:	0800243d 	.word	0x0800243d
 8002438:	080024d3 	.word	0x080024d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d046      	beq.n	80024d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244c:	e043      	b.n	80024d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002452:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002456:	d140      	bne.n	80024da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800245c:	e03d      	b.n	80024da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002466:	d121      	bne.n	80024ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d837      	bhi.n	80024de <DMA_CheckFifoParam+0xda>
 800246e:	a201      	add	r2, pc, #4	@ (adr r2, 8002474 <DMA_CheckFifoParam+0x70>)
 8002470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002474:	08002485 	.word	0x08002485
 8002478:	0800248b 	.word	0x0800248b
 800247c:	08002485 	.word	0x08002485
 8002480:	0800249d 	.word	0x0800249d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      break;
 8002488:	e030      	b.n	80024ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d025      	beq.n	80024e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249a:	e022      	b.n	80024e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024a4:	d11f      	bne.n	80024e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024aa:	e01c      	b.n	80024e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d903      	bls.n	80024ba <DMA_CheckFifoParam+0xb6>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d003      	beq.n	80024c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024b8:	e018      	b.n	80024ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
      break;
 80024be:	e015      	b.n	80024ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00e      	beq.n	80024ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e00b      	b.n	80024ea <DMA_CheckFifoParam+0xe6>
      break;
 80024d2:	bf00      	nop
 80024d4:	e00a      	b.n	80024ec <DMA_CheckFifoParam+0xe8>
      break;
 80024d6:	bf00      	nop
 80024d8:	e008      	b.n	80024ec <DMA_CheckFifoParam+0xe8>
      break;
 80024da:	bf00      	nop
 80024dc:	e006      	b.n	80024ec <DMA_CheckFifoParam+0xe8>
      break;
 80024de:	bf00      	nop
 80024e0:	e004      	b.n	80024ec <DMA_CheckFifoParam+0xe8>
      break;
 80024e2:	bf00      	nop
 80024e4:	e002      	b.n	80024ec <DMA_CheckFifoParam+0xe8>
      break;   
 80024e6:	bf00      	nop
 80024e8:	e000      	b.n	80024ec <DMA_CheckFifoParam+0xe8>
      break;
 80024ea:	bf00      	nop
    }
  } 
  
  return status; 
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop

080024fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	@ 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	e165      	b.n	80027e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	f040 8154 	bne.w	80027de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d005      	beq.n	800254e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	2b02      	cmp	r3, #2
 800254c:	d130      	bne.n	80025b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002584:	2201      	movs	r2, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 0201 	and.w	r2, r3, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d017      	beq.n	80025ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d123      	bne.n	8002640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	220f      	movs	r2, #15
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	08da      	lsrs	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0203 	and.w	r2, r3, #3
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80ae 	beq.w	80027de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b5d      	ldr	r3, [pc, #372]	@ (80027fc <HAL_GPIO_Init+0x300>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	4a5c      	ldr	r2, [pc, #368]	@ (80027fc <HAL_GPIO_Init+0x300>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002690:	6453      	str	r3, [r2, #68]	@ 0x44
 8002692:	4b5a      	ldr	r3, [pc, #360]	@ (80027fc <HAL_GPIO_Init+0x300>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269e:	4a58      	ldr	r2, [pc, #352]	@ (8002800 <HAL_GPIO_Init+0x304>)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	220f      	movs	r2, #15
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002804 <HAL_GPIO_Init+0x308>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d025      	beq.n	8002716 <HAL_GPIO_Init+0x21a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002808 <HAL_GPIO_Init+0x30c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01f      	beq.n	8002712 <HAL_GPIO_Init+0x216>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4d      	ldr	r2, [pc, #308]	@ (800280c <HAL_GPIO_Init+0x310>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d019      	beq.n	800270e <HAL_GPIO_Init+0x212>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002810 <HAL_GPIO_Init+0x314>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_GPIO_Init+0x20e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002814 <HAL_GPIO_Init+0x318>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00d      	beq.n	8002706 <HAL_GPIO_Init+0x20a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002818 <HAL_GPIO_Init+0x31c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <HAL_GPIO_Init+0x206>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a49      	ldr	r2, [pc, #292]	@ (800281c <HAL_GPIO_Init+0x320>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d101      	bne.n	80026fe <HAL_GPIO_Init+0x202>
 80026fa:	2306      	movs	r3, #6
 80026fc:	e00c      	b.n	8002718 <HAL_GPIO_Init+0x21c>
 80026fe:	2307      	movs	r3, #7
 8002700:	e00a      	b.n	8002718 <HAL_GPIO_Init+0x21c>
 8002702:	2305      	movs	r3, #5
 8002704:	e008      	b.n	8002718 <HAL_GPIO_Init+0x21c>
 8002706:	2304      	movs	r3, #4
 8002708:	e006      	b.n	8002718 <HAL_GPIO_Init+0x21c>
 800270a:	2303      	movs	r3, #3
 800270c:	e004      	b.n	8002718 <HAL_GPIO_Init+0x21c>
 800270e:	2302      	movs	r3, #2
 8002710:	e002      	b.n	8002718 <HAL_GPIO_Init+0x21c>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_GPIO_Init+0x21c>
 8002716:	2300      	movs	r3, #0
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	f002 0203 	and.w	r2, r2, #3
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	4093      	lsls	r3, r2
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002728:	4935      	ldr	r1, [pc, #212]	@ (8002800 <HAL_GPIO_Init+0x304>)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	3302      	adds	r3, #2
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002736:	4b3a      	ldr	r3, [pc, #232]	@ (8002820 <HAL_GPIO_Init+0x324>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800275a:	4a31      	ldr	r2, [pc, #196]	@ (8002820 <HAL_GPIO_Init+0x324>)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002760:	4b2f      	ldr	r3, [pc, #188]	@ (8002820 <HAL_GPIO_Init+0x324>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002784:	4a26      	ldr	r2, [pc, #152]	@ (8002820 <HAL_GPIO_Init+0x324>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800278a:	4b25      	ldr	r3, [pc, #148]	@ (8002820 <HAL_GPIO_Init+0x324>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <HAL_GPIO_Init+0x324>)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002820 <HAL_GPIO_Init+0x324>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d8:	4a11      	ldr	r2, [pc, #68]	@ (8002820 <HAL_GPIO_Init+0x324>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3301      	adds	r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	2b0f      	cmp	r3, #15
 80027e8:	f67f ae96 	bls.w	8002518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3724      	adds	r7, #36	@ 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800
 8002800:	40013800 	.word	0x40013800
 8002804:	40020000 	.word	0x40020000
 8002808:	40020400 	.word	0x40020400
 800280c:	40020800 	.word	0x40020800
 8002810:	40020c00 	.word	0x40020c00
 8002814:	40021000 	.word	0x40021000
 8002818:	40021400 	.word	0x40021400
 800281c:	40021800 	.word	0x40021800
 8002820:	40013c00 	.word	0x40013c00

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
 8002830:	4613      	mov	r3, r2
 8002832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002834:	787b      	ldrb	r3, [r7, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002840:	e003      	b.n	800284a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	041a      	lsls	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	619a      	str	r2, [r3, #24]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e12b      	b.n	8002ac2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe fe4c 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	@ 0x24
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028bc:	f002 ff46 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 80028c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4a81      	ldr	r2, [pc, #516]	@ (8002acc <HAL_I2C_Init+0x274>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d807      	bhi.n	80028dc <HAL_I2C_Init+0x84>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a80      	ldr	r2, [pc, #512]	@ (8002ad0 <HAL_I2C_Init+0x278>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	bf94      	ite	ls
 80028d4:	2301      	movls	r3, #1
 80028d6:	2300      	movhi	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e006      	b.n	80028ea <HAL_I2C_Init+0x92>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a7d      	ldr	r2, [pc, #500]	@ (8002ad4 <HAL_I2C_Init+0x27c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	bf94      	ite	ls
 80028e4:	2301      	movls	r3, #1
 80028e6:	2300      	movhi	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e0e7      	b.n	8002ac2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4a78      	ldr	r2, [pc, #480]	@ (8002ad8 <HAL_I2C_Init+0x280>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	0c9b      	lsrs	r3, r3, #18
 80028fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a6a      	ldr	r2, [pc, #424]	@ (8002acc <HAL_I2C_Init+0x274>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d802      	bhi.n	800292c <HAL_I2C_Init+0xd4>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	3301      	adds	r3, #1
 800292a:	e009      	b.n	8002940 <HAL_I2C_Init+0xe8>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	4a69      	ldr	r2, [pc, #420]	@ (8002adc <HAL_I2C_Init+0x284>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	3301      	adds	r3, #1
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	430b      	orrs	r3, r1
 8002946:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002952:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	495c      	ldr	r1, [pc, #368]	@ (8002acc <HAL_I2C_Init+0x274>)
 800295c:	428b      	cmp	r3, r1
 800295e:	d819      	bhi.n	8002994 <HAL_I2C_Init+0x13c>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1e59      	subs	r1, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fbb1 f3f3 	udiv	r3, r1, r3
 800296e:	1c59      	adds	r1, r3, #1
 8002970:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002974:	400b      	ands	r3, r1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_I2C_Init+0x138>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1e59      	subs	r1, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fbb1 f3f3 	udiv	r3, r1, r3
 8002988:	3301      	adds	r3, #1
 800298a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298e:	e051      	b.n	8002a34 <HAL_I2C_Init+0x1dc>
 8002990:	2304      	movs	r3, #4
 8002992:	e04f      	b.n	8002a34 <HAL_I2C_Init+0x1dc>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d111      	bne.n	80029c0 <HAL_I2C_Init+0x168>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e58      	subs	r0, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	440b      	add	r3, r1
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e012      	b.n	80029e6 <HAL_I2C_Init+0x18e>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1e58      	subs	r0, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	0099      	lsls	r1, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d6:	3301      	adds	r3, #1
 80029d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Init+0x196>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e022      	b.n	8002a34 <HAL_I2C_Init+0x1dc>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10e      	bne.n	8002a14 <HAL_I2C_Init+0x1bc>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1e58      	subs	r0, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	440b      	add	r3, r1
 8002a04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a12:	e00f      	b.n	8002a34 <HAL_I2C_Init+0x1dc>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1e58      	subs	r0, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	0099      	lsls	r1, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	6809      	ldr	r1, [r1, #0]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6911      	ldr	r1, [r2, #16]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68d2      	ldr	r2, [r2, #12]
 8002a6e:	4311      	orrs	r1, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	000186a0 	.word	0x000186a0
 8002ad0:	001e847f 	.word	0x001e847f
 8002ad4:	003d08ff 	.word	0x003d08ff
 8002ad8:	431bde83 	.word	0x431bde83
 8002adc:	10624dd3 	.word	0x10624dd3

08002ae0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af2:	2b80      	cmp	r3, #128	@ 0x80
 8002af4:	d103      	bne.n	8002afe <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	4608      	mov	r0, r1
 8002b16:	4611      	mov	r1, r2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	817b      	strh	r3, [r7, #10]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	813b      	strh	r3, [r7, #8]
 8002b22:	4613      	mov	r3, r2
 8002b24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b26:	f7fe ffaf 	bl	8001a88 <HAL_GetTick>
 8002b2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	f040 80d9 	bne.w	8002cec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	2319      	movs	r3, #25
 8002b40:	2201      	movs	r2, #1
 8002b42:	496d      	ldr	r1, [pc, #436]	@ (8002cf8 <HAL_I2C_Mem_Write+0x1ec>)
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f002 fae9 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b50:	2302      	movs	r3, #2
 8002b52:	e0cc      	b.n	8002cee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_I2C_Mem_Write+0x56>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e0c5      	b.n	8002cee <HAL_I2C_Mem_Write+0x1e2>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d007      	beq.n	8002b88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2221      	movs	r2, #33	@ 0x21
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2240      	movs	r2, #64	@ 0x40
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a3a      	ldr	r2, [r7, #32]
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a4d      	ldr	r2, [pc, #308]	@ (8002cfc <HAL_I2C_Mem_Write+0x1f0>)
 8002bc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bca:	88f8      	ldrh	r0, [r7, #6]
 8002bcc:	893a      	ldrh	r2, [r7, #8]
 8002bce:	8979      	ldrh	r1, [r7, #10]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	4603      	mov	r3, r0
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f001 ff5c 	bl	8004a98 <I2C_RequestMemoryWrite>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d052      	beq.n	8002c8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e081      	b.n	8002cee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f002 fbae 	bl	8005350 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d107      	bne.n	8002c12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e06b      	b.n	8002cee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d11b      	bne.n	8002c8c <HAL_I2C_Mem_Write+0x180>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d017      	beq.n	8002c8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1aa      	bne.n	8002bea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f002 fba1 	bl	80053e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d107      	bne.n	8002cbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e016      	b.n	8002cee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	00100002 	.word	0x00100002
 8002cfc:	ffff0000 	.word	0xffff0000

08002d00 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	@ 0x28
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	4608      	mov	r0, r1
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	817b      	strh	r3, [r7, #10]
 8002d12:	460b      	mov	r3, r1
 8002d14:	813b      	strh	r3, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d1e:	f7fe feb3 	bl	8001a88 <HAL_GetTick>
 8002d22:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	f040 8136 	bne.w	8002f9e <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d32:	4b9d      	ldr	r3, [pc, #628]	@ (8002fa8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	08db      	lsrs	r3, r3, #3
 8002d38:	4a9c      	ldr	r2, [pc, #624]	@ (8002fac <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	0a1a      	lsrs	r2, r3, #8
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	009a      	lsls	r2, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d112      	bne.n	8002d7e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f043 0220 	orr.w	r2, r3, #32
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e110      	b.n	8002fa0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d0df      	beq.n	8002d4c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_I2C_Mem_Write_DMA+0x9a>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e102      	b.n	8002fa0 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d007      	beq.n	8002dc0 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2221      	movs	r2, #33	@ 0x21
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2240      	movs	r2, #64	@ 0x40
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a6c      	ldr	r2, [pc, #432]	@ (8002fb0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8002e00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e02:	897a      	ldrh	r2, [r7, #10]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002e08:	893a      	ldrh	r2, [r7, #8]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80a9 	beq.w	8002f76 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d02a      	beq.n	8002e82 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e30:	4a60      	ldr	r2, [pc, #384]	@ (8002fb4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8002e32:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e38:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8002e3a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e40:	2200      	movs	r2, #0
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e48:	2200      	movs	r2, #0
 8002e4a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e50:	2200      	movs	r2, #0
 8002e52:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e58:	2200      	movs	r2, #0
 8002e5a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	4619      	mov	r1, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3310      	adds	r3, #16
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e72:	f7fe ffd5 	bl	8001e20 <HAL_DMA_Start_IT>
 8002e76:	4603      	mov	r3, r0
 8002e78:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002e7a:	7efb      	ldrb	r3, [r7, #27]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d166      	bne.n	8002f4e <HAL_I2C_Mem_Write_DMA+0x24e>
 8002e80:	e013      	b.n	8002eaa <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e07a      	b.n	8002fa0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002eaa:	88f8      	ldrh	r0, [r7, #6]
 8002eac:	893a      	ldrh	r2, [r7, #8]
 8002eae:	8979      	ldrh	r1, [r7, #10]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	2323      	movs	r3, #35	@ 0x23
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4603      	mov	r3, r0
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f001 fdec 	bl	8004a98 <I2C_RequestMemoryWrite>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d022      	beq.n	8002f0c <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff f870 	bl	8001fb0 <HAL_DMA_Abort_IT>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed8:	2200      	movs	r2, #0
 8002eda:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eea:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e049      	b.n	8002fa0 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f38:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f48:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e028      	b.n	8002fa0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	f043 0210 	orr.w	r2, r3, #16
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e014      	b.n	8002fa0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
  }
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000008 	.word	0x20000008
 8002fac:	14f8b589 	.word	0x14f8b589
 8002fb0:	ffff0000 	.word	0xffff0000
 8002fb4:	08004d95 	.word	0x08004d95
 8002fb8:	08004f53 	.word	0x08004f53

08002fbc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08c      	sub	sp, #48	@ 0x30
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	817b      	strh	r3, [r7, #10]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	813b      	strh	r3, [r7, #8]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd6:	f7fe fd57 	bl	8001a88 <HAL_GetTick>
 8002fda:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	f040 8172 	bne.w	80032d2 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fee:	4b93      	ldr	r3, [pc, #588]	@ (800323c <HAL_I2C_Mem_Read_DMA+0x280>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	08db      	lsrs	r3, r3, #3
 8002ff4:	4a92      	ldr	r2, [pc, #584]	@ (8003240 <HAL_I2C_Mem_Read_DMA+0x284>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0a1a      	lsrs	r2, r3, #8
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009a      	lsls	r2, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3b01      	subs	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d112      	bne.n	800303a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f043 0220 	orr.w	r2, r3, #32
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
 8003038:	e14c      	b.n	80032d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b02      	cmp	r3, #2
 8003046:	d0df      	beq.n	8003008 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_I2C_Mem_Read_DMA+0x9a>
 8003052:	2302      	movs	r3, #2
 8003054:	e13e      	b.n	80032d4 <HAL_I2C_Mem_Read_DMA+0x318>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d007      	beq.n	800307c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800308a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2222      	movs	r2, #34	@ 0x22
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2240      	movs	r2, #64	@ 0x40
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80030ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a62      	ldr	r2, [pc, #392]	@ (8003244 <HAL_I2C_Mem_Read_DMA+0x288>)
 80030bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80030be:	897a      	ldrh	r2, [r7, #10]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80030c4:	893a      	ldrh	r2, [r7, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80cc 	beq.w	8003278 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d02d      	beq.n	8003144 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ec:	4a56      	ldr	r2, [pc, #344]	@ (8003248 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80030ee:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f4:	4a55      	ldr	r2, [pc, #340]	@ (800324c <HAL_I2C_Mem_Read_DMA+0x290>)
 80030f6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fc:	2200      	movs	r2, #0
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	2200      	movs	r2, #0
 8003106:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	2200      	movs	r2, #0
 800310e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003114:	2200      	movs	r2, #0
 8003116:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3310      	adds	r3, #16
 8003122:	4619      	mov	r1, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	461a      	mov	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312e:	f7fe fe77 	bl	8001e20 <HAL_DMA_Start_IT>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003138:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 8087 	bne.w	8003250 <HAL_I2C_Mem_Read_DMA+0x294>
 8003142:	e013      	b.n	800316c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0b3      	b.n	80032d4 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800316c:	88f8      	ldrh	r0, [r7, #6]
 800316e:	893a      	ldrh	r2, [r7, #8]
 8003170:	8979      	ldrh	r1, [r7, #10]
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2323      	movs	r3, #35	@ 0x23
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	4603      	mov	r3, r0
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f001 fd21 	bl	8004bc4 <I2C_RequestMemoryRead>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d023      	beq.n	80031d0 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe ff0f 	bl	8001fb0 <HAL_DMA_Abort_IT>
 8003192:	4603      	mov	r3, r0
 8003194:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	2200      	movs	r2, #0
 800319e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ae:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e081      	b.n	80032d4 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d108      	bne.n	80031ea <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e007      	b.n	80031fa <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003226:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	e049      	b.n	80032ce <HAL_I2C_Mem_Read_DMA+0x312>
 800323a:	bf00      	nop
 800323c:	20000008 	.word	0x20000008
 8003240:	14f8b589 	.word	0x14f8b589
 8003244:	ffff0000 	.word	0xffff0000
 8003248:	08004d95 	.word	0x08004d95
 800324c:	08004f53 	.word	0x08004f53
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	f043 0210 	orr.w	r2, r3, #16
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e02d      	b.n	80032d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003278:	88f8      	ldrh	r0, [r7, #6]
 800327a:	893a      	ldrh	r2, [r7, #8]
 800327c:	8979      	ldrh	r1, [r7, #10]
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	2323      	movs	r3, #35	@ 0x23
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	4603      	mov	r3, r0
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f001 fc9b 	bl	8004bc4 <I2C_RequestMemoryRead>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e01d      	b.n	80032d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032bc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3728      	adds	r7, #40	@ 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003304:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b10      	cmp	r3, #16
 800330a:	d003      	beq.n	8003314 <HAL_I2C_EV_IRQHandler+0x38>
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b40      	cmp	r3, #64	@ 0x40
 8003310:	f040 80b1 	bne.w	8003476 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <HAL_I2C_EV_IRQHandler+0x6e>
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003334:	d003      	beq.n	800333e <HAL_I2C_EV_IRQHandler+0x62>
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800333c:	d101      	bne.n	8003342 <HAL_I2C_EV_IRQHandler+0x66>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_I2C_EV_IRQHandler+0x68>
 8003342:	2300      	movs	r3, #0
 8003344:	2b01      	cmp	r3, #1
 8003346:	f000 8114 	beq.w	8003572 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00b      	beq.n	800336c <HAL_I2C_EV_IRQHandler+0x90>
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f002 f8e7 	bl	8005532 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fd7a 	bl	8003e5e <I2C_Master_SB>
 800336a:	e083      	b.n	8003474 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_I2C_EV_IRQHandler+0xac>
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fdf2 	bl	8003f6a <I2C_Master_ADD10>
 8003386:	e075      	b.n	8003474 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0xc8>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fe0e 	bl	8003fbe <I2C_Master_ADDR>
 80033a2:	e067      	b.n	8003474 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d036      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033bc:	f000 80db 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00d      	beq.n	80033e6 <HAL_I2C_EV_IRQHandler+0x10a>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_I2C_EV_IRQHandler+0x10a>
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f9d6 	bl	8003790 <I2C_MasterTransmit_TXE>
 80033e4:	e046      	b.n	8003474 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80c2 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80bc 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033fe:	7bbb      	ldrb	r3, [r7, #14]
 8003400:	2b21      	cmp	r3, #33	@ 0x21
 8003402:	d103      	bne.n	800340c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fa5f 	bl	80038c8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800340a:	e0b4      	b.n	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b40      	cmp	r3, #64	@ 0x40
 8003410:	f040 80b1 	bne.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 facd 	bl	80039b4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341a:	e0ac      	b.n	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800342a:	f000 80a4 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <HAL_I2C_EV_IRQHandler+0x178>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_I2C_EV_IRQHandler+0x178>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d103      	bne.n	8003454 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb49 	bl	8003ae4 <I2C_MasterReceive_RXNE>
 8003452:	e00f      	b.n	8003474 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 808b 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8085 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fc01 	bl	8003c74 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003472:	e080      	b.n	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 8003474:	e07f      	b.n	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d004      	beq.n	8003488 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e007      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d011      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80034bc:	69b9      	ldr	r1, [r7, #24]
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 ffcc 	bl	800445c <I2C_Slave_ADDR>
 80034c4:	e05a      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_I2C_EV_IRQHandler+0x206>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f001 f806 	bl	80044ec <I2C_Slave_STOPF>
 80034e0:	e04c      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034e2:	7bbb      	ldrb	r3, [r7, #14]
 80034e4:	2b21      	cmp	r3, #33	@ 0x21
 80034e6:	d002      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0x212>
 80034e8:	7bbb      	ldrb	r3, [r7, #14]
 80034ea:	2b29      	cmp	r3, #41	@ 0x29
 80034ec:	d120      	bne.n	8003530 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00d      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x238>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x238>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fee7 	bl	80042e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003512:	e032      	b.n	800357a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d02d      	beq.n	800357a <HAL_I2C_EV_IRQHandler+0x29e>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003524:	2b00      	cmp	r3, #0
 8003526:	d028      	beq.n	800357a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 ff16 	bl	800435a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800352e:	e024      	b.n	800357a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <HAL_I2C_EV_IRQHandler+0x27a>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_I2C_EV_IRQHandler+0x27a>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 ff24 	bl	800439c <I2C_SlaveReceive_RXNE>
 8003554:	e012      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 ff54 	bl	8004418 <I2C_SlaveReceive_BTF>
 8003570:	e004      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003572:	bf00      	nop
 8003574:	e002      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800357a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b08a      	sub	sp, #40	@ 0x28
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035a4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_I2C_ER_IRQHandler+0x4a>
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035ca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <HAL_I2C_ER_IRQHandler+0x70>
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	f043 0302 	orr.w	r3, r3, #2
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80035f0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d03e      	beq.n	800367a <HAL_I2C_ER_IRQHandler+0xf8>
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d039      	beq.n	800367a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003606:	7efb      	ldrb	r3, [r7, #27]
 8003608:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003618:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003620:	7ebb      	ldrb	r3, [r7, #26]
 8003622:	2b20      	cmp	r3, #32
 8003624:	d112      	bne.n	800364c <HAL_I2C_ER_IRQHandler+0xca>
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10f      	bne.n	800364c <HAL_I2C_ER_IRQHandler+0xca>
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	2b21      	cmp	r3, #33	@ 0x21
 8003630:	d008      	beq.n	8003644 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	2b29      	cmp	r3, #41	@ 0x29
 8003636:	d005      	beq.n	8003644 <HAL_I2C_ER_IRQHandler+0xc2>
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	2b28      	cmp	r3, #40	@ 0x28
 800363c:	d106      	bne.n	800364c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b21      	cmp	r3, #33	@ 0x21
 8003642:	d103      	bne.n	800364c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f001 f881 	bl	800474c <I2C_Slave_AF>
 800364a:	e016      	b.n	800367a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003654:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800365e:	7efb      	ldrb	r3, [r7, #27]
 8003660:	2b10      	cmp	r3, #16
 8003662:	d002      	beq.n	800366a <HAL_I2C_ER_IRQHandler+0xe8>
 8003664:	7efb      	ldrb	r3, [r7, #27]
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	d107      	bne.n	800367a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003678:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00d      	beq.n	80036a0 <HAL_I2C_ER_IRQHandler+0x11e>
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	f043 0308 	orr.w	r3, r3, #8
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800369e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f001 f8be 	bl	8004834 <I2C_ITError>
  }
}
 80036b8:	bf00      	nop
 80036ba:	3728      	adds	r7, #40	@ 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
 800371c:	4613      	mov	r3, r2
 800371e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d150      	bne.n	8003858 <I2C_MasterTransmit_TXE+0xc8>
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b21      	cmp	r3, #33	@ 0x21
 80037ba:	d14d      	bne.n	8003858 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d01d      	beq.n	80037fe <I2C_MasterTransmit_TXE+0x6e>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d01a      	beq.n	80037fe <I2C_MasterTransmit_TXE+0x6e>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037ce:	d016      	beq.n	80037fe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037de:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2211      	movs	r2, #17
 80037e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ff62 	bl	80036c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037fc:	e060      	b.n	80038c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800380c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b40      	cmp	r3, #64	@ 0x40
 8003836:	d107      	bne.n	8003848 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff7d 	bl	8003740 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003846:	e03b      	b.n	80038c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff35 	bl	80036c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003856:	e033      	b.n	80038c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b21      	cmp	r3, #33	@ 0x21
 800385c:	d005      	beq.n	800386a <I2C_MasterTransmit_TXE+0xda>
 800385e:	7bbb      	ldrb	r3, [r7, #14]
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d12d      	bne.n	80038c0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b22      	cmp	r3, #34	@ 0x22
 8003868:	d12a      	bne.n	80038c0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d108      	bne.n	8003886 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003882:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003884:	e01c      	b.n	80038c0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b40      	cmp	r3, #64	@ 0x40
 8003890:	d103      	bne.n	800389a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f88e 	bl	80039b4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003898:	e012      	b.n	80038c0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389e:	781a      	ldrb	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038be:	e7ff      	b.n	80038c0 <I2C_MasterTransmit_TXE+0x130>
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b21      	cmp	r3, #33	@ 0x21
 80038e0:	d164      	bne.n	80039ac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d012      	beq.n	8003912 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003910:	e04c      	b.n	80039ac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d01d      	beq.n	8003954 <I2C_MasterTransmit_BTF+0x8c>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b20      	cmp	r3, #32
 800391c:	d01a      	beq.n	8003954 <I2C_MasterTransmit_BTF+0x8c>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003924:	d016      	beq.n	8003954 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003934:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2211      	movs	r2, #17
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff feb7 	bl	80036c0 <HAL_I2C_MasterTxCpltCallback>
}
 8003952:	e02b      	b.n	80039ac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003962:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003972:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b40      	cmp	r3, #64	@ 0x40
 800398c:	d107      	bne.n	800399e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fed2 	bl	8003740 <HAL_I2C_MemTxCpltCallback>
}
 800399c:	e006      	b.n	80039ac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fe8a 	bl	80036c0 <HAL_I2C_MasterTxCpltCallback>
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11d      	bne.n	8003a08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d10b      	bne.n	80039ec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e4:	1c9a      	adds	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80039ea:	e077      	b.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	121b      	asrs	r3, r3, #8
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a06:	e069      	b.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d10b      	bne.n	8003a28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a26:	e059      	b.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d152      	bne.n	8003ad6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b22      	cmp	r3, #34	@ 0x22
 8003a34:	d10d      	bne.n	8003a52 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a44:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a50:	e044      	b.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d015      	beq.n	8003a88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b21      	cmp	r3, #33	@ 0x21
 8003a60:	d112      	bne.n	8003a88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a86:	e029      	b.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d124      	bne.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b21      	cmp	r3, #33	@ 0x21
 8003a96:	d121      	bne.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003aa6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fe36 	bl	8003740 <HAL_I2C_MemTxCpltCallback>
}
 8003ad4:	e002      	b.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff f802 	bl	8002ae0 <I2C_Flush_DR>
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b22      	cmp	r3, #34	@ 0x22
 8003af6:	f040 80b9 	bne.w	8003c6c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afe:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d921      	bls.n	8003b52 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	f040 8096 	bne.w	8003c6c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b4e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003b50:	e08c      	b.n	8003c6c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d07f      	beq.n	8003c5a <I2C_MasterReceive_RXNE+0x176>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d002      	beq.n	8003b66 <I2C_MasterReceive_RXNE+0x82>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d179      	bne.n	8003c5a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f001 fc82 	bl	8005470 <I2C_WaitOnSTOPRequestThroughIT>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d14c      	bne.n	8003c0c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b80:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b90:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b40      	cmp	r3, #64	@ 0x40
 8003bca:	d10a      	bne.n	8003be2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff fdba 	bl	8003754 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003be0:	e044      	b.n	8003c6c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d002      	beq.n	8003bf6 <I2C_MasterReceive_RXNE+0x112>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d103      	bne.n	8003bfe <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bfc:	e002      	b.n	8003c04 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2212      	movs	r2, #18
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fd65 	bl	80036d4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c0a:	e02f      	b.n	8003c6c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c1a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff fd88 	bl	8003768 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c58:	e008      	b.n	8003c6c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c68:	605a      	str	r2, [r3, #4]
}
 8003c6a:	e7ff      	b.n	8003c6c <I2C_MasterReceive_RXNE+0x188>
 8003c6c:	bf00      	nop
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c80:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d11b      	bne.n	8003cc4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003cc2:	e0c8      	b.n	8003e56 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d129      	bne.n	8003d22 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cdc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d00a      	beq.n	8003cfa <I2C_MasterReceive_BTF+0x86>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d007      	beq.n	8003cfa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d20:	e099      	b.n	8003e56 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	f040 8081 	bne.w	8003e30 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d002      	beq.n	8003d3a <I2C_MasterReceive_BTF+0xc6>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b10      	cmp	r3, #16
 8003d38:	d108      	bne.n	8003d4c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e019      	b.n	8003d80 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d002      	beq.n	8003d58 <I2C_MasterReceive_BTF+0xe4>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d108      	bne.n	8003d6a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e00a      	b.n	8003d80 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d007      	beq.n	8003d80 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003dda:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b40      	cmp	r3, #64	@ 0x40
 8003dee:	d10a      	bne.n	8003e06 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fca8 	bl	8003754 <HAL_I2C_MemRxCpltCallback>
}
 8003e04:	e027      	b.n	8003e56 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d002      	beq.n	8003e1a <I2C_MasterReceive_BTF+0x1a6>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d103      	bne.n	8003e22 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e20:	e002      	b.n	8003e28 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2212      	movs	r2, #18
 8003e26:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff fc53 	bl	80036d4 <HAL_I2C_MasterRxCpltCallback>
}
 8003e2e:	e012      	b.n	8003e56 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b40      	cmp	r3, #64	@ 0x40
 8003e70:	d117      	bne.n	8003ea2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e8a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e8c:	e067      	b.n	8003f5e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	611a      	str	r2, [r3, #16]
}
 8003ea0:	e05d      	b.n	8003f5e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eaa:	d133      	bne.n	8003f14 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b21      	cmp	r3, #33	@ 0x21
 8003eb6:	d109      	bne.n	8003ecc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ec8:	611a      	str	r2, [r3, #16]
 8003eca:	e008      	b.n	8003ede <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <I2C_Master_SB+0x92>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d108      	bne.n	8003f02 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d032      	beq.n	8003f5e <I2C_Master_SB+0x100>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02d      	beq.n	8003f5e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f10:	605a      	str	r2, [r3, #4]
}
 8003f12:	e024      	b.n	8003f5e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10e      	bne.n	8003f3a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	11db      	asrs	r3, r3, #7
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 0306 	and.w	r3, r3, #6
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f063 030f 	orn	r3, r3, #15
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	611a      	str	r2, [r3, #16]
}
 8003f38:	e011      	b.n	8003f5e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d10d      	bne.n	8003f5e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	11db      	asrs	r3, r3, #7
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f003 0306 	and.w	r3, r3, #6
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f063 030e 	orn	r3, r3, #14
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	611a      	str	r2, [r3, #16]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <I2C_Master_ADD10+0x26>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d108      	bne.n	8003fa2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00c      	beq.n	8003fb2 <I2C_Master_ADD10+0x48>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb0:	605a      	str	r2, [r3, #4]
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b091      	sub	sp, #68	@ 0x44
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fcc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b22      	cmp	r3, #34	@ 0x22
 8003fe6:	f040 8169 	bne.w	80042bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <I2C_Master_ADDR+0x54>
 8003ff2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ff6:	2b40      	cmp	r3, #64	@ 0x40
 8003ff8:	d10b      	bne.n	8004012 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	633b      	str	r3, [r7, #48]	@ 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	633b      	str	r3, [r7, #48]	@ 0x30
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	e160      	b.n	80042d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004016:	2b00      	cmp	r3, #0
 8004018:	d11d      	bne.n	8004056 <I2C_Master_ADDR+0x98>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004022:	d118      	bne.n	8004056 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004024:	2300      	movs	r3, #0
 8004026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004048:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	651a      	str	r2, [r3, #80]	@ 0x50
 8004054:	e13e      	b.n	80042d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d113      	bne.n	8004088 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004060:	2300      	movs	r3, #0
 8004062:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e115      	b.n	80042b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	f040 808a 	bne.w	80041a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004096:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800409a:	d137      	bne.n	800410c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040ba:	d113      	bne.n	80040e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	e0e7      	b.n	80042b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e4:	2300      	movs	r3, #0
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	623b      	str	r3, [r7, #32]
 80040f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e0d3      	b.n	80042b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410e:	2b08      	cmp	r3, #8
 8004110:	d02e      	beq.n	8004170 <I2C_Master_ADDR+0x1b2>
 8004112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004114:	2b20      	cmp	r3, #32
 8004116:	d02b      	beq.n	8004170 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411a:	2b12      	cmp	r3, #18
 800411c:	d102      	bne.n	8004124 <I2C_Master_ADDR+0x166>
 800411e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004120:	2b01      	cmp	r3, #1
 8004122:	d125      	bne.n	8004170 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004126:	2b04      	cmp	r3, #4
 8004128:	d00e      	beq.n	8004148 <I2C_Master_ADDR+0x18a>
 800412a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412c:	2b02      	cmp	r3, #2
 800412e:	d00b      	beq.n	8004148 <I2C_Master_ADDR+0x18a>
 8004130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004132:	2b10      	cmp	r3, #16
 8004134:	d008      	beq.n	8004148 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	e007      	b.n	8004158 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004156:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	e0a1      	b.n	80042b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800417e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004180:	2300      	movs	r3, #0
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e085      	b.n	80042b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d14d      	bne.n	800424e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d016      	beq.n	80041e6 <I2C_Master_ADDR+0x228>
 80041b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d013      	beq.n	80041e6 <I2C_Master_ADDR+0x228>
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d010      	beq.n	80041e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e007      	b.n	80041f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004204:	d117      	bne.n	8004236 <I2C_Master_ADDR+0x278>
 8004206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004208:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800420c:	d00b      	beq.n	8004226 <I2C_Master_ADDR+0x268>
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	2b01      	cmp	r3, #1
 8004212:	d008      	beq.n	8004226 <I2C_Master_ADDR+0x268>
 8004214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004216:	2b08      	cmp	r3, #8
 8004218:	d005      	beq.n	8004226 <I2C_Master_ADDR+0x268>
 800421a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421c:	2b10      	cmp	r3, #16
 800421e:	d002      	beq.n	8004226 <I2C_Master_ADDR+0x268>
 8004220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004222:	2b20      	cmp	r3, #32
 8004224:	d107      	bne.n	8004236 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004234:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	e032      	b.n	80042b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800425c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800426c:	d117      	bne.n	800429e <I2C_Master_ADDR+0x2e0>
 800426e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004270:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004274:	d00b      	beq.n	800428e <I2C_Master_ADDR+0x2d0>
 8004276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004278:	2b01      	cmp	r3, #1
 800427a:	d008      	beq.n	800428e <I2C_Master_ADDR+0x2d0>
 800427c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427e:	2b08      	cmp	r3, #8
 8004280:	d005      	beq.n	800428e <I2C_Master_ADDR+0x2d0>
 8004282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004284:	2b10      	cmp	r3, #16
 8004286:	d002      	beq.n	800428e <I2C_Master_ADDR+0x2d0>
 8004288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428a:	2b20      	cmp	r3, #32
 800428c:	d107      	bne.n	800429e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800429c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80042ba:	e00b      	b.n	80042d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
}
 80042d2:	e7ff      	b.n	80042d4 <I2C_Master_ADDR+0x316>
 80042d4:	bf00      	nop
 80042d6:	3744      	adds	r7, #68	@ 0x44
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d02b      	beq.n	8004352 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	781a      	ldrb	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d114      	bne.n	8004352 <I2C_SlaveTransmit_TXE+0x72>
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	2b29      	cmp	r3, #41	@ 0x29
 800432c:	d111      	bne.n	8004352 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2221      	movs	r2, #33	@ 0x21
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2228      	movs	r2, #40	@ 0x28
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff f9cb 	bl	80036e8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d011      	beq.n	8004390 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d02c      	beq.n	8004410 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d114      	bne.n	8004410 <I2C_SlaveReceive_RXNE+0x74>
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80043ea:	d111      	bne.n	8004410 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2222      	movs	r2, #34	@ 0x22
 8004400:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2228      	movs	r2, #40	@ 0x28
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff f976 	bl	80036fc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d012      	beq.n	8004450 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004476:	2b28      	cmp	r3, #40	@ 0x28
 8004478:	d125      	bne.n	80044c6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004488:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	81bb      	strh	r3, [r7, #12]
 80044a8:	e002      	b.n	80044b0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80044b8:	89ba      	ldrh	r2, [r7, #12]
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff f926 	bl	8003710 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044c4:	e00e      	b.n	80044e4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800450a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800450c:	2300      	movs	r3, #0
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004538:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004548:	d172      	bne.n	8004630 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	2b22      	cmp	r3, #34	@ 0x22
 800454e:	d002      	beq.n	8004556 <I2C_Slave_STOPF+0x6a>
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b2a      	cmp	r3, #42	@ 0x2a
 8004554:	d135      	bne.n	80045c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	b29a      	uxth	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	f043 0204 	orr.w	r2, r3, #4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004588:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd feba 	bl	8002308 <HAL_DMA_GetState>
 8004594:	4603      	mov	r3, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	d049      	beq.n	800462e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459e:	4a69      	ldr	r2, [pc, #420]	@ (8004744 <I2C_Slave_STOPF+0x258>)
 80045a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd fd02 	bl	8001fb0 <HAL_DMA_Abort_IT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d03d      	beq.n	800462e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045bc:	4610      	mov	r0, r2
 80045be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045c0:	e035      	b.n	800462e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f043 0204 	orr.w	r2, r3, #4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fd fe84 	bl	8002308 <HAL_DMA_GetState>
 8004600:	4603      	mov	r3, r0
 8004602:	2b01      	cmp	r3, #1
 8004604:	d014      	beq.n	8004630 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460a:	4a4e      	ldr	r2, [pc, #312]	@ (8004744 <I2C_Slave_STOPF+0x258>)
 800460c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004612:	4618      	mov	r0, r3
 8004614:	f7fd fccc 	bl	8001fb0 <HAL_DMA_Abort_IT>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004628:	4610      	mov	r0, r2
 800462a:	4798      	blx	r3
 800462c:	e000      	b.n	8004630 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800462e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d03e      	beq.n	80046b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b04      	cmp	r3, #4
 8004646:	d112      	bne.n	800466e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004678:	2b40      	cmp	r3, #64	@ 0x40
 800467a:	d112      	bne.n	80046a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	f043 0204 	orr.w	r2, r3, #4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f8b7 	bl	8004834 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80046c6:	e039      	b.n	800473c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80046cc:	d109      	bne.n	80046e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2228      	movs	r2, #40	@ 0x28
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff f80d 	bl	80036fc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b28      	cmp	r3, #40	@ 0x28
 80046ec:	d111      	bne.n	8004712 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a15      	ldr	r2, [pc, #84]	@ (8004748 <I2C_Slave_STOPF+0x25c>)
 80046f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff f80e 	bl	800372c <HAL_I2C_ListenCpltCallback>
}
 8004710:	e014      	b.n	800473c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	2b22      	cmp	r3, #34	@ 0x22
 8004718:	d002      	beq.n	8004720 <I2C_Slave_STOPF+0x234>
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b22      	cmp	r3, #34	@ 0x22
 800471e:	d10d      	bne.n	800473c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fe ffe0 	bl	80036fc <HAL_I2C_SlaveRxCpltCallback>
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	08004fcd 	.word	0x08004fcd
 8004748:	ffff0000 	.word	0xffff0000

0800474c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800475a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b08      	cmp	r3, #8
 8004766:	d002      	beq.n	800476e <I2C_Slave_AF+0x22>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b20      	cmp	r3, #32
 800476c:	d129      	bne.n	80047c2 <I2C_Slave_AF+0x76>
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2b28      	cmp	r3, #40	@ 0x28
 8004772:	d126      	bne.n	80047c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a2e      	ldr	r2, [pc, #184]	@ (8004830 <I2C_Slave_AF+0xe4>)
 8004778:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004788:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004792:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fe ffb6 	bl	800372c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80047c0:	e031      	b.n	8004826 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b21      	cmp	r3, #33	@ 0x21
 80047c6:	d129      	bne.n	800481c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a19      	ldr	r2, [pc, #100]	@ (8004830 <I2C_Slave_AF+0xe4>)
 80047cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2221      	movs	r2, #33	@ 0x21
 80047d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800480c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fe f966 	bl	8002ae0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fe ff67 	bl	80036e8 <HAL_I2C_SlaveTxCpltCallback>
}
 800481a:	e004      	b.n	8004826 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004824:	615a      	str	r2, [r3, #20]
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	ffff0000 	.word	0xffff0000

08004834 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004842:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800484a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800484c:	7bbb      	ldrb	r3, [r7, #14]
 800484e:	2b10      	cmp	r3, #16
 8004850:	d002      	beq.n	8004858 <I2C_ITError+0x24>
 8004852:	7bbb      	ldrb	r3, [r7, #14]
 8004854:	2b40      	cmp	r3, #64	@ 0x40
 8004856:	d10a      	bne.n	800486e <I2C_ITError+0x3a>
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b22      	cmp	r3, #34	@ 0x22
 800485c:	d107      	bne.n	800486e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800486c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004874:	2b28      	cmp	r3, #40	@ 0x28
 8004876:	d107      	bne.n	8004888 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2228      	movs	r2, #40	@ 0x28
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004886:	e015      	b.n	80048b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004896:	d00a      	beq.n	80048ae <I2C_ITError+0x7a>
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b60      	cmp	r3, #96	@ 0x60
 800489c:	d007      	beq.n	80048ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c2:	d162      	bne.n	800498a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d020      	beq.n	8004924 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004a90 <I2C_ITError+0x25c>)
 80048e8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd fb5e 	bl	8001fb0 <HAL_DMA_Abort_IT>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 8089 	beq.w	8004a0e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800491e:	4610      	mov	r0, r2
 8004920:	4798      	blx	r3
 8004922:	e074      	b.n	8004a0e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004928:	4a59      	ldr	r2, [pc, #356]	@ (8004a90 <I2C_ITError+0x25c>)
 800492a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004930:	4618      	mov	r0, r3
 8004932:	f7fd fb3d 	bl	8001fb0 <HAL_DMA_Abort_IT>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d068      	beq.n	8004a0e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004946:	2b40      	cmp	r3, #64	@ 0x40
 8004948:	d10b      	bne.n	8004962 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004984:	4610      	mov	r0, r2
 8004986:	4798      	blx	r3
 8004988:	e041      	b.n	8004a0e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b60      	cmp	r3, #96	@ 0x60
 8004994:	d125      	bne.n	80049e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ae:	2b40      	cmp	r3, #64	@ 0x40
 80049b0:	d10b      	bne.n	80049ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fe fece 	bl	800377c <HAL_I2C_AbortCpltCallback>
 80049e0:	e015      	b.n	8004a0e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ec:	2b40      	cmp	r3, #64	@ 0x40
 80049ee:	d10b      	bne.n	8004a08 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fe fead 	bl	8003768 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10e      	bne.n	8004a3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d109      	bne.n	8004a3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d104      	bne.n	8004a3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a4a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a52:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d113      	bne.n	8004a88 <I2C_ITError+0x254>
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b28      	cmp	r3, #40	@ 0x28
 8004a64:	d110      	bne.n	8004a88 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a0a      	ldr	r2, [pc, #40]	@ (8004a94 <I2C_ITError+0x260>)
 8004a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fe fe52 	bl	800372c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	08004fcd 	.word	0x08004fcd
 8004a94:	ffff0000 	.word	0xffff0000

08004a98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	817b      	strh	r3, [r7, #10]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	813b      	strh	r3, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fb24 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae8:	d103      	bne.n	8004af2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004af0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e05f      	b.n	8004bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004af6:	897b      	ldrh	r3, [r7, #10]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	6a3a      	ldr	r2, [r7, #32]
 8004b0a:	492d      	ldr	r1, [pc, #180]	@ (8004bc0 <I2C_RequestMemoryWrite+0x128>)
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fb7f 	bl	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e04c      	b.n	8004bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b34:	6a39      	ldr	r1, [r7, #32]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fc0a 	bl	8005350 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d107      	bne.n	8004b5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e02b      	b.n	8004bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d105      	bne.n	8004b70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b64:	893b      	ldrh	r3, [r7, #8]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	611a      	str	r2, [r3, #16]
 8004b6e:	e021      	b.n	8004bb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b70:	893b      	ldrh	r3, [r7, #8]
 8004b72:	0a1b      	lsrs	r3, r3, #8
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b80:	6a39      	ldr	r1, [r7, #32]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fbe4 	bl	8005350 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00d      	beq.n	8004baa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d107      	bne.n	8004ba6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e005      	b.n	8004bb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004baa:	893b      	ldrh	r3, [r7, #8]
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	00010002 	.word	0x00010002

08004bc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	4608      	mov	r0, r1
 8004bce:	4611      	mov	r1, r2
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	817b      	strh	r3, [r7, #10]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	813b      	strh	r3, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fa86 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00d      	beq.n	8004c32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c24:	d103      	bne.n	8004c2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e0aa      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c32:	897b      	ldrh	r3, [r7, #10]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	6a3a      	ldr	r2, [r7, #32]
 8004c46:	4952      	ldr	r1, [pc, #328]	@ (8004d90 <I2C_RequestMemoryRead+0x1cc>)
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fae1 	bl	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e097      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c70:	6a39      	ldr	r1, [r7, #32]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fb6c 	bl	8005350 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d107      	bne.n	8004c96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e076      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ca0:	893b      	ldrh	r3, [r7, #8]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	611a      	str	r2, [r3, #16]
 8004caa:	e021      	b.n	8004cf0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cac:	893b      	ldrh	r3, [r7, #8]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cbc:	6a39      	ldr	r1, [r7, #32]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fb46 	bl	8005350 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d107      	bne.n	8004ce2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e050      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce6:	893b      	ldrh	r3, [r7, #8]
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf2:	6a39      	ldr	r1, [r7, #32]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fb2b 	bl	8005350 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00d      	beq.n	8004d1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d107      	bne.n	8004d18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e035      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f9ef 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00d      	beq.n	8004d60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d52:	d103      	bne.n	8004d5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e013      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d60:	897b      	ldrh	r3, [r7, #10]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	6a3a      	ldr	r2, [r7, #32]
 8004d74:	4906      	ldr	r1, [pc, #24]	@ (8004d90 <I2C_RequestMemoryRead+0x1cc>)
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fa4a 	bl	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	00010002 	.word	0x00010002

08004d94 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004db0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004dc6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de4:	2200      	movs	r2, #0
 8004de6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004dee:	2b21      	cmp	r3, #33	@ 0x21
 8004df0:	d007      	beq.n	8004e02 <I2C_DMAXferCplt+0x6e>
 8004df2:	7cfb      	ldrb	r3, [r7, #19]
 8004df4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004df8:	2b22      	cmp	r3, #34	@ 0x22
 8004dfa:	d131      	bne.n	8004e60 <I2C_DMAXferCplt+0xcc>
 8004dfc:	7cbb      	ldrb	r3, [r7, #18]
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d12e      	bne.n	8004e60 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e10:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2200      	movs	r2, #0
 8004e16:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004e18:	7cfb      	ldrb	r3, [r7, #19]
 8004e1a:	2b29      	cmp	r3, #41	@ 0x29
 8004e1c:	d10a      	bne.n	8004e34 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2221      	movs	r2, #33	@ 0x21
 8004e22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2228      	movs	r2, #40	@ 0x28
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f7fe fc5b 	bl	80036e8 <HAL_I2C_SlaveTxCpltCallback>
 8004e32:	e00c      	b.n	8004e4e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e34:	7cfb      	ldrb	r3, [r7, #19]
 8004e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e38:	d109      	bne.n	8004e4e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2222      	movs	r2, #34	@ 0x22
 8004e3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2228      	movs	r2, #40	@ 0x28
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e48:	6978      	ldr	r0, [r7, #20]
 8004e4a:	f7fe fc57 	bl	80036fc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004e5c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e5e:	e074      	b.n	8004f4a <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d06e      	beq.n	8004f4a <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d107      	bne.n	8004e86 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e84:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004e94:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e9c:	d009      	beq.n	8004eb2 <I2C_DMAXferCplt+0x11e>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d006      	beq.n	8004eb2 <I2C_DMAXferCplt+0x11e>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004eaa:	d002      	beq.n	8004eb2 <I2C_DMAXferCplt+0x11e>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d107      	bne.n	8004ec2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ec0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ed0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ee0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004ef0:	6978      	ldr	r0, [r7, #20]
 8004ef2:	f7fe fc39 	bl	8003768 <HAL_I2C_ErrorCallback>
}
 8004ef6:	e028      	b.n	8004f4a <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b40      	cmp	r3, #64	@ 0x40
 8004f0a:	d10a      	bne.n	8004f22 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2200      	movs	r2, #0
 8004f18:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004f1a:	6978      	ldr	r0, [r7, #20]
 8004f1c:	f7fe fc1a 	bl	8003754 <HAL_I2C_MemRxCpltCallback>
}
 8004f20:	e013      	b.n	8004f4a <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d002      	beq.n	8004f36 <I2C_DMAXferCplt+0x1a2>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d103      	bne.n	8004f3e <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f3c:	e002      	b.n	8004f44 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2212      	movs	r2, #18
 8004f42:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f44:	6978      	ldr	r0, [r7, #20]
 8004f46:	f7fe fbc5 	bl	80036d4 <HAL_I2C_MasterRxCpltCallback>
}
 8004f4a:	bf00      	nop
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7fd f9cf 	bl	8002324 <HAL_DMA_GetError>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d01b      	beq.n	8004fc4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f9a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	f043 0210 	orr.w	r2, r3, #16
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f7fe fbd2 	bl	8003768 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8005114 <I2C_DMAAbort+0x148>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	08db      	lsrs	r3, r3, #3
 8004fec:	4a4a      	ldr	r2, [pc, #296]	@ (8005118 <I2C_DMAAbort+0x14c>)
 8004fee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff2:	0a1a      	lsrs	r2, r3, #8
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00da      	lsls	r2, r3, #3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	f043 0220 	orr.w	r2, r3, #32
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005012:	e00a      	b.n	800502a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3b01      	subs	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005028:	d0ea      	beq.n	8005000 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005036:	2200      	movs	r2, #0
 8005038:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005046:	2200      	movs	r2, #0
 8005048:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005058:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2200      	movs	r2, #0
 800505e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506c:	2200      	movs	r2, #0
 800506e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	2200      	movs	r2, #0
 800507e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b60      	cmp	r3, #96	@ 0x60
 800509a:	d10e      	bne.n	80050ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2200      	movs	r2, #0
 80050b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050b2:	6978      	ldr	r0, [r7, #20]
 80050b4:	f7fe fb62 	bl	800377c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050b8:	e027      	b.n	800510a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050c0:	2b28      	cmp	r3, #40	@ 0x28
 80050c2:	d117      	bne.n	80050f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2200      	movs	r2, #0
 80050e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2228      	movs	r2, #40	@ 0x28
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050f2:	e007      	b.n	8005104 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005104:	6978      	ldr	r0, [r7, #20]
 8005106:	f7fe fb2f 	bl	8003768 <HAL_I2C_ErrorCallback>
}
 800510a:	bf00      	nop
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000008 	.word	0x20000008
 8005118:	14f8b589 	.word	0x14f8b589

0800511c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800512c:	e048      	b.n	80051c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d044      	beq.n	80051c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005136:	f7fc fca7 	bl	8001a88 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d139      	bne.n	80051c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	0c1b      	lsrs	r3, r3, #16
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b01      	cmp	r3, #1
 8005154:	d10d      	bne.n	8005172 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	43da      	mvns	r2, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4013      	ands	r3, r2
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf0c      	ite	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2300      	movne	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	e00c      	b.n	800518c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	43da      	mvns	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4013      	ands	r3, r2
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	429a      	cmp	r2, r3
 8005190:	d116      	bne.n	80051c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ac:	f043 0220 	orr.w	r2, r3, #32
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e023      	b.n	8005208 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	0c1b      	lsrs	r3, r3, #16
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d10d      	bne.n	80051e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	43da      	mvns	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4013      	ands	r3, r2
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	bf0c      	ite	eq
 80051dc:	2301      	moveq	r3, #1
 80051de:	2300      	movne	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	e00c      	b.n	8005200 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	43da      	mvns	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4013      	ands	r3, r2
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	429a      	cmp	r2, r3
 8005204:	d093      	beq.n	800512e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800521e:	e071      	b.n	8005304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522e:	d123      	bne.n	8005278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800523e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	f043 0204 	orr.w	r2, r3, #4
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e067      	b.n	8005348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527e:	d041      	beq.n	8005304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005280:	f7fc fc02 	bl	8001a88 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	429a      	cmp	r2, r3
 800528e:	d302      	bcc.n	8005296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d136      	bne.n	8005304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	0c1b      	lsrs	r3, r3, #16
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10c      	bne.n	80052ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	43da      	mvns	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bf14      	ite	ne
 80052b2:	2301      	movne	r3, #1
 80052b4:	2300      	moveq	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	e00b      	b.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	43da      	mvns	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f0:	f043 0220 	orr.w	r2, r3, #32
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e021      	b.n	8005348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	0c1b      	lsrs	r3, r3, #16
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b01      	cmp	r3, #1
 800530c:	d10c      	bne.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	43da      	mvns	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e00b      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	43da      	mvns	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4013      	ands	r3, r2
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf14      	ite	ne
 800533a:	2301      	movne	r3, #1
 800533c:	2300      	moveq	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	f47f af6d 	bne.w	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800535c:	e034      	b.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f8b8 	bl	80054d4 <I2C_IsAcknowledgeFailed>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e034      	b.n	80053d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005374:	d028      	beq.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005376:	f7fc fb87 	bl	8001a88 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	429a      	cmp	r2, r3
 8005384:	d302      	bcc.n	800538c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d11d      	bne.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005396:	2b80      	cmp	r3, #128	@ 0x80
 8005398:	d016      	beq.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e007      	b.n	80053d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d2:	2b80      	cmp	r3, #128	@ 0x80
 80053d4:	d1c3      	bne.n	800535e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053ec:	e034      	b.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f870 	bl	80054d4 <I2C_IsAcknowledgeFailed>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e034      	b.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d028      	beq.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005406:	f7fc fb3f 	bl	8001a88 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	429a      	cmp	r2, r3
 8005414:	d302      	bcc.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d11d      	bne.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b04      	cmp	r3, #4
 8005428:	d016      	beq.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005444:	f043 0220 	orr.w	r2, r3, #32
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e007      	b.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b04      	cmp	r3, #4
 8005464:	d1c3      	bne.n	80053ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800547c:	4b13      	ldr	r3, [pc, #76]	@ (80054cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	08db      	lsrs	r3, r3, #3
 8005482:	4a13      	ldr	r2, [pc, #76]	@ (80054d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	0a1a      	lsrs	r2, r3, #8
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3b01      	subs	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d107      	bne.n	80054ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e008      	b.n	80054c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054bc:	d0e9      	beq.n	8005492 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	20000008 	.word	0x20000008
 80054d0:	14f8b589 	.word	0x14f8b589

080054d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ea:	d11b      	bne.n	8005524 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	f043 0204 	orr.w	r2, r3, #4
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e000      	b.n	8005526 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005542:	d103      	bne.n	800554c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800554a:	e007      	b.n	800555c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005554:	d102      	bne.n	800555c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2208      	movs	r2, #8
 800555a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0cc      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800557c:	4b68      	ldr	r3, [pc, #416]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d90c      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b65      	ldr	r3, [pc, #404]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b63      	ldr	r3, [pc, #396]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0b8      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d020      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055bc:	4b59      	ldr	r3, [pc, #356]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a58      	ldr	r2, [pc, #352]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055d4:	4b53      	ldr	r3, [pc, #332]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4a52      	ldr	r2, [pc, #328]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e0:	4b50      	ldr	r3, [pc, #320]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	494d      	ldr	r1, [pc, #308]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d044      	beq.n	8005688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d107      	bne.n	8005616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005606:	4b47      	ldr	r3, [pc, #284]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d119      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e07f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d003      	beq.n	8005626 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005622:	2b03      	cmp	r3, #3
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005626:	4b3f      	ldr	r3, [pc, #252]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e06f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005636:	4b3b      	ldr	r3, [pc, #236]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e067      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005646:	4b37      	ldr	r3, [pc, #220]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f023 0203 	bic.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4934      	ldr	r1, [pc, #208]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	4313      	orrs	r3, r2
 8005656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005658:	f7fc fa16 	bl	8001a88 <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	e00a      	b.n	8005676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005660:	f7fc fa12 	bl	8001a88 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e04f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	4b2b      	ldr	r3, [pc, #172]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 020c 	and.w	r2, r3, #12
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	429a      	cmp	r2, r3
 8005686:	d1eb      	bne.n	8005660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005688:	4b25      	ldr	r3, [pc, #148]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d20c      	bcs.n	80056b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b22      	ldr	r3, [pc, #136]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b20      	ldr	r3, [pc, #128]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e032      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056bc:	4b19      	ldr	r3, [pc, #100]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4916      	ldr	r1, [pc, #88]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056da:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	490e      	ldr	r1, [pc, #56]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056ee:	f000 f855 	bl	800579c <HAL_RCC_GetSysClockFreq>
 80056f2:	4602      	mov	r2, r0
 80056f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	490a      	ldr	r1, [pc, #40]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 8005700:	5ccb      	ldrb	r3, [r1, r3]
 8005702:	fa22 f303 	lsr.w	r3, r2, r3
 8005706:	4a09      	ldr	r2, [pc, #36]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800570a:	4b09      	ldr	r3, [pc, #36]	@ (8005730 <HAL_RCC_ClockConfig+0x1c8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f7fc f976 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40023c00 	.word	0x40023c00
 8005724:	40023800 	.word	0x40023800
 8005728:	080085e0 	.word	0x080085e0
 800572c:	20000008 	.word	0x20000008
 8005730:	2000000c 	.word	0x2000000c

08005734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005738:	4b03      	ldr	r3, [pc, #12]	@ (8005748 <HAL_RCC_GetHCLKFreq+0x14>)
 800573a:	681b      	ldr	r3, [r3, #0]
}
 800573c:	4618      	mov	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000008 	.word	0x20000008

0800574c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005750:	f7ff fff0 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005754:	4602      	mov	r2, r0
 8005756:	4b05      	ldr	r3, [pc, #20]	@ (800576c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	0a9b      	lsrs	r3, r3, #10
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	4903      	ldr	r1, [pc, #12]	@ (8005770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005762:	5ccb      	ldrb	r3, [r1, r3]
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005768:	4618      	mov	r0, r3
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40023800 	.word	0x40023800
 8005770:	080085f0 	.word	0x080085f0

08005774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005778:	f7ff ffdc 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 800577c:	4602      	mov	r2, r0
 800577e:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	0b5b      	lsrs	r3, r3, #13
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	4903      	ldr	r1, [pc, #12]	@ (8005798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800578a:	5ccb      	ldrb	r3, [r1, r3]
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005790:	4618      	mov	r0, r3
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40023800 	.word	0x40023800
 8005798:	080085f0 	.word	0x080085f0

0800579c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800579c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a0:	b0ae      	sub	sp, #184	@ 0xb8
 80057a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c2:	4bcb      	ldr	r3, [pc, #812]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x354>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	2b0c      	cmp	r3, #12
 80057cc:	f200 8206 	bhi.w	8005bdc <HAL_RCC_GetSysClockFreq+0x440>
 80057d0:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	0800580d 	.word	0x0800580d
 80057dc:	08005bdd 	.word	0x08005bdd
 80057e0:	08005bdd 	.word	0x08005bdd
 80057e4:	08005bdd 	.word	0x08005bdd
 80057e8:	08005815 	.word	0x08005815
 80057ec:	08005bdd 	.word	0x08005bdd
 80057f0:	08005bdd 	.word	0x08005bdd
 80057f4:	08005bdd 	.word	0x08005bdd
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005bdd 	.word	0x08005bdd
 8005800:	08005bdd 	.word	0x08005bdd
 8005804:	08005bdd 	.word	0x08005bdd
 8005808:	08005a0d 	.word	0x08005a0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800580c:	4bb9      	ldr	r3, [pc, #740]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x358>)
 800580e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005812:	e1e7      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005814:	4bb8      	ldr	r3, [pc, #736]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005816:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800581a:	e1e3      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800581c:	4bb4      	ldr	r3, [pc, #720]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005828:	4bb1      	ldr	r3, [pc, #708]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d071      	beq.n	8005918 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005834:	4bae      	ldr	r3, [pc, #696]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	099b      	lsrs	r3, r3, #6
 800583a:	2200      	movs	r2, #0
 800583c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005840:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005850:	2300      	movs	r3, #0
 8005852:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800585a:	4622      	mov	r2, r4
 800585c:	462b      	mov	r3, r5
 800585e:	f04f 0000 	mov.w	r0, #0
 8005862:	f04f 0100 	mov.w	r1, #0
 8005866:	0159      	lsls	r1, r3, #5
 8005868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800586c:	0150      	lsls	r0, r2, #5
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4621      	mov	r1, r4
 8005874:	1a51      	subs	r1, r2, r1
 8005876:	6439      	str	r1, [r7, #64]	@ 0x40
 8005878:	4629      	mov	r1, r5
 800587a:	eb63 0301 	sbc.w	r3, r3, r1
 800587e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800588c:	4649      	mov	r1, r9
 800588e:	018b      	lsls	r3, r1, #6
 8005890:	4641      	mov	r1, r8
 8005892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005896:	4641      	mov	r1, r8
 8005898:	018a      	lsls	r2, r1, #6
 800589a:	4641      	mov	r1, r8
 800589c:	1a51      	subs	r1, r2, r1
 800589e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058a0:	4649      	mov	r1, r9
 80058a2:	eb63 0301 	sbc.w	r3, r3, r1
 80058a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80058b4:	4649      	mov	r1, r9
 80058b6:	00cb      	lsls	r3, r1, #3
 80058b8:	4641      	mov	r1, r8
 80058ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058be:	4641      	mov	r1, r8
 80058c0:	00ca      	lsls	r2, r1, #3
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	4622      	mov	r2, r4
 80058ca:	189b      	adds	r3, r3, r2
 80058cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ce:	462b      	mov	r3, r5
 80058d0:	460a      	mov	r2, r1
 80058d2:	eb42 0303 	adc.w	r3, r2, r3
 80058d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80058e4:	4629      	mov	r1, r5
 80058e6:	024b      	lsls	r3, r1, #9
 80058e8:	4621      	mov	r1, r4
 80058ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058ee:	4621      	mov	r1, r4
 80058f0:	024a      	lsls	r2, r1, #9
 80058f2:	4610      	mov	r0, r2
 80058f4:	4619      	mov	r1, r3
 80058f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005900:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005904:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005908:	f7fa fcea 	bl	80002e0 <__aeabi_uldivmod>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4613      	mov	r3, r2
 8005912:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005916:	e067      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005918:	4b75      	ldr	r3, [pc, #468]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	099b      	lsrs	r3, r3, #6
 800591e:	2200      	movs	r2, #0
 8005920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005924:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005928:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800592c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005930:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005932:	2300      	movs	r3, #0
 8005934:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005936:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800593a:	4622      	mov	r2, r4
 800593c:	462b      	mov	r3, r5
 800593e:	f04f 0000 	mov.w	r0, #0
 8005942:	f04f 0100 	mov.w	r1, #0
 8005946:	0159      	lsls	r1, r3, #5
 8005948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800594c:	0150      	lsls	r0, r2, #5
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4621      	mov	r1, r4
 8005954:	1a51      	subs	r1, r2, r1
 8005956:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005958:	4629      	mov	r1, r5
 800595a:	eb63 0301 	sbc.w	r3, r3, r1
 800595e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800596c:	4649      	mov	r1, r9
 800596e:	018b      	lsls	r3, r1, #6
 8005970:	4641      	mov	r1, r8
 8005972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005976:	4641      	mov	r1, r8
 8005978:	018a      	lsls	r2, r1, #6
 800597a:	4641      	mov	r1, r8
 800597c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005980:	4649      	mov	r1, r9
 8005982:	eb63 0b01 	sbc.w	fp, r3, r1
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005992:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800599a:	4692      	mov	sl, r2
 800599c:	469b      	mov	fp, r3
 800599e:	4623      	mov	r3, r4
 80059a0:	eb1a 0303 	adds.w	r3, sl, r3
 80059a4:	623b      	str	r3, [r7, #32]
 80059a6:	462b      	mov	r3, r5
 80059a8:	eb4b 0303 	adc.w	r3, fp, r3
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80059ba:	4629      	mov	r1, r5
 80059bc:	028b      	lsls	r3, r1, #10
 80059be:	4621      	mov	r1, r4
 80059c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059c4:	4621      	mov	r1, r4
 80059c6:	028a      	lsls	r2, r1, #10
 80059c8:	4610      	mov	r0, r2
 80059ca:	4619      	mov	r1, r3
 80059cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059d0:	2200      	movs	r2, #0
 80059d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80059d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80059d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80059da:	f7fa fc81 	bl	80002e0 <__aeabi_uldivmod>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4613      	mov	r3, r2
 80059e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80059e8:	4b41      	ldr	r3, [pc, #260]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x354>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	0c1b      	lsrs	r3, r3, #16
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	3301      	adds	r3, #1
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80059fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005a0a:	e0eb      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a0c:	4b38      	ldr	r3, [pc, #224]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a18:	4b35      	ldr	r3, [pc, #212]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d06b      	beq.n	8005afc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a24:	4b32      	ldr	r3, [pc, #200]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	099b      	lsrs	r3, r3, #6
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a36:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a38:	2300      	movs	r3, #0
 8005a3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005a40:	4622      	mov	r2, r4
 8005a42:	462b      	mov	r3, r5
 8005a44:	f04f 0000 	mov.w	r0, #0
 8005a48:	f04f 0100 	mov.w	r1, #0
 8005a4c:	0159      	lsls	r1, r3, #5
 8005a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a52:	0150      	lsls	r0, r2, #5
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4621      	mov	r1, r4
 8005a5a:	1a51      	subs	r1, r2, r1
 8005a5c:	61b9      	str	r1, [r7, #24]
 8005a5e:	4629      	mov	r1, r5
 8005a60:	eb63 0301 	sbc.w	r3, r3, r1
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005a72:	4659      	mov	r1, fp
 8005a74:	018b      	lsls	r3, r1, #6
 8005a76:	4651      	mov	r1, sl
 8005a78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a7c:	4651      	mov	r1, sl
 8005a7e:	018a      	lsls	r2, r1, #6
 8005a80:	4651      	mov	r1, sl
 8005a82:	ebb2 0801 	subs.w	r8, r2, r1
 8005a86:	4659      	mov	r1, fp
 8005a88:	eb63 0901 	sbc.w	r9, r3, r1
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aa0:	4690      	mov	r8, r2
 8005aa2:	4699      	mov	r9, r3
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	eb18 0303 	adds.w	r3, r8, r3
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	462b      	mov	r3, r5
 8005aae:	eb49 0303 	adc.w	r3, r9, r3
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	024b      	lsls	r3, r1, #9
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005aca:	4621      	mov	r1, r4
 8005acc:	024a      	lsls	r2, r1, #9
 8005ace:	4610      	mov	r0, r2
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ada:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005adc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ae0:	f7fa fbfe 	bl	80002e0 <__aeabi_uldivmod>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4613      	mov	r3, r2
 8005aea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aee:	e065      	b.n	8005bbc <HAL_RCC_GetSysClockFreq+0x420>
 8005af0:	40023800 	.word	0x40023800
 8005af4:	00f42400 	.word	0x00f42400
 8005af8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afc:	4b3d      	ldr	r3, [pc, #244]	@ (8005bf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	099b      	lsrs	r3, r3, #6
 8005b02:	2200      	movs	r2, #0
 8005b04:	4618      	mov	r0, r3
 8005b06:	4611      	mov	r1, r2
 8005b08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b0e:	2300      	movs	r3, #0
 8005b10:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005b16:	4642      	mov	r2, r8
 8005b18:	464b      	mov	r3, r9
 8005b1a:	f04f 0000 	mov.w	r0, #0
 8005b1e:	f04f 0100 	mov.w	r1, #0
 8005b22:	0159      	lsls	r1, r3, #5
 8005b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b28:	0150      	lsls	r0, r2, #5
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4641      	mov	r1, r8
 8005b30:	1a51      	subs	r1, r2, r1
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	4649      	mov	r1, r9
 8005b36:	eb63 0301 	sbc.w	r3, r3, r1
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005b48:	4659      	mov	r1, fp
 8005b4a:	018b      	lsls	r3, r1, #6
 8005b4c:	4651      	mov	r1, sl
 8005b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b52:	4651      	mov	r1, sl
 8005b54:	018a      	lsls	r2, r1, #6
 8005b56:	4651      	mov	r1, sl
 8005b58:	1a54      	subs	r4, r2, r1
 8005b5a:	4659      	mov	r1, fp
 8005b5c:	eb63 0501 	sbc.w	r5, r3, r1
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	00eb      	lsls	r3, r5, #3
 8005b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b6e:	00e2      	lsls	r2, r4, #3
 8005b70:	4614      	mov	r4, r2
 8005b72:	461d      	mov	r5, r3
 8005b74:	4643      	mov	r3, r8
 8005b76:	18e3      	adds	r3, r4, r3
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	eb45 0303 	adc.w	r3, r5, r3
 8005b80:	607b      	str	r3, [r7, #4]
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b8e:	4629      	mov	r1, r5
 8005b90:	028b      	lsls	r3, r1, #10
 8005b92:	4621      	mov	r1, r4
 8005b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b98:	4621      	mov	r1, r4
 8005b9a:	028a      	lsls	r2, r1, #10
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005baa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bae:	f7fa fb97 	bl	80002e0 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	0f1b      	lsrs	r3, r3, #28
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005bda:	e003      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bdc:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005bde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005be2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005be4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	37b8      	adds	r7, #184	@ 0xb8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	00f42400 	.word	0x00f42400

08005bfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e28d      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8083 	beq.w	8005d22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c1c:	4b94      	ldr	r3, [pc, #592]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 030c 	and.w	r3, r3, #12
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d019      	beq.n	8005c5c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005c28:	4b91      	ldr	r3, [pc, #580]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d106      	bne.n	8005c42 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005c34:	4b8e      	ldr	r3, [pc, #568]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c40:	d00c      	beq.n	8005c5c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c42:	4b8b      	ldr	r3, [pc, #556]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d112      	bne.n	8005c74 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c4e:	4b88      	ldr	r3, [pc, #544]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c5a:	d10b      	bne.n	8005c74 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5c:	4b84      	ldr	r3, [pc, #528]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d05b      	beq.n	8005d20 <HAL_RCC_OscConfig+0x124>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d157      	bne.n	8005d20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e25a      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c7c:	d106      	bne.n	8005c8c <HAL_RCC_OscConfig+0x90>
 8005c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a7b      	ldr	r2, [pc, #492]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	e01d      	b.n	8005cc8 <HAL_RCC_OscConfig+0xcc>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c94:	d10c      	bne.n	8005cb0 <HAL_RCC_OscConfig+0xb4>
 8005c96:	4b76      	ldr	r3, [pc, #472]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a75      	ldr	r2, [pc, #468]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	4b73      	ldr	r3, [pc, #460]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a72      	ldr	r2, [pc, #456]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	e00b      	b.n	8005cc8 <HAL_RCC_OscConfig+0xcc>
 8005cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a6e      	ldr	r2, [pc, #440]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d013      	beq.n	8005cf8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd0:	f7fb feda 	bl	8001a88 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cd8:	f7fb fed6 	bl	8001a88 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b64      	cmp	r3, #100	@ 0x64
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e21f      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cea:	4b61      	ldr	r3, [pc, #388]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f0      	beq.n	8005cd8 <HAL_RCC_OscConfig+0xdc>
 8005cf6:	e014      	b.n	8005d22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf8:	f7fb fec6 	bl	8001a88 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d00:	f7fb fec2 	bl	8001a88 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b64      	cmp	r3, #100	@ 0x64
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e20b      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d12:	4b57      	ldr	r3, [pc, #348]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f0      	bne.n	8005d00 <HAL_RCC_OscConfig+0x104>
 8005d1e:	e000      	b.n	8005d22 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d06f      	beq.n	8005e0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d2e:	4b50      	ldr	r3, [pc, #320]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d017      	beq.n	8005d6a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d105      	bne.n	8005d52 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005d46:	4b4a      	ldr	r3, [pc, #296]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00b      	beq.n	8005d6a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d52:	4b47      	ldr	r3, [pc, #284]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005d5a:	2b0c      	cmp	r3, #12
 8005d5c:	d11c      	bne.n	8005d98 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d5e:	4b44      	ldr	r3, [pc, #272]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d116      	bne.n	8005d98 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d6a:	4b41      	ldr	r3, [pc, #260]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_RCC_OscConfig+0x186>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d001      	beq.n	8005d82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e1d3      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d82:	4b3b      	ldr	r3, [pc, #236]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4937      	ldr	r1, [pc, #220]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d96:	e03a      	b.n	8005e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d020      	beq.n	8005de2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005da0:	4b34      	ldr	r3, [pc, #208]	@ (8005e74 <HAL_RCC_OscConfig+0x278>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da6:	f7fb fe6f 	bl	8001a88 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dae:	f7fb fe6b 	bl	8001a88 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e1b4      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dcc:	4b28      	ldr	r3, [pc, #160]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	4925      	ldr	r1, [pc, #148]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	600b      	str	r3, [r1, #0]
 8005de0:	e015      	b.n	8005e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005de2:	4b24      	ldr	r3, [pc, #144]	@ (8005e74 <HAL_RCC_OscConfig+0x278>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fb fe4e 	bl	8001a88 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df0:	f7fb fe4a 	bl	8001a88 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e193      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e02:	4b1b      	ldr	r3, [pc, #108]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d036      	beq.n	8005e88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d016      	beq.n	8005e50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e22:	4b15      	ldr	r3, [pc, #84]	@ (8005e78 <HAL_RCC_OscConfig+0x27c>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e28:	f7fb fe2e 	bl	8001a88 <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e30:	f7fb fe2a 	bl	8001a88 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e173      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e42:	4b0b      	ldr	r3, [pc, #44]	@ (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0f0      	beq.n	8005e30 <HAL_RCC_OscConfig+0x234>
 8005e4e:	e01b      	b.n	8005e88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e50:	4b09      	ldr	r3, [pc, #36]	@ (8005e78 <HAL_RCC_OscConfig+0x27c>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e56:	f7fb fe17 	bl	8001a88 <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e5c:	e00e      	b.n	8005e7c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e5e:	f7fb fe13 	bl	8001a88 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d907      	bls.n	8005e7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e15c      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
 8005e70:	40023800 	.word	0x40023800
 8005e74:	42470000 	.word	0x42470000
 8005e78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e7c:	4b8a      	ldr	r3, [pc, #552]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1ea      	bne.n	8005e5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8097 	beq.w	8005fc4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e96:	2300      	movs	r3, #0
 8005e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e9a:	4b83      	ldr	r3, [pc, #524]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10f      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eae:	4a7e      	ldr	r2, [pc, #504]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eb6:	4b7c      	ldr	r3, [pc, #496]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ebe:	60bb      	str	r3, [r7, #8]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec6:	4b79      	ldr	r3, [pc, #484]	@ (80060ac <HAL_RCC_OscConfig+0x4b0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d118      	bne.n	8005f04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ed2:	4b76      	ldr	r3, [pc, #472]	@ (80060ac <HAL_RCC_OscConfig+0x4b0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a75      	ldr	r2, [pc, #468]	@ (80060ac <HAL_RCC_OscConfig+0x4b0>)
 8005ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ede:	f7fb fdd3 	bl	8001a88 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee6:	f7fb fdcf 	bl	8001a88 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e118      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80060ac <HAL_RCC_OscConfig+0x4b0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d106      	bne.n	8005f1a <HAL_RCC_OscConfig+0x31e>
 8005f0c:	4b66      	ldr	r3, [pc, #408]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f10:	4a65      	ldr	r2, [pc, #404]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f18:	e01c      	b.n	8005f54 <HAL_RCC_OscConfig+0x358>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d10c      	bne.n	8005f3c <HAL_RCC_OscConfig+0x340>
 8005f22:	4b61      	ldr	r3, [pc, #388]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f26:	4a60      	ldr	r2, [pc, #384]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005f28:	f043 0304 	orr.w	r3, r3, #4
 8005f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f32:	4a5d      	ldr	r2, [pc, #372]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005f34:	f043 0301 	orr.w	r3, r3, #1
 8005f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f3a:	e00b      	b.n	8005f54 <HAL_RCC_OscConfig+0x358>
 8005f3c:	4b5a      	ldr	r3, [pc, #360]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f40:	4a59      	ldr	r2, [pc, #356]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f48:	4b57      	ldr	r3, [pc, #348]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4c:	4a56      	ldr	r2, [pc, #344]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005f4e:	f023 0304 	bic.w	r3, r3, #4
 8005f52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d015      	beq.n	8005f88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5c:	f7fb fd94 	bl	8001a88 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f62:	e00a      	b.n	8005f7a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f64:	f7fb fd90 	bl	8001a88 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e0d7      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0ee      	beq.n	8005f64 <HAL_RCC_OscConfig+0x368>
 8005f86:	e014      	b.n	8005fb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f88:	f7fb fd7e 	bl	8001a88 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f8e:	e00a      	b.n	8005fa6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f90:	f7fb fd7a 	bl	8001a88 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e0c1      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa6:	4b40      	ldr	r3, [pc, #256]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1ee      	bne.n	8005f90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d105      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbc:	4a3a      	ldr	r2, [pc, #232]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80ad 	beq.w	8006128 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fce:	4b36      	ldr	r3, [pc, #216]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 030c 	and.w	r3, r3, #12
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d060      	beq.n	800609c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d145      	bne.n	800606e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe2:	4b33      	ldr	r3, [pc, #204]	@ (80060b0 <HAL_RCC_OscConfig+0x4b4>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7fb fd4e 	bl	8001a88 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fb fd4a 	bl	8001a88 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e093      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006002:	4b29      	ldr	r3, [pc, #164]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69da      	ldr	r2, [r3, #28]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	019b      	lsls	r3, r3, #6
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	085b      	lsrs	r3, r3, #1
 8006026:	3b01      	subs	r3, #1
 8006028:	041b      	lsls	r3, r3, #16
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	061b      	lsls	r3, r3, #24
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006038:	071b      	lsls	r3, r3, #28
 800603a:	491b      	ldr	r1, [pc, #108]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 800603c:	4313      	orrs	r3, r2
 800603e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006040:	4b1b      	ldr	r3, [pc, #108]	@ (80060b0 <HAL_RCC_OscConfig+0x4b4>)
 8006042:	2201      	movs	r2, #1
 8006044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006046:	f7fb fd1f 	bl	8001a88 <HAL_GetTick>
 800604a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604c:	e008      	b.n	8006060 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800604e:	f7fb fd1b 	bl	8001a88 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e064      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006060:	4b11      	ldr	r3, [pc, #68]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0f0      	beq.n	800604e <HAL_RCC_OscConfig+0x452>
 800606c:	e05c      	b.n	8006128 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606e:	4b10      	ldr	r3, [pc, #64]	@ (80060b0 <HAL_RCC_OscConfig+0x4b4>)
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fb fd08 	bl	8001a88 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607c:	f7fb fd04 	bl	8001a88 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e04d      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608e:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1f0      	bne.n	800607c <HAL_RCC_OscConfig+0x480>
 800609a:	e045      	b.n	8006128 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d107      	bne.n	80060b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e040      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
 80060a8:	40023800 	.word	0x40023800
 80060ac:	40007000 	.word	0x40007000
 80060b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006134 <HAL_RCC_OscConfig+0x538>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d030      	beq.n	8006124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d129      	bne.n	8006124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060da:	429a      	cmp	r2, r3
 80060dc:	d122      	bne.n	8006124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060e4:	4013      	ands	r3, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d119      	bne.n	8006124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fa:	085b      	lsrs	r3, r3, #1
 80060fc:	3b01      	subs	r3, #1
 80060fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006100:	429a      	cmp	r2, r3
 8006102:	d10f      	bne.n	8006124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006110:	429a      	cmp	r2, r3
 8006112:	d107      	bne.n	8006124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006120:	429a      	cmp	r2, r3
 8006122:	d001      	beq.n	8006128 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	40023800 	.word	0x40023800

08006138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e042      	b.n	80061d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fb fa9a 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2224      	movs	r2, #36	@ 0x24
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800617a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fd1b 	bl	8006bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695a      	ldr	r2, [r3, #20]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	4613      	mov	r3, r2
 80061e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d121      	bne.n	8006236 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_UART_Transmit_IT+0x26>
 80061f8:	88fb      	ldrh	r3, [r7, #6]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e01a      	b.n	8006238 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	88fa      	ldrh	r2, [r7, #6]
 800620c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	88fa      	ldrh	r2, [r7, #6]
 8006212:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2221      	movs	r2, #33	@ 0x21
 800621e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006230:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e000      	b.n	8006238 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006236:	2302      	movs	r3, #2
  }
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	4613      	mov	r3, r2
 8006250:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b20      	cmp	r3, #32
 800625c:	d112      	bne.n	8006284 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <HAL_UART_Receive_IT+0x26>
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e00b      	b.n	8006286 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	461a      	mov	r2, r3
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 fac4 	bl	8006808 <UART_Start_Receive_IT>
 8006280:	4603      	mov	r3, r0
 8006282:	e000      	b.n	8006286 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006284:	2302      	movs	r3, #2
  }
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b0ba      	sub	sp, #232	@ 0xe8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80062bc:	2300      	movs	r3, #0
 80062be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80062ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10f      	bne.n	80062f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_UART_IRQHandler+0x66>
 80062e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fba3 	bl	8006a3a <UART_Receive_IT>
      return;
 80062f4:	e25b      	b.n	80067ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80de 	beq.w	80064bc <HAL_UART_IRQHandler+0x22c>
 8006300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006310:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80d1 	beq.w	80064bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800631a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00b      	beq.n	800633e <HAL_UART_IRQHandler+0xae>
 8006326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800632a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006336:	f043 0201 	orr.w	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800633e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00b      	beq.n	8006362 <HAL_UART_IRQHandler+0xd2>
 800634a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d005      	beq.n	8006362 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635a:	f043 0202 	orr.w	r2, r3, #2
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <HAL_UART_IRQHandler+0xf6>
 800636e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	f043 0204 	orr.w	r2, r3, #4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d011      	beq.n	80063b6 <HAL_UART_IRQHandler+0x126>
 8006392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	d105      	bne.n	80063aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800639e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ae:	f043 0208 	orr.w	r2, r3, #8
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 81f2 	beq.w	80067a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <HAL_UART_IRQHandler+0x14e>
 80063cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fb2e 	bl	8006a3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e8:	2b40      	cmp	r3, #64	@ 0x40
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d103      	bne.n	800640a <HAL_UART_IRQHandler+0x17a>
 8006402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d04f      	beq.n	80064aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa36 	bl	800687c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641a:	2b40      	cmp	r3, #64	@ 0x40
 800641c:	d141      	bne.n	80064a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3314      	adds	r3, #20
 8006424:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006434:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800643c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3314      	adds	r3, #20
 8006446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800644a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800644e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1d9      	bne.n	800641e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d013      	beq.n	800649a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006476:	4a7e      	ldr	r2, [pc, #504]	@ (8006670 <HAL_UART_IRQHandler+0x3e0>)
 8006478:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647e:	4618      	mov	r0, r3
 8006480:	f7fb fd96 	bl	8001fb0 <HAL_DMA_Abort_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d016      	beq.n	80064b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006494:	4610      	mov	r0, r2
 8006496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006498:	e00e      	b.n	80064b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f99e 	bl	80067dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a0:	e00a      	b.n	80064b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f99a 	bl	80067dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a8:	e006      	b.n	80064b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f996 	bl	80067dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80064b6:	e175      	b.n	80067a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	bf00      	nop
    return;
 80064ba:	e173      	b.n	80067a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	f040 814f 	bne.w	8006764 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ca:	f003 0310 	and.w	r3, r3, #16
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 8148 	beq.w	8006764 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8141 	beq.w	8006764 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064e2:	2300      	movs	r3, #0
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60bb      	str	r3, [r7, #8]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006502:	2b40      	cmp	r3, #64	@ 0x40
 8006504:	f040 80b6 	bne.w	8006674 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8145 	beq.w	80067a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006526:	429a      	cmp	r2, r3
 8006528:	f080 813e 	bcs.w	80067a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006532:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800653e:	f000 8088 	beq.w	8006652 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	330c      	adds	r3, #12
 8006548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006558:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800655c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006560:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	330c      	adds	r3, #12
 800656a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800656e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800657a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1d9      	bne.n	8006542 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800659e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e1      	bne.n	800658e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3314      	adds	r3, #20
 80065d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3314      	adds	r3, #20
 80065ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e3      	bne.n	80065ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006622:	f023 0310 	bic.w	r3, r3, #16
 8006626:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	330c      	adds	r3, #12
 8006630:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006634:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006636:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800663a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e3      	bne.n	8006610 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664c:	4618      	mov	r0, r3
 800664e:	f7fb fc3f 	bl	8001ed0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006660:	b29b      	uxth	r3, r3
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	b29b      	uxth	r3, r3
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f8c1 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800666e:	e09b      	b.n	80067a8 <HAL_UART_IRQHandler+0x518>
 8006670:	08006943 	.word	0x08006943
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800667c:	b29b      	uxth	r3, r3
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 808e 	beq.w	80067ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8089 	beq.w	80067ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80066be:	647a      	str	r2, [r7, #68]	@ 0x44
 80066c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e3      	bne.n	800669a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3314      	adds	r3, #20
 80066d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	623b      	str	r3, [r7, #32]
   return(result);
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3314      	adds	r3, #20
 80066f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80066f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e3      	bne.n	80066d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	60fb      	str	r3, [r7, #12]
   return(result);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0310 	bic.w	r3, r3, #16
 800672e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800673c:	61fa      	str	r2, [r7, #28]
 800673e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	69b9      	ldr	r1, [r7, #24]
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	617b      	str	r3, [r7, #20]
   return(result);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e3      	bne.n	8006718 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006756:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f847 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006762:	e023      	b.n	80067ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800676c:	2b00      	cmp	r3, #0
 800676e:	d009      	beq.n	8006784 <HAL_UART_IRQHandler+0x4f4>
 8006770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f8f4 	bl	800696a <UART_Transmit_IT>
    return;
 8006782:	e014      	b.n	80067ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00e      	beq.n	80067ae <HAL_UART_IRQHandler+0x51e>
 8006790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f934 	bl	8006a0a <UART_EndTransmit_IT>
    return;
 80067a2:	e004      	b.n	80067ae <HAL_UART_IRQHandler+0x51e>
    return;
 80067a4:	bf00      	nop
 80067a6:	e002      	b.n	80067ae <HAL_UART_IRQHandler+0x51e>
      return;
 80067a8:	bf00      	nop
 80067aa:	e000      	b.n	80067ae <HAL_UART_IRQHandler+0x51e>
      return;
 80067ac:	bf00      	nop
  }
}
 80067ae:	37e8      	adds	r7, #232	@ 0xe8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	4613      	mov	r3, r2
 8006814:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	88fa      	ldrh	r2, [r7, #6]
 8006820:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	88fa      	ldrh	r2, [r7, #6]
 8006826:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2222      	movs	r2, #34	@ 0x22
 8006832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800684c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0201 	orr.w	r2, r2, #1
 800685c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0220 	orr.w	r2, r2, #32
 800686c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b095      	sub	sp, #84	@ 0x54
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	330c      	adds	r3, #12
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800689a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	330c      	adds	r3, #12
 80068a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80068a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068ac:	e841 2300 	strex	r3, r2, [r1]
 80068b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e5      	bne.n	8006884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3314      	adds	r3, #20
 80068be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	f023 0301 	bic.w	r3, r3, #1
 80068ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3314      	adds	r3, #20
 80068d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e5      	bne.n	80068b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d119      	bne.n	8006928 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	330c      	adds	r3, #12
 80068fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	60bb      	str	r3, [r7, #8]
   return(result);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f023 0310 	bic.w	r3, r3, #16
 800690a:	647b      	str	r3, [r7, #68]	@ 0x44
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	330c      	adds	r3, #12
 8006912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006914:	61ba      	str	r2, [r7, #24]
 8006916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6979      	ldr	r1, [r7, #20]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	613b      	str	r3, [r7, #16]
   return(result);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e5      	bne.n	80068f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006936:	bf00      	nop
 8006938:	3754      	adds	r7, #84	@ 0x54
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f7ff ff3d 	bl	80067dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b21      	cmp	r3, #33	@ 0x21
 800697c:	d13e      	bne.n	80069fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006986:	d114      	bne.n	80069b2 <UART_Transmit_IT+0x48>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d110      	bne.n	80069b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	1c9a      	adds	r2, r3, #2
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	621a      	str	r2, [r3, #32]
 80069b0:	e008      	b.n	80069c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	1c59      	adds	r1, r3, #1
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6211      	str	r1, [r2, #32]
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	4619      	mov	r1, r3
 80069d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10f      	bne.n	80069f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e000      	b.n	80069fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069fc:	2302      	movs	r3, #2
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff fec2 	bl	80067b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b08c      	sub	sp, #48	@ 0x30
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b22      	cmp	r3, #34	@ 0x22
 8006a4c:	f040 80ae 	bne.w	8006bac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a58:	d117      	bne.n	8006a8a <UART_Receive_IT+0x50>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d113      	bne.n	8006a8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a82:	1c9a      	adds	r2, r3, #2
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a88:	e026      	b.n	8006ad8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006a90:	2300      	movs	r3, #0
 8006a92:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a9c:	d007      	beq.n	8006aae <UART_Receive_IT+0x74>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10a      	bne.n	8006abc <UART_Receive_IT+0x82>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	e008      	b.n	8006ace <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006acc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d15d      	bne.n	8006ba8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0220 	bic.w	r2, r2, #32
 8006afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695a      	ldr	r2, [r3, #20]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0201 	bic.w	r2, r2, #1
 8006b1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d135      	bne.n	8006b9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	613b      	str	r3, [r7, #16]
   return(result);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f023 0310 	bic.w	r3, r3, #16
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b58:	623a      	str	r2, [r7, #32]
 8006b5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	69f9      	ldr	r1, [r7, #28]
 8006b5e:	6a3a      	ldr	r2, [r7, #32]
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e5      	bne.n	8006b38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0310 	and.w	r3, r3, #16
 8006b76:	2b10      	cmp	r3, #16
 8006b78:	d10a      	bne.n	8006b90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff fe2a 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
 8006b9c:	e002      	b.n	8006ba4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff fe12 	bl	80067c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e002      	b.n	8006bae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e000      	b.n	8006bae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
  }
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3730      	adds	r7, #48	@ 0x30
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bbc:	b0c0      	sub	sp, #256	@ 0x100
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd4:	68d9      	ldr	r1, [r3, #12]
 8006bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	ea40 0301 	orr.w	r3, r0, r1
 8006be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c10:	f021 010c 	bic.w	r1, r1, #12
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c1e:	430b      	orrs	r3, r1
 8006c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c32:	6999      	ldr	r1, [r3, #24]
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	ea40 0301 	orr.w	r3, r0, r1
 8006c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4b8f      	ldr	r3, [pc, #572]	@ (8006e84 <UART_SetConfig+0x2cc>)
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d005      	beq.n	8006c58 <UART_SetConfig+0xa0>
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b8d      	ldr	r3, [pc, #564]	@ (8006e88 <UART_SetConfig+0x2d0>)
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d104      	bne.n	8006c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c58:	f7fe fd8c 	bl	8005774 <HAL_RCC_GetPCLK2Freq>
 8006c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c60:	e003      	b.n	8006c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c62:	f7fe fd73 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8006c66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c74:	f040 810c 	bne.w	8006e90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	462b      	mov	r3, r5
 8006c8e:	1891      	adds	r1, r2, r2
 8006c90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c92:	415b      	adcs	r3, r3
 8006c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	eb12 0801 	adds.w	r8, r2, r1
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	eb43 0901 	adc.w	r9, r3, r1
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cba:	4690      	mov	r8, r2
 8006cbc:	4699      	mov	r9, r3
 8006cbe:	4623      	mov	r3, r4
 8006cc0:	eb18 0303 	adds.w	r3, r8, r3
 8006cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cc8:	462b      	mov	r3, r5
 8006cca:	eb49 0303 	adc.w	r3, r9, r3
 8006cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	18db      	adds	r3, r3, r3
 8006cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cec:	4613      	mov	r3, r2
 8006cee:	eb42 0303 	adc.w	r3, r2, r3
 8006cf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006cfc:	f7f9 faf0 	bl	80002e0 <__aeabi_uldivmod>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4b61      	ldr	r3, [pc, #388]	@ (8006e8c <UART_SetConfig+0x2d4>)
 8006d06:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	011c      	lsls	r4, r3, #4
 8006d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d20:	4642      	mov	r2, r8
 8006d22:	464b      	mov	r3, r9
 8006d24:	1891      	adds	r1, r2, r2
 8006d26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d28:	415b      	adcs	r3, r3
 8006d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d30:	4641      	mov	r1, r8
 8006d32:	eb12 0a01 	adds.w	sl, r2, r1
 8006d36:	4649      	mov	r1, r9
 8006d38:	eb43 0b01 	adc.w	fp, r3, r1
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d50:	4692      	mov	sl, r2
 8006d52:	469b      	mov	fp, r3
 8006d54:	4643      	mov	r3, r8
 8006d56:	eb1a 0303 	adds.w	r3, sl, r3
 8006d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	eb4b 0303 	adc.w	r3, fp, r3
 8006d64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	18db      	adds	r3, r3, r3
 8006d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d82:	4613      	mov	r3, r2
 8006d84:	eb42 0303 	adc.w	r3, r2, r3
 8006d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d92:	f7f9 faa5 	bl	80002e0 <__aeabi_uldivmod>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006e8c <UART_SetConfig+0x2d4>)
 8006d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	2264      	movs	r2, #100	@ 0x64
 8006da6:	fb02 f303 	mul.w	r3, r2, r3
 8006daa:	1acb      	subs	r3, r1, r3
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006db2:	4b36      	ldr	r3, [pc, #216]	@ (8006e8c <UART_SetConfig+0x2d4>)
 8006db4:	fba3 2302 	umull	r2, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dc0:	441c      	add	r4, r3
 8006dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006dd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006dd4:	4642      	mov	r2, r8
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	1891      	adds	r1, r2, r2
 8006dda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ddc:	415b      	adcs	r3, r3
 8006dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006de4:	4641      	mov	r1, r8
 8006de6:	1851      	adds	r1, r2, r1
 8006de8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006dea:	4649      	mov	r1, r9
 8006dec:	414b      	adcs	r3, r1
 8006dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006dfc:	4659      	mov	r1, fp
 8006dfe:	00cb      	lsls	r3, r1, #3
 8006e00:	4651      	mov	r1, sl
 8006e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e06:	4651      	mov	r1, sl
 8006e08:	00ca      	lsls	r2, r1, #3
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4642      	mov	r2, r8
 8006e12:	189b      	adds	r3, r3, r2
 8006e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e18:	464b      	mov	r3, r9
 8006e1a:	460a      	mov	r2, r1
 8006e1c:	eb42 0303 	adc.w	r3, r2, r3
 8006e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e38:	460b      	mov	r3, r1
 8006e3a:	18db      	adds	r3, r3, r3
 8006e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e3e:	4613      	mov	r3, r2
 8006e40:	eb42 0303 	adc.w	r3, r2, r3
 8006e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e4e:	f7f9 fa47 	bl	80002e0 <__aeabi_uldivmod>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4b0d      	ldr	r3, [pc, #52]	@ (8006e8c <UART_SetConfig+0x2d4>)
 8006e58:	fba3 1302 	umull	r1, r3, r3, r2
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	2164      	movs	r1, #100	@ 0x64
 8006e60:	fb01 f303 	mul.w	r3, r1, r3
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	3332      	adds	r3, #50	@ 0x32
 8006e6a:	4a08      	ldr	r2, [pc, #32]	@ (8006e8c <UART_SetConfig+0x2d4>)
 8006e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e70:	095b      	lsrs	r3, r3, #5
 8006e72:	f003 0207 	and.w	r2, r3, #7
 8006e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4422      	add	r2, r4
 8006e7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e80:	e106      	b.n	8007090 <UART_SetConfig+0x4d8>
 8006e82:	bf00      	nop
 8006e84:	40011000 	.word	0x40011000
 8006e88:	40011400 	.word	0x40011400
 8006e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ea2:	4642      	mov	r2, r8
 8006ea4:	464b      	mov	r3, r9
 8006ea6:	1891      	adds	r1, r2, r2
 8006ea8:	6239      	str	r1, [r7, #32]
 8006eaa:	415b      	adcs	r3, r3
 8006eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eb2:	4641      	mov	r1, r8
 8006eb4:	1854      	adds	r4, r2, r1
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	eb43 0501 	adc.w	r5, r3, r1
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	00eb      	lsls	r3, r5, #3
 8006ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eca:	00e2      	lsls	r2, r4, #3
 8006ecc:	4614      	mov	r4, r2
 8006ece:	461d      	mov	r5, r3
 8006ed0:	4643      	mov	r3, r8
 8006ed2:	18e3      	adds	r3, r4, r3
 8006ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ed8:	464b      	mov	r3, r9
 8006eda:	eb45 0303 	adc.w	r3, r5, r3
 8006ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006efe:	4629      	mov	r1, r5
 8006f00:	008b      	lsls	r3, r1, #2
 8006f02:	4621      	mov	r1, r4
 8006f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f08:	4621      	mov	r1, r4
 8006f0a:	008a      	lsls	r2, r1, #2
 8006f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f10:	f7f9 f9e6 	bl	80002e0 <__aeabi_uldivmod>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4b60      	ldr	r3, [pc, #384]	@ (800709c <UART_SetConfig+0x4e4>)
 8006f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	011c      	lsls	r4, r3, #4
 8006f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f34:	4642      	mov	r2, r8
 8006f36:	464b      	mov	r3, r9
 8006f38:	1891      	adds	r1, r2, r2
 8006f3a:	61b9      	str	r1, [r7, #24]
 8006f3c:	415b      	adcs	r3, r3
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f44:	4641      	mov	r1, r8
 8006f46:	1851      	adds	r1, r2, r1
 8006f48:	6139      	str	r1, [r7, #16]
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	414b      	adcs	r3, r1
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f5c:	4659      	mov	r1, fp
 8006f5e:	00cb      	lsls	r3, r1, #3
 8006f60:	4651      	mov	r1, sl
 8006f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f66:	4651      	mov	r1, sl
 8006f68:	00ca      	lsls	r2, r1, #3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4642      	mov	r2, r8
 8006f72:	189b      	adds	r3, r3, r2
 8006f74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f78:	464b      	mov	r3, r9
 8006f7a:	460a      	mov	r2, r1
 8006f7c:	eb42 0303 	adc.w	r3, r2, r3
 8006f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	008b      	lsls	r3, r1, #2
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	008a      	lsls	r2, r1, #2
 8006faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fae:	f7f9 f997 	bl	80002e0 <__aeabi_uldivmod>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	4b38      	ldr	r3, [pc, #224]	@ (800709c <UART_SetConfig+0x4e4>)
 8006fba:	fba3 2301 	umull	r2, r3, r3, r1
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	2264      	movs	r2, #100	@ 0x64
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	1acb      	subs	r3, r1, r3
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	3332      	adds	r3, #50	@ 0x32
 8006fcc:	4a33      	ldr	r2, [pc, #204]	@ (800709c <UART_SetConfig+0x4e4>)
 8006fce:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fd8:	441c      	add	r4, r3
 8006fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fde:	2200      	movs	r2, #0
 8006fe0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fe2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fe4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fe8:	4642      	mov	r2, r8
 8006fea:	464b      	mov	r3, r9
 8006fec:	1891      	adds	r1, r2, r2
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	415b      	adcs	r3, r3
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	1851      	adds	r1, r2, r1
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	4649      	mov	r1, r9
 8007000:	414b      	adcs	r3, r1
 8007002:	607b      	str	r3, [r7, #4]
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007010:	4659      	mov	r1, fp
 8007012:	00cb      	lsls	r3, r1, #3
 8007014:	4651      	mov	r1, sl
 8007016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800701a:	4651      	mov	r1, sl
 800701c:	00ca      	lsls	r2, r1, #3
 800701e:	4610      	mov	r0, r2
 8007020:	4619      	mov	r1, r3
 8007022:	4603      	mov	r3, r0
 8007024:	4642      	mov	r2, r8
 8007026:	189b      	adds	r3, r3, r2
 8007028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800702a:	464b      	mov	r3, r9
 800702c:	460a      	mov	r2, r1
 800702e:	eb42 0303 	adc.w	r3, r2, r3
 8007032:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	663b      	str	r3, [r7, #96]	@ 0x60
 800703e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800704c:	4649      	mov	r1, r9
 800704e:	008b      	lsls	r3, r1, #2
 8007050:	4641      	mov	r1, r8
 8007052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007056:	4641      	mov	r1, r8
 8007058:	008a      	lsls	r2, r1, #2
 800705a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800705e:	f7f9 f93f 	bl	80002e0 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <UART_SetConfig+0x4e4>)
 8007068:	fba3 1302 	umull	r1, r3, r3, r2
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	2164      	movs	r1, #100	@ 0x64
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	3332      	adds	r3, #50	@ 0x32
 800707a:	4a08      	ldr	r2, [pc, #32]	@ (800709c <UART_SetConfig+0x4e4>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	f003 020f 	and.w	r2, r3, #15
 8007086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4422      	add	r2, r4
 800708e:	609a      	str	r2, [r3, #8]
}
 8007090:	bf00      	nop
 8007092:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007096:	46bd      	mov	sp, r7
 8007098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800709c:	51eb851f 	.word	0x51eb851f

080070a0 <atoi>:
 80070a0:	220a      	movs	r2, #10
 80070a2:	2100      	movs	r1, #0
 80070a4:	f000 b87a 	b.w	800719c <strtol>

080070a8 <_strtol_l.constprop.0>:
 80070a8:	2b24      	cmp	r3, #36	@ 0x24
 80070aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ae:	4686      	mov	lr, r0
 80070b0:	4690      	mov	r8, r2
 80070b2:	d801      	bhi.n	80070b8 <_strtol_l.constprop.0+0x10>
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d106      	bne.n	80070c6 <_strtol_l.constprop.0+0x1e>
 80070b8:	f000 fa48 	bl	800754c <__errno>
 80070bc:	2316      	movs	r3, #22
 80070be:	6003      	str	r3, [r0, #0]
 80070c0:	2000      	movs	r0, #0
 80070c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c6:	4834      	ldr	r0, [pc, #208]	@ (8007198 <_strtol_l.constprop.0+0xf0>)
 80070c8:	460d      	mov	r5, r1
 80070ca:	462a      	mov	r2, r5
 80070cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070d0:	5d06      	ldrb	r6, [r0, r4]
 80070d2:	f016 0608 	ands.w	r6, r6, #8
 80070d6:	d1f8      	bne.n	80070ca <_strtol_l.constprop.0+0x22>
 80070d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80070da:	d12d      	bne.n	8007138 <_strtol_l.constprop.0+0x90>
 80070dc:	782c      	ldrb	r4, [r5, #0]
 80070de:	2601      	movs	r6, #1
 80070e0:	1c95      	adds	r5, r2, #2
 80070e2:	f033 0210 	bics.w	r2, r3, #16
 80070e6:	d109      	bne.n	80070fc <_strtol_l.constprop.0+0x54>
 80070e8:	2c30      	cmp	r4, #48	@ 0x30
 80070ea:	d12a      	bne.n	8007142 <_strtol_l.constprop.0+0x9a>
 80070ec:	782a      	ldrb	r2, [r5, #0]
 80070ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070f2:	2a58      	cmp	r2, #88	@ 0x58
 80070f4:	d125      	bne.n	8007142 <_strtol_l.constprop.0+0x9a>
 80070f6:	786c      	ldrb	r4, [r5, #1]
 80070f8:	2310      	movs	r3, #16
 80070fa:	3502      	adds	r5, #2
 80070fc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007100:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007104:	2200      	movs	r2, #0
 8007106:	fbbc f9f3 	udiv	r9, ip, r3
 800710a:	4610      	mov	r0, r2
 800710c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007110:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007114:	2f09      	cmp	r7, #9
 8007116:	d81b      	bhi.n	8007150 <_strtol_l.constprop.0+0xa8>
 8007118:	463c      	mov	r4, r7
 800711a:	42a3      	cmp	r3, r4
 800711c:	dd27      	ble.n	800716e <_strtol_l.constprop.0+0xc6>
 800711e:	1c57      	adds	r7, r2, #1
 8007120:	d007      	beq.n	8007132 <_strtol_l.constprop.0+0x8a>
 8007122:	4581      	cmp	r9, r0
 8007124:	d320      	bcc.n	8007168 <_strtol_l.constprop.0+0xc0>
 8007126:	d101      	bne.n	800712c <_strtol_l.constprop.0+0x84>
 8007128:	45a2      	cmp	sl, r4
 800712a:	db1d      	blt.n	8007168 <_strtol_l.constprop.0+0xc0>
 800712c:	fb00 4003 	mla	r0, r0, r3, r4
 8007130:	2201      	movs	r2, #1
 8007132:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007136:	e7eb      	b.n	8007110 <_strtol_l.constprop.0+0x68>
 8007138:	2c2b      	cmp	r4, #43	@ 0x2b
 800713a:	bf04      	itt	eq
 800713c:	782c      	ldrbeq	r4, [r5, #0]
 800713e:	1c95      	addeq	r5, r2, #2
 8007140:	e7cf      	b.n	80070e2 <_strtol_l.constprop.0+0x3a>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1da      	bne.n	80070fc <_strtol_l.constprop.0+0x54>
 8007146:	2c30      	cmp	r4, #48	@ 0x30
 8007148:	bf0c      	ite	eq
 800714a:	2308      	moveq	r3, #8
 800714c:	230a      	movne	r3, #10
 800714e:	e7d5      	b.n	80070fc <_strtol_l.constprop.0+0x54>
 8007150:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007154:	2f19      	cmp	r7, #25
 8007156:	d801      	bhi.n	800715c <_strtol_l.constprop.0+0xb4>
 8007158:	3c37      	subs	r4, #55	@ 0x37
 800715a:	e7de      	b.n	800711a <_strtol_l.constprop.0+0x72>
 800715c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007160:	2f19      	cmp	r7, #25
 8007162:	d804      	bhi.n	800716e <_strtol_l.constprop.0+0xc6>
 8007164:	3c57      	subs	r4, #87	@ 0x57
 8007166:	e7d8      	b.n	800711a <_strtol_l.constprop.0+0x72>
 8007168:	f04f 32ff 	mov.w	r2, #4294967295
 800716c:	e7e1      	b.n	8007132 <_strtol_l.constprop.0+0x8a>
 800716e:	1c53      	adds	r3, r2, #1
 8007170:	d108      	bne.n	8007184 <_strtol_l.constprop.0+0xdc>
 8007172:	2322      	movs	r3, #34	@ 0x22
 8007174:	f8ce 3000 	str.w	r3, [lr]
 8007178:	4660      	mov	r0, ip
 800717a:	f1b8 0f00 	cmp.w	r8, #0
 800717e:	d0a0      	beq.n	80070c2 <_strtol_l.constprop.0+0x1a>
 8007180:	1e69      	subs	r1, r5, #1
 8007182:	e006      	b.n	8007192 <_strtol_l.constprop.0+0xea>
 8007184:	b106      	cbz	r6, 8007188 <_strtol_l.constprop.0+0xe0>
 8007186:	4240      	negs	r0, r0
 8007188:	f1b8 0f00 	cmp.w	r8, #0
 800718c:	d099      	beq.n	80070c2 <_strtol_l.constprop.0+0x1a>
 800718e:	2a00      	cmp	r2, #0
 8007190:	d1f6      	bne.n	8007180 <_strtol_l.constprop.0+0xd8>
 8007192:	f8c8 1000 	str.w	r1, [r8]
 8007196:	e794      	b.n	80070c2 <_strtol_l.constprop.0+0x1a>
 8007198:	08008601 	.word	0x08008601

0800719c <strtol>:
 800719c:	4613      	mov	r3, r2
 800719e:	460a      	mov	r2, r1
 80071a0:	4601      	mov	r1, r0
 80071a2:	4802      	ldr	r0, [pc, #8]	@ (80071ac <strtol+0x10>)
 80071a4:	6800      	ldr	r0, [r0, #0]
 80071a6:	f7ff bf7f 	b.w	80070a8 <_strtol_l.constprop.0>
 80071aa:	bf00      	nop
 80071ac:	20000020 	.word	0x20000020

080071b0 <std>:
 80071b0:	2300      	movs	r3, #0
 80071b2:	b510      	push	{r4, lr}
 80071b4:	4604      	mov	r4, r0
 80071b6:	e9c0 3300 	strd	r3, r3, [r0]
 80071ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071be:	6083      	str	r3, [r0, #8]
 80071c0:	8181      	strh	r1, [r0, #12]
 80071c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80071c4:	81c2      	strh	r2, [r0, #14]
 80071c6:	6183      	str	r3, [r0, #24]
 80071c8:	4619      	mov	r1, r3
 80071ca:	2208      	movs	r2, #8
 80071cc:	305c      	adds	r0, #92	@ 0x5c
 80071ce:	f000 f93d 	bl	800744c <memset>
 80071d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007208 <std+0x58>)
 80071d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80071d6:	4b0d      	ldr	r3, [pc, #52]	@ (800720c <std+0x5c>)
 80071d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <std+0x60>)
 80071dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80071de:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <std+0x64>)
 80071e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80071e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007218 <std+0x68>)
 80071e4:	6224      	str	r4, [r4, #32]
 80071e6:	429c      	cmp	r4, r3
 80071e8:	d006      	beq.n	80071f8 <std+0x48>
 80071ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071ee:	4294      	cmp	r4, r2
 80071f0:	d002      	beq.n	80071f8 <std+0x48>
 80071f2:	33d0      	adds	r3, #208	@ 0xd0
 80071f4:	429c      	cmp	r4, r3
 80071f6:	d105      	bne.n	8007204 <std+0x54>
 80071f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007200:	f000 b9ce 	b.w	80075a0 <__retarget_lock_init_recursive>
 8007204:	bd10      	pop	{r4, pc}
 8007206:	bf00      	nop
 8007208:	08007385 	.word	0x08007385
 800720c:	080073a7 	.word	0x080073a7
 8007210:	080073df 	.word	0x080073df
 8007214:	08007403 	.word	0x08007403
 8007218:	20001998 	.word	0x20001998

0800721c <stdio_exit_handler>:
 800721c:	4a02      	ldr	r2, [pc, #8]	@ (8007228 <stdio_exit_handler+0xc>)
 800721e:	4903      	ldr	r1, [pc, #12]	@ (800722c <stdio_exit_handler+0x10>)
 8007220:	4803      	ldr	r0, [pc, #12]	@ (8007230 <stdio_exit_handler+0x14>)
 8007222:	f000 b869 	b.w	80072f8 <_fwalk_sglue>
 8007226:	bf00      	nop
 8007228:	20000014 	.word	0x20000014
 800722c:	08007e6d 	.word	0x08007e6d
 8007230:	20000024 	.word	0x20000024

08007234 <cleanup_stdio>:
 8007234:	6841      	ldr	r1, [r0, #4]
 8007236:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <cleanup_stdio+0x34>)
 8007238:	4299      	cmp	r1, r3
 800723a:	b510      	push	{r4, lr}
 800723c:	4604      	mov	r4, r0
 800723e:	d001      	beq.n	8007244 <cleanup_stdio+0x10>
 8007240:	f000 fe14 	bl	8007e6c <_fflush_r>
 8007244:	68a1      	ldr	r1, [r4, #8]
 8007246:	4b09      	ldr	r3, [pc, #36]	@ (800726c <cleanup_stdio+0x38>)
 8007248:	4299      	cmp	r1, r3
 800724a:	d002      	beq.n	8007252 <cleanup_stdio+0x1e>
 800724c:	4620      	mov	r0, r4
 800724e:	f000 fe0d 	bl	8007e6c <_fflush_r>
 8007252:	68e1      	ldr	r1, [r4, #12]
 8007254:	4b06      	ldr	r3, [pc, #24]	@ (8007270 <cleanup_stdio+0x3c>)
 8007256:	4299      	cmp	r1, r3
 8007258:	d004      	beq.n	8007264 <cleanup_stdio+0x30>
 800725a:	4620      	mov	r0, r4
 800725c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007260:	f000 be04 	b.w	8007e6c <_fflush_r>
 8007264:	bd10      	pop	{r4, pc}
 8007266:	bf00      	nop
 8007268:	20001998 	.word	0x20001998
 800726c:	20001a00 	.word	0x20001a00
 8007270:	20001a68 	.word	0x20001a68

08007274 <global_stdio_init.part.0>:
 8007274:	b510      	push	{r4, lr}
 8007276:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <global_stdio_init.part.0+0x30>)
 8007278:	4c0b      	ldr	r4, [pc, #44]	@ (80072a8 <global_stdio_init.part.0+0x34>)
 800727a:	4a0c      	ldr	r2, [pc, #48]	@ (80072ac <global_stdio_init.part.0+0x38>)
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	4620      	mov	r0, r4
 8007280:	2200      	movs	r2, #0
 8007282:	2104      	movs	r1, #4
 8007284:	f7ff ff94 	bl	80071b0 <std>
 8007288:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800728c:	2201      	movs	r2, #1
 800728e:	2109      	movs	r1, #9
 8007290:	f7ff ff8e 	bl	80071b0 <std>
 8007294:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007298:	2202      	movs	r2, #2
 800729a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800729e:	2112      	movs	r1, #18
 80072a0:	f7ff bf86 	b.w	80071b0 <std>
 80072a4:	20001ad0 	.word	0x20001ad0
 80072a8:	20001998 	.word	0x20001998
 80072ac:	0800721d 	.word	0x0800721d

080072b0 <__sfp_lock_acquire>:
 80072b0:	4801      	ldr	r0, [pc, #4]	@ (80072b8 <__sfp_lock_acquire+0x8>)
 80072b2:	f000 b976 	b.w	80075a2 <__retarget_lock_acquire_recursive>
 80072b6:	bf00      	nop
 80072b8:	20001ad9 	.word	0x20001ad9

080072bc <__sfp_lock_release>:
 80072bc:	4801      	ldr	r0, [pc, #4]	@ (80072c4 <__sfp_lock_release+0x8>)
 80072be:	f000 b971 	b.w	80075a4 <__retarget_lock_release_recursive>
 80072c2:	bf00      	nop
 80072c4:	20001ad9 	.word	0x20001ad9

080072c8 <__sinit>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	4604      	mov	r4, r0
 80072cc:	f7ff fff0 	bl	80072b0 <__sfp_lock_acquire>
 80072d0:	6a23      	ldr	r3, [r4, #32]
 80072d2:	b11b      	cbz	r3, 80072dc <__sinit+0x14>
 80072d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d8:	f7ff bff0 	b.w	80072bc <__sfp_lock_release>
 80072dc:	4b04      	ldr	r3, [pc, #16]	@ (80072f0 <__sinit+0x28>)
 80072de:	6223      	str	r3, [r4, #32]
 80072e0:	4b04      	ldr	r3, [pc, #16]	@ (80072f4 <__sinit+0x2c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1f5      	bne.n	80072d4 <__sinit+0xc>
 80072e8:	f7ff ffc4 	bl	8007274 <global_stdio_init.part.0>
 80072ec:	e7f2      	b.n	80072d4 <__sinit+0xc>
 80072ee:	bf00      	nop
 80072f0:	08007235 	.word	0x08007235
 80072f4:	20001ad0 	.word	0x20001ad0

080072f8 <_fwalk_sglue>:
 80072f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072fc:	4607      	mov	r7, r0
 80072fe:	4688      	mov	r8, r1
 8007300:	4614      	mov	r4, r2
 8007302:	2600      	movs	r6, #0
 8007304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007308:	f1b9 0901 	subs.w	r9, r9, #1
 800730c:	d505      	bpl.n	800731a <_fwalk_sglue+0x22>
 800730e:	6824      	ldr	r4, [r4, #0]
 8007310:	2c00      	cmp	r4, #0
 8007312:	d1f7      	bne.n	8007304 <_fwalk_sglue+0xc>
 8007314:	4630      	mov	r0, r6
 8007316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800731a:	89ab      	ldrh	r3, [r5, #12]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d907      	bls.n	8007330 <_fwalk_sglue+0x38>
 8007320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007324:	3301      	adds	r3, #1
 8007326:	d003      	beq.n	8007330 <_fwalk_sglue+0x38>
 8007328:	4629      	mov	r1, r5
 800732a:	4638      	mov	r0, r7
 800732c:	47c0      	blx	r8
 800732e:	4306      	orrs	r6, r0
 8007330:	3568      	adds	r5, #104	@ 0x68
 8007332:	e7e9      	b.n	8007308 <_fwalk_sglue+0x10>

08007334 <getchar>:
 8007334:	4b02      	ldr	r3, [pc, #8]	@ (8007340 <getchar+0xc>)
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	6841      	ldr	r1, [r0, #4]
 800733a:	f000 bdbf 	b.w	8007ebc <_getc_r>
 800733e:	bf00      	nop
 8007340:	20000020 	.word	0x20000020

08007344 <siprintf>:
 8007344:	b40e      	push	{r1, r2, r3}
 8007346:	b500      	push	{lr}
 8007348:	b09c      	sub	sp, #112	@ 0x70
 800734a:	ab1d      	add	r3, sp, #116	@ 0x74
 800734c:	9002      	str	r0, [sp, #8]
 800734e:	9006      	str	r0, [sp, #24]
 8007350:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007354:	4809      	ldr	r0, [pc, #36]	@ (800737c <siprintf+0x38>)
 8007356:	9107      	str	r1, [sp, #28]
 8007358:	9104      	str	r1, [sp, #16]
 800735a:	4909      	ldr	r1, [pc, #36]	@ (8007380 <siprintf+0x3c>)
 800735c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007360:	9105      	str	r1, [sp, #20]
 8007362:	6800      	ldr	r0, [r0, #0]
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	a902      	add	r1, sp, #8
 8007368:	f000 fa72 	bl	8007850 <_svfiprintf_r>
 800736c:	9b02      	ldr	r3, [sp, #8]
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]
 8007372:	b01c      	add	sp, #112	@ 0x70
 8007374:	f85d eb04 	ldr.w	lr, [sp], #4
 8007378:	b003      	add	sp, #12
 800737a:	4770      	bx	lr
 800737c:	20000020 	.word	0x20000020
 8007380:	ffff0208 	.word	0xffff0208

08007384 <__sread>:
 8007384:	b510      	push	{r4, lr}
 8007386:	460c      	mov	r4, r1
 8007388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800738c:	f000 f8ba 	bl	8007504 <_read_r>
 8007390:	2800      	cmp	r0, #0
 8007392:	bfab      	itete	ge
 8007394:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007396:	89a3      	ldrhlt	r3, [r4, #12]
 8007398:	181b      	addge	r3, r3, r0
 800739a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800739e:	bfac      	ite	ge
 80073a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073a2:	81a3      	strhlt	r3, [r4, #12]
 80073a4:	bd10      	pop	{r4, pc}

080073a6 <__swrite>:
 80073a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073aa:	461f      	mov	r7, r3
 80073ac:	898b      	ldrh	r3, [r1, #12]
 80073ae:	05db      	lsls	r3, r3, #23
 80073b0:	4605      	mov	r5, r0
 80073b2:	460c      	mov	r4, r1
 80073b4:	4616      	mov	r6, r2
 80073b6:	d505      	bpl.n	80073c4 <__swrite+0x1e>
 80073b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073bc:	2302      	movs	r3, #2
 80073be:	2200      	movs	r2, #0
 80073c0:	f000 f88e 	bl	80074e0 <_lseek_r>
 80073c4:	89a3      	ldrh	r3, [r4, #12]
 80073c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073ce:	81a3      	strh	r3, [r4, #12]
 80073d0:	4632      	mov	r2, r6
 80073d2:	463b      	mov	r3, r7
 80073d4:	4628      	mov	r0, r5
 80073d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073da:	f000 b8a5 	b.w	8007528 <_write_r>

080073de <__sseek>:
 80073de:	b510      	push	{r4, lr}
 80073e0:	460c      	mov	r4, r1
 80073e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e6:	f000 f87b 	bl	80074e0 <_lseek_r>
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	bf15      	itete	ne
 80073f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073fa:	81a3      	strheq	r3, [r4, #12]
 80073fc:	bf18      	it	ne
 80073fe:	81a3      	strhne	r3, [r4, #12]
 8007400:	bd10      	pop	{r4, pc}

08007402 <__sclose>:
 8007402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007406:	f000 b85b 	b.w	80074c0 <_close_r>
	...

0800740c <_vsiprintf_r>:
 800740c:	b500      	push	{lr}
 800740e:	b09b      	sub	sp, #108	@ 0x6c
 8007410:	9100      	str	r1, [sp, #0]
 8007412:	9104      	str	r1, [sp, #16]
 8007414:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007418:	9105      	str	r1, [sp, #20]
 800741a:	9102      	str	r1, [sp, #8]
 800741c:	4905      	ldr	r1, [pc, #20]	@ (8007434 <_vsiprintf_r+0x28>)
 800741e:	9103      	str	r1, [sp, #12]
 8007420:	4669      	mov	r1, sp
 8007422:	f000 fa15 	bl	8007850 <_svfiprintf_r>
 8007426:	9b00      	ldr	r3, [sp, #0]
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	b01b      	add	sp, #108	@ 0x6c
 800742e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007432:	bf00      	nop
 8007434:	ffff0208 	.word	0xffff0208

08007438 <vsiprintf>:
 8007438:	4613      	mov	r3, r2
 800743a:	460a      	mov	r2, r1
 800743c:	4601      	mov	r1, r0
 800743e:	4802      	ldr	r0, [pc, #8]	@ (8007448 <vsiprintf+0x10>)
 8007440:	6800      	ldr	r0, [r0, #0]
 8007442:	f7ff bfe3 	b.w	800740c <_vsiprintf_r>
 8007446:	bf00      	nop
 8007448:	20000020 	.word	0x20000020

0800744c <memset>:
 800744c:	4402      	add	r2, r0
 800744e:	4603      	mov	r3, r0
 8007450:	4293      	cmp	r3, r2
 8007452:	d100      	bne.n	8007456 <memset+0xa>
 8007454:	4770      	bx	lr
 8007456:	f803 1b01 	strb.w	r1, [r3], #1
 800745a:	e7f9      	b.n	8007450 <memset+0x4>

0800745c <strchr>:
 800745c:	b2c9      	uxtb	r1, r1
 800745e:	4603      	mov	r3, r0
 8007460:	4618      	mov	r0, r3
 8007462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007466:	b112      	cbz	r2, 800746e <strchr+0x12>
 8007468:	428a      	cmp	r2, r1
 800746a:	d1f9      	bne.n	8007460 <strchr+0x4>
 800746c:	4770      	bx	lr
 800746e:	2900      	cmp	r1, #0
 8007470:	bf18      	it	ne
 8007472:	2000      	movne	r0, #0
 8007474:	4770      	bx	lr

08007476 <strncmp>:
 8007476:	b510      	push	{r4, lr}
 8007478:	b16a      	cbz	r2, 8007496 <strncmp+0x20>
 800747a:	3901      	subs	r1, #1
 800747c:	1884      	adds	r4, r0, r2
 800747e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007482:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007486:	429a      	cmp	r2, r3
 8007488:	d103      	bne.n	8007492 <strncmp+0x1c>
 800748a:	42a0      	cmp	r0, r4
 800748c:	d001      	beq.n	8007492 <strncmp+0x1c>
 800748e:	2a00      	cmp	r2, #0
 8007490:	d1f5      	bne.n	800747e <strncmp+0x8>
 8007492:	1ad0      	subs	r0, r2, r3
 8007494:	bd10      	pop	{r4, pc}
 8007496:	4610      	mov	r0, r2
 8007498:	e7fc      	b.n	8007494 <strncmp+0x1e>

0800749a <strncpy>:
 800749a:	b510      	push	{r4, lr}
 800749c:	3901      	subs	r1, #1
 800749e:	4603      	mov	r3, r0
 80074a0:	b132      	cbz	r2, 80074b0 <strncpy+0x16>
 80074a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80074a6:	f803 4b01 	strb.w	r4, [r3], #1
 80074aa:	3a01      	subs	r2, #1
 80074ac:	2c00      	cmp	r4, #0
 80074ae:	d1f7      	bne.n	80074a0 <strncpy+0x6>
 80074b0:	441a      	add	r2, r3
 80074b2:	2100      	movs	r1, #0
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d100      	bne.n	80074ba <strncpy+0x20>
 80074b8:	bd10      	pop	{r4, pc}
 80074ba:	f803 1b01 	strb.w	r1, [r3], #1
 80074be:	e7f9      	b.n	80074b4 <strncpy+0x1a>

080074c0 <_close_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4d06      	ldr	r5, [pc, #24]	@ (80074dc <_close_r+0x1c>)
 80074c4:	2300      	movs	r3, #0
 80074c6:	4604      	mov	r4, r0
 80074c8:	4608      	mov	r0, r1
 80074ca:	602b      	str	r3, [r5, #0]
 80074cc:	f7fa f9cf 	bl	800186e <_close>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_close_r+0x1a>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_close_r+0x1a>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20001ad4 	.word	0x20001ad4

080074e0 <_lseek_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d07      	ldr	r5, [pc, #28]	@ (8007500 <_lseek_r+0x20>)
 80074e4:	4604      	mov	r4, r0
 80074e6:	4608      	mov	r0, r1
 80074e8:	4611      	mov	r1, r2
 80074ea:	2200      	movs	r2, #0
 80074ec:	602a      	str	r2, [r5, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f7fa f9e4 	bl	80018bc <_lseek>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_lseek_r+0x1e>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_lseek_r+0x1e>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	20001ad4 	.word	0x20001ad4

08007504 <_read_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4d07      	ldr	r5, [pc, #28]	@ (8007524 <_read_r+0x20>)
 8007508:	4604      	mov	r4, r0
 800750a:	4608      	mov	r0, r1
 800750c:	4611      	mov	r1, r2
 800750e:	2200      	movs	r2, #0
 8007510:	602a      	str	r2, [r5, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	f7fa f972 	bl	80017fc <_read>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_read_r+0x1e>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_read_r+0x1e>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	20001ad4 	.word	0x20001ad4

08007528 <_write_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	@ (8007548 <_write_r+0x20>)
 800752c:	4604      	mov	r4, r0
 800752e:	4608      	mov	r0, r1
 8007530:	4611      	mov	r1, r2
 8007532:	2200      	movs	r2, #0
 8007534:	602a      	str	r2, [r5, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	f7fa f97d 	bl	8001836 <_write>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_write_r+0x1e>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_write_r+0x1e>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	20001ad4 	.word	0x20001ad4

0800754c <__errno>:
 800754c:	4b01      	ldr	r3, [pc, #4]	@ (8007554 <__errno+0x8>)
 800754e:	6818      	ldr	r0, [r3, #0]
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	20000020 	.word	0x20000020

08007558 <__libc_init_array>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	4d0d      	ldr	r5, [pc, #52]	@ (8007590 <__libc_init_array+0x38>)
 800755c:	4c0d      	ldr	r4, [pc, #52]	@ (8007594 <__libc_init_array+0x3c>)
 800755e:	1b64      	subs	r4, r4, r5
 8007560:	10a4      	asrs	r4, r4, #2
 8007562:	2600      	movs	r6, #0
 8007564:	42a6      	cmp	r6, r4
 8007566:	d109      	bne.n	800757c <__libc_init_array+0x24>
 8007568:	4d0b      	ldr	r5, [pc, #44]	@ (8007598 <__libc_init_array+0x40>)
 800756a:	4c0c      	ldr	r4, [pc, #48]	@ (800759c <__libc_init_array+0x44>)
 800756c:	f000 ffdc 	bl	8008528 <_init>
 8007570:	1b64      	subs	r4, r4, r5
 8007572:	10a4      	asrs	r4, r4, #2
 8007574:	2600      	movs	r6, #0
 8007576:	42a6      	cmp	r6, r4
 8007578:	d105      	bne.n	8007586 <__libc_init_array+0x2e>
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007580:	4798      	blx	r3
 8007582:	3601      	adds	r6, #1
 8007584:	e7ee      	b.n	8007564 <__libc_init_array+0xc>
 8007586:	f855 3b04 	ldr.w	r3, [r5], #4
 800758a:	4798      	blx	r3
 800758c:	3601      	adds	r6, #1
 800758e:	e7f2      	b.n	8007576 <__libc_init_array+0x1e>
 8007590:	08008774 	.word	0x08008774
 8007594:	08008774 	.word	0x08008774
 8007598:	08008774 	.word	0x08008774
 800759c:	08008778 	.word	0x08008778

080075a0 <__retarget_lock_init_recursive>:
 80075a0:	4770      	bx	lr

080075a2 <__retarget_lock_acquire_recursive>:
 80075a2:	4770      	bx	lr

080075a4 <__retarget_lock_release_recursive>:
 80075a4:	4770      	bx	lr
	...

080075a8 <_free_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4605      	mov	r5, r0
 80075ac:	2900      	cmp	r1, #0
 80075ae:	d041      	beq.n	8007634 <_free_r+0x8c>
 80075b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075b4:	1f0c      	subs	r4, r1, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	bfb8      	it	lt
 80075ba:	18e4      	addlt	r4, r4, r3
 80075bc:	f000 f8e0 	bl	8007780 <__malloc_lock>
 80075c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007638 <_free_r+0x90>)
 80075c2:	6813      	ldr	r3, [r2, #0]
 80075c4:	b933      	cbnz	r3, 80075d4 <_free_r+0x2c>
 80075c6:	6063      	str	r3, [r4, #4]
 80075c8:	6014      	str	r4, [r2, #0]
 80075ca:	4628      	mov	r0, r5
 80075cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075d0:	f000 b8dc 	b.w	800778c <__malloc_unlock>
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d908      	bls.n	80075ea <_free_r+0x42>
 80075d8:	6820      	ldr	r0, [r4, #0]
 80075da:	1821      	adds	r1, r4, r0
 80075dc:	428b      	cmp	r3, r1
 80075de:	bf01      	itttt	eq
 80075e0:	6819      	ldreq	r1, [r3, #0]
 80075e2:	685b      	ldreq	r3, [r3, #4]
 80075e4:	1809      	addeq	r1, r1, r0
 80075e6:	6021      	streq	r1, [r4, #0]
 80075e8:	e7ed      	b.n	80075c6 <_free_r+0x1e>
 80075ea:	461a      	mov	r2, r3
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	b10b      	cbz	r3, 80075f4 <_free_r+0x4c>
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d9fa      	bls.n	80075ea <_free_r+0x42>
 80075f4:	6811      	ldr	r1, [r2, #0]
 80075f6:	1850      	adds	r0, r2, r1
 80075f8:	42a0      	cmp	r0, r4
 80075fa:	d10b      	bne.n	8007614 <_free_r+0x6c>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	4401      	add	r1, r0
 8007600:	1850      	adds	r0, r2, r1
 8007602:	4283      	cmp	r3, r0
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	d1e0      	bne.n	80075ca <_free_r+0x22>
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	6053      	str	r3, [r2, #4]
 800760e:	4408      	add	r0, r1
 8007610:	6010      	str	r0, [r2, #0]
 8007612:	e7da      	b.n	80075ca <_free_r+0x22>
 8007614:	d902      	bls.n	800761c <_free_r+0x74>
 8007616:	230c      	movs	r3, #12
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	e7d6      	b.n	80075ca <_free_r+0x22>
 800761c:	6820      	ldr	r0, [r4, #0]
 800761e:	1821      	adds	r1, r4, r0
 8007620:	428b      	cmp	r3, r1
 8007622:	bf04      	itt	eq
 8007624:	6819      	ldreq	r1, [r3, #0]
 8007626:	685b      	ldreq	r3, [r3, #4]
 8007628:	6063      	str	r3, [r4, #4]
 800762a:	bf04      	itt	eq
 800762c:	1809      	addeq	r1, r1, r0
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	6054      	str	r4, [r2, #4]
 8007632:	e7ca      	b.n	80075ca <_free_r+0x22>
 8007634:	bd38      	pop	{r3, r4, r5, pc}
 8007636:	bf00      	nop
 8007638:	20001ae0 	.word	0x20001ae0

0800763c <sbrk_aligned>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	4e0f      	ldr	r6, [pc, #60]	@ (800767c <sbrk_aligned+0x40>)
 8007640:	460c      	mov	r4, r1
 8007642:	6831      	ldr	r1, [r6, #0]
 8007644:	4605      	mov	r5, r0
 8007646:	b911      	cbnz	r1, 800764e <sbrk_aligned+0x12>
 8007648:	f000 fc96 	bl	8007f78 <_sbrk_r>
 800764c:	6030      	str	r0, [r6, #0]
 800764e:	4621      	mov	r1, r4
 8007650:	4628      	mov	r0, r5
 8007652:	f000 fc91 	bl	8007f78 <_sbrk_r>
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	d103      	bne.n	8007662 <sbrk_aligned+0x26>
 800765a:	f04f 34ff 	mov.w	r4, #4294967295
 800765e:	4620      	mov	r0, r4
 8007660:	bd70      	pop	{r4, r5, r6, pc}
 8007662:	1cc4      	adds	r4, r0, #3
 8007664:	f024 0403 	bic.w	r4, r4, #3
 8007668:	42a0      	cmp	r0, r4
 800766a:	d0f8      	beq.n	800765e <sbrk_aligned+0x22>
 800766c:	1a21      	subs	r1, r4, r0
 800766e:	4628      	mov	r0, r5
 8007670:	f000 fc82 	bl	8007f78 <_sbrk_r>
 8007674:	3001      	adds	r0, #1
 8007676:	d1f2      	bne.n	800765e <sbrk_aligned+0x22>
 8007678:	e7ef      	b.n	800765a <sbrk_aligned+0x1e>
 800767a:	bf00      	nop
 800767c:	20001adc 	.word	0x20001adc

08007680 <_malloc_r>:
 8007680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007684:	1ccd      	adds	r5, r1, #3
 8007686:	f025 0503 	bic.w	r5, r5, #3
 800768a:	3508      	adds	r5, #8
 800768c:	2d0c      	cmp	r5, #12
 800768e:	bf38      	it	cc
 8007690:	250c      	movcc	r5, #12
 8007692:	2d00      	cmp	r5, #0
 8007694:	4606      	mov	r6, r0
 8007696:	db01      	blt.n	800769c <_malloc_r+0x1c>
 8007698:	42a9      	cmp	r1, r5
 800769a:	d904      	bls.n	80076a6 <_malloc_r+0x26>
 800769c:	230c      	movs	r3, #12
 800769e:	6033      	str	r3, [r6, #0]
 80076a0:	2000      	movs	r0, #0
 80076a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800777c <_malloc_r+0xfc>
 80076aa:	f000 f869 	bl	8007780 <__malloc_lock>
 80076ae:	f8d8 3000 	ldr.w	r3, [r8]
 80076b2:	461c      	mov	r4, r3
 80076b4:	bb44      	cbnz	r4, 8007708 <_malloc_r+0x88>
 80076b6:	4629      	mov	r1, r5
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7ff ffbf 	bl	800763c <sbrk_aligned>
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	4604      	mov	r4, r0
 80076c2:	d158      	bne.n	8007776 <_malloc_r+0xf6>
 80076c4:	f8d8 4000 	ldr.w	r4, [r8]
 80076c8:	4627      	mov	r7, r4
 80076ca:	2f00      	cmp	r7, #0
 80076cc:	d143      	bne.n	8007756 <_malloc_r+0xd6>
 80076ce:	2c00      	cmp	r4, #0
 80076d0:	d04b      	beq.n	800776a <_malloc_r+0xea>
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	4639      	mov	r1, r7
 80076d6:	4630      	mov	r0, r6
 80076d8:	eb04 0903 	add.w	r9, r4, r3
 80076dc:	f000 fc4c 	bl	8007f78 <_sbrk_r>
 80076e0:	4581      	cmp	r9, r0
 80076e2:	d142      	bne.n	800776a <_malloc_r+0xea>
 80076e4:	6821      	ldr	r1, [r4, #0]
 80076e6:	1a6d      	subs	r5, r5, r1
 80076e8:	4629      	mov	r1, r5
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7ff ffa6 	bl	800763c <sbrk_aligned>
 80076f0:	3001      	adds	r0, #1
 80076f2:	d03a      	beq.n	800776a <_malloc_r+0xea>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	442b      	add	r3, r5
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	f8d8 3000 	ldr.w	r3, [r8]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	bb62      	cbnz	r2, 800775c <_malloc_r+0xdc>
 8007702:	f8c8 7000 	str.w	r7, [r8]
 8007706:	e00f      	b.n	8007728 <_malloc_r+0xa8>
 8007708:	6822      	ldr	r2, [r4, #0]
 800770a:	1b52      	subs	r2, r2, r5
 800770c:	d420      	bmi.n	8007750 <_malloc_r+0xd0>
 800770e:	2a0b      	cmp	r2, #11
 8007710:	d917      	bls.n	8007742 <_malloc_r+0xc2>
 8007712:	1961      	adds	r1, r4, r5
 8007714:	42a3      	cmp	r3, r4
 8007716:	6025      	str	r5, [r4, #0]
 8007718:	bf18      	it	ne
 800771a:	6059      	strne	r1, [r3, #4]
 800771c:	6863      	ldr	r3, [r4, #4]
 800771e:	bf08      	it	eq
 8007720:	f8c8 1000 	streq.w	r1, [r8]
 8007724:	5162      	str	r2, [r4, r5]
 8007726:	604b      	str	r3, [r1, #4]
 8007728:	4630      	mov	r0, r6
 800772a:	f000 f82f 	bl	800778c <__malloc_unlock>
 800772e:	f104 000b 	add.w	r0, r4, #11
 8007732:	1d23      	adds	r3, r4, #4
 8007734:	f020 0007 	bic.w	r0, r0, #7
 8007738:	1ac2      	subs	r2, r0, r3
 800773a:	bf1c      	itt	ne
 800773c:	1a1b      	subne	r3, r3, r0
 800773e:	50a3      	strne	r3, [r4, r2]
 8007740:	e7af      	b.n	80076a2 <_malloc_r+0x22>
 8007742:	6862      	ldr	r2, [r4, #4]
 8007744:	42a3      	cmp	r3, r4
 8007746:	bf0c      	ite	eq
 8007748:	f8c8 2000 	streq.w	r2, [r8]
 800774c:	605a      	strne	r2, [r3, #4]
 800774e:	e7eb      	b.n	8007728 <_malloc_r+0xa8>
 8007750:	4623      	mov	r3, r4
 8007752:	6864      	ldr	r4, [r4, #4]
 8007754:	e7ae      	b.n	80076b4 <_malloc_r+0x34>
 8007756:	463c      	mov	r4, r7
 8007758:	687f      	ldr	r7, [r7, #4]
 800775a:	e7b6      	b.n	80076ca <_malloc_r+0x4a>
 800775c:	461a      	mov	r2, r3
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	42a3      	cmp	r3, r4
 8007762:	d1fb      	bne.n	800775c <_malloc_r+0xdc>
 8007764:	2300      	movs	r3, #0
 8007766:	6053      	str	r3, [r2, #4]
 8007768:	e7de      	b.n	8007728 <_malloc_r+0xa8>
 800776a:	230c      	movs	r3, #12
 800776c:	6033      	str	r3, [r6, #0]
 800776e:	4630      	mov	r0, r6
 8007770:	f000 f80c 	bl	800778c <__malloc_unlock>
 8007774:	e794      	b.n	80076a0 <_malloc_r+0x20>
 8007776:	6005      	str	r5, [r0, #0]
 8007778:	e7d6      	b.n	8007728 <_malloc_r+0xa8>
 800777a:	bf00      	nop
 800777c:	20001ae0 	.word	0x20001ae0

08007780 <__malloc_lock>:
 8007780:	4801      	ldr	r0, [pc, #4]	@ (8007788 <__malloc_lock+0x8>)
 8007782:	f7ff bf0e 	b.w	80075a2 <__retarget_lock_acquire_recursive>
 8007786:	bf00      	nop
 8007788:	20001ad8 	.word	0x20001ad8

0800778c <__malloc_unlock>:
 800778c:	4801      	ldr	r0, [pc, #4]	@ (8007794 <__malloc_unlock+0x8>)
 800778e:	f7ff bf09 	b.w	80075a4 <__retarget_lock_release_recursive>
 8007792:	bf00      	nop
 8007794:	20001ad8 	.word	0x20001ad8

08007798 <__ssputs_r>:
 8007798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	688e      	ldr	r6, [r1, #8]
 800779e:	461f      	mov	r7, r3
 80077a0:	42be      	cmp	r6, r7
 80077a2:	680b      	ldr	r3, [r1, #0]
 80077a4:	4682      	mov	sl, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	4690      	mov	r8, r2
 80077aa:	d82d      	bhi.n	8007808 <__ssputs_r+0x70>
 80077ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077b4:	d026      	beq.n	8007804 <__ssputs_r+0x6c>
 80077b6:	6965      	ldr	r5, [r4, #20]
 80077b8:	6909      	ldr	r1, [r1, #16]
 80077ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077be:	eba3 0901 	sub.w	r9, r3, r1
 80077c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077c6:	1c7b      	adds	r3, r7, #1
 80077c8:	444b      	add	r3, r9
 80077ca:	106d      	asrs	r5, r5, #1
 80077cc:	429d      	cmp	r5, r3
 80077ce:	bf38      	it	cc
 80077d0:	461d      	movcc	r5, r3
 80077d2:	0553      	lsls	r3, r2, #21
 80077d4:	d527      	bpl.n	8007826 <__ssputs_r+0x8e>
 80077d6:	4629      	mov	r1, r5
 80077d8:	f7ff ff52 	bl	8007680 <_malloc_r>
 80077dc:	4606      	mov	r6, r0
 80077de:	b360      	cbz	r0, 800783a <__ssputs_r+0xa2>
 80077e0:	6921      	ldr	r1, [r4, #16]
 80077e2:	464a      	mov	r2, r9
 80077e4:	f000 fbd8 	bl	8007f98 <memcpy>
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f2:	81a3      	strh	r3, [r4, #12]
 80077f4:	6126      	str	r6, [r4, #16]
 80077f6:	6165      	str	r5, [r4, #20]
 80077f8:	444e      	add	r6, r9
 80077fa:	eba5 0509 	sub.w	r5, r5, r9
 80077fe:	6026      	str	r6, [r4, #0]
 8007800:	60a5      	str	r5, [r4, #8]
 8007802:	463e      	mov	r6, r7
 8007804:	42be      	cmp	r6, r7
 8007806:	d900      	bls.n	800780a <__ssputs_r+0x72>
 8007808:	463e      	mov	r6, r7
 800780a:	6820      	ldr	r0, [r4, #0]
 800780c:	4632      	mov	r2, r6
 800780e:	4641      	mov	r1, r8
 8007810:	f000 fb97 	bl	8007f42 <memmove>
 8007814:	68a3      	ldr	r3, [r4, #8]
 8007816:	1b9b      	subs	r3, r3, r6
 8007818:	60a3      	str	r3, [r4, #8]
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	4433      	add	r3, r6
 800781e:	6023      	str	r3, [r4, #0]
 8007820:	2000      	movs	r0, #0
 8007822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007826:	462a      	mov	r2, r5
 8007828:	f000 fbc4 	bl	8007fb4 <_realloc_r>
 800782c:	4606      	mov	r6, r0
 800782e:	2800      	cmp	r0, #0
 8007830:	d1e0      	bne.n	80077f4 <__ssputs_r+0x5c>
 8007832:	6921      	ldr	r1, [r4, #16]
 8007834:	4650      	mov	r0, sl
 8007836:	f7ff feb7 	bl	80075a8 <_free_r>
 800783a:	230c      	movs	r3, #12
 800783c:	f8ca 3000 	str.w	r3, [sl]
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007846:	81a3      	strh	r3, [r4, #12]
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	e7e9      	b.n	8007822 <__ssputs_r+0x8a>
	...

08007850 <_svfiprintf_r>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	4698      	mov	r8, r3
 8007856:	898b      	ldrh	r3, [r1, #12]
 8007858:	061b      	lsls	r3, r3, #24
 800785a:	b09d      	sub	sp, #116	@ 0x74
 800785c:	4607      	mov	r7, r0
 800785e:	460d      	mov	r5, r1
 8007860:	4614      	mov	r4, r2
 8007862:	d510      	bpl.n	8007886 <_svfiprintf_r+0x36>
 8007864:	690b      	ldr	r3, [r1, #16]
 8007866:	b973      	cbnz	r3, 8007886 <_svfiprintf_r+0x36>
 8007868:	2140      	movs	r1, #64	@ 0x40
 800786a:	f7ff ff09 	bl	8007680 <_malloc_r>
 800786e:	6028      	str	r0, [r5, #0]
 8007870:	6128      	str	r0, [r5, #16]
 8007872:	b930      	cbnz	r0, 8007882 <_svfiprintf_r+0x32>
 8007874:	230c      	movs	r3, #12
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	f04f 30ff 	mov.w	r0, #4294967295
 800787c:	b01d      	add	sp, #116	@ 0x74
 800787e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007882:	2340      	movs	r3, #64	@ 0x40
 8007884:	616b      	str	r3, [r5, #20]
 8007886:	2300      	movs	r3, #0
 8007888:	9309      	str	r3, [sp, #36]	@ 0x24
 800788a:	2320      	movs	r3, #32
 800788c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007890:	f8cd 800c 	str.w	r8, [sp, #12]
 8007894:	2330      	movs	r3, #48	@ 0x30
 8007896:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a34 <_svfiprintf_r+0x1e4>
 800789a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800789e:	f04f 0901 	mov.w	r9, #1
 80078a2:	4623      	mov	r3, r4
 80078a4:	469a      	mov	sl, r3
 80078a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078aa:	b10a      	cbz	r2, 80078b0 <_svfiprintf_r+0x60>
 80078ac:	2a25      	cmp	r2, #37	@ 0x25
 80078ae:	d1f9      	bne.n	80078a4 <_svfiprintf_r+0x54>
 80078b0:	ebba 0b04 	subs.w	fp, sl, r4
 80078b4:	d00b      	beq.n	80078ce <_svfiprintf_r+0x7e>
 80078b6:	465b      	mov	r3, fp
 80078b8:	4622      	mov	r2, r4
 80078ba:	4629      	mov	r1, r5
 80078bc:	4638      	mov	r0, r7
 80078be:	f7ff ff6b 	bl	8007798 <__ssputs_r>
 80078c2:	3001      	adds	r0, #1
 80078c4:	f000 80a7 	beq.w	8007a16 <_svfiprintf_r+0x1c6>
 80078c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078ca:	445a      	add	r2, fp
 80078cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80078ce:	f89a 3000 	ldrb.w	r3, [sl]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 809f 	beq.w	8007a16 <_svfiprintf_r+0x1c6>
 80078d8:	2300      	movs	r3, #0
 80078da:	f04f 32ff 	mov.w	r2, #4294967295
 80078de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078e2:	f10a 0a01 	add.w	sl, sl, #1
 80078e6:	9304      	str	r3, [sp, #16]
 80078e8:	9307      	str	r3, [sp, #28]
 80078ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80078f0:	4654      	mov	r4, sl
 80078f2:	2205      	movs	r2, #5
 80078f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f8:	484e      	ldr	r0, [pc, #312]	@ (8007a34 <_svfiprintf_r+0x1e4>)
 80078fa:	f7f8 fca1 	bl	8000240 <memchr>
 80078fe:	9a04      	ldr	r2, [sp, #16]
 8007900:	b9d8      	cbnz	r0, 800793a <_svfiprintf_r+0xea>
 8007902:	06d0      	lsls	r0, r2, #27
 8007904:	bf44      	itt	mi
 8007906:	2320      	movmi	r3, #32
 8007908:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800790c:	0711      	lsls	r1, r2, #28
 800790e:	bf44      	itt	mi
 8007910:	232b      	movmi	r3, #43	@ 0x2b
 8007912:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007916:	f89a 3000 	ldrb.w	r3, [sl]
 800791a:	2b2a      	cmp	r3, #42	@ 0x2a
 800791c:	d015      	beq.n	800794a <_svfiprintf_r+0xfa>
 800791e:	9a07      	ldr	r2, [sp, #28]
 8007920:	4654      	mov	r4, sl
 8007922:	2000      	movs	r0, #0
 8007924:	f04f 0c0a 	mov.w	ip, #10
 8007928:	4621      	mov	r1, r4
 800792a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800792e:	3b30      	subs	r3, #48	@ 0x30
 8007930:	2b09      	cmp	r3, #9
 8007932:	d94b      	bls.n	80079cc <_svfiprintf_r+0x17c>
 8007934:	b1b0      	cbz	r0, 8007964 <_svfiprintf_r+0x114>
 8007936:	9207      	str	r2, [sp, #28]
 8007938:	e014      	b.n	8007964 <_svfiprintf_r+0x114>
 800793a:	eba0 0308 	sub.w	r3, r0, r8
 800793e:	fa09 f303 	lsl.w	r3, r9, r3
 8007942:	4313      	orrs	r3, r2
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	46a2      	mov	sl, r4
 8007948:	e7d2      	b.n	80078f0 <_svfiprintf_r+0xa0>
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	1d19      	adds	r1, r3, #4
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	9103      	str	r1, [sp, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	bfbb      	ittet	lt
 8007956:	425b      	neglt	r3, r3
 8007958:	f042 0202 	orrlt.w	r2, r2, #2
 800795c:	9307      	strge	r3, [sp, #28]
 800795e:	9307      	strlt	r3, [sp, #28]
 8007960:	bfb8      	it	lt
 8007962:	9204      	strlt	r2, [sp, #16]
 8007964:	7823      	ldrb	r3, [r4, #0]
 8007966:	2b2e      	cmp	r3, #46	@ 0x2e
 8007968:	d10a      	bne.n	8007980 <_svfiprintf_r+0x130>
 800796a:	7863      	ldrb	r3, [r4, #1]
 800796c:	2b2a      	cmp	r3, #42	@ 0x2a
 800796e:	d132      	bne.n	80079d6 <_svfiprintf_r+0x186>
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	1d1a      	adds	r2, r3, #4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	9203      	str	r2, [sp, #12]
 8007978:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800797c:	3402      	adds	r4, #2
 800797e:	9305      	str	r3, [sp, #20]
 8007980:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a44 <_svfiprintf_r+0x1f4>
 8007984:	7821      	ldrb	r1, [r4, #0]
 8007986:	2203      	movs	r2, #3
 8007988:	4650      	mov	r0, sl
 800798a:	f7f8 fc59 	bl	8000240 <memchr>
 800798e:	b138      	cbz	r0, 80079a0 <_svfiprintf_r+0x150>
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	eba0 000a 	sub.w	r0, r0, sl
 8007996:	2240      	movs	r2, #64	@ 0x40
 8007998:	4082      	lsls	r2, r0
 800799a:	4313      	orrs	r3, r2
 800799c:	3401      	adds	r4, #1
 800799e:	9304      	str	r3, [sp, #16]
 80079a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a4:	4824      	ldr	r0, [pc, #144]	@ (8007a38 <_svfiprintf_r+0x1e8>)
 80079a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079aa:	2206      	movs	r2, #6
 80079ac:	f7f8 fc48 	bl	8000240 <memchr>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d036      	beq.n	8007a22 <_svfiprintf_r+0x1d2>
 80079b4:	4b21      	ldr	r3, [pc, #132]	@ (8007a3c <_svfiprintf_r+0x1ec>)
 80079b6:	bb1b      	cbnz	r3, 8007a00 <_svfiprintf_r+0x1b0>
 80079b8:	9b03      	ldr	r3, [sp, #12]
 80079ba:	3307      	adds	r3, #7
 80079bc:	f023 0307 	bic.w	r3, r3, #7
 80079c0:	3308      	adds	r3, #8
 80079c2:	9303      	str	r3, [sp, #12]
 80079c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c6:	4433      	add	r3, r6
 80079c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ca:	e76a      	b.n	80078a2 <_svfiprintf_r+0x52>
 80079cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80079d0:	460c      	mov	r4, r1
 80079d2:	2001      	movs	r0, #1
 80079d4:	e7a8      	b.n	8007928 <_svfiprintf_r+0xd8>
 80079d6:	2300      	movs	r3, #0
 80079d8:	3401      	adds	r4, #1
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	4619      	mov	r1, r3
 80079de:	f04f 0c0a 	mov.w	ip, #10
 80079e2:	4620      	mov	r0, r4
 80079e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079e8:	3a30      	subs	r2, #48	@ 0x30
 80079ea:	2a09      	cmp	r2, #9
 80079ec:	d903      	bls.n	80079f6 <_svfiprintf_r+0x1a6>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0c6      	beq.n	8007980 <_svfiprintf_r+0x130>
 80079f2:	9105      	str	r1, [sp, #20]
 80079f4:	e7c4      	b.n	8007980 <_svfiprintf_r+0x130>
 80079f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80079fa:	4604      	mov	r4, r0
 80079fc:	2301      	movs	r3, #1
 80079fe:	e7f0      	b.n	80079e2 <_svfiprintf_r+0x192>
 8007a00:	ab03      	add	r3, sp, #12
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	462a      	mov	r2, r5
 8007a06:	4b0e      	ldr	r3, [pc, #56]	@ (8007a40 <_svfiprintf_r+0x1f0>)
 8007a08:	a904      	add	r1, sp, #16
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	f3af 8000 	nop.w
 8007a10:	1c42      	adds	r2, r0, #1
 8007a12:	4606      	mov	r6, r0
 8007a14:	d1d6      	bne.n	80079c4 <_svfiprintf_r+0x174>
 8007a16:	89ab      	ldrh	r3, [r5, #12]
 8007a18:	065b      	lsls	r3, r3, #25
 8007a1a:	f53f af2d 	bmi.w	8007878 <_svfiprintf_r+0x28>
 8007a1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a20:	e72c      	b.n	800787c <_svfiprintf_r+0x2c>
 8007a22:	ab03      	add	r3, sp, #12
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	462a      	mov	r2, r5
 8007a28:	4b05      	ldr	r3, [pc, #20]	@ (8007a40 <_svfiprintf_r+0x1f0>)
 8007a2a:	a904      	add	r1, sp, #16
 8007a2c:	4638      	mov	r0, r7
 8007a2e:	f000 f879 	bl	8007b24 <_printf_i>
 8007a32:	e7ed      	b.n	8007a10 <_svfiprintf_r+0x1c0>
 8007a34:	08008701 	.word	0x08008701
 8007a38:	0800870b 	.word	0x0800870b
 8007a3c:	00000000 	.word	0x00000000
 8007a40:	08007799 	.word	0x08007799
 8007a44:	08008707 	.word	0x08008707

08007a48 <_printf_common>:
 8007a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a4c:	4616      	mov	r6, r2
 8007a4e:	4698      	mov	r8, r3
 8007a50:	688a      	ldr	r2, [r1, #8]
 8007a52:	690b      	ldr	r3, [r1, #16]
 8007a54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	bfb8      	it	lt
 8007a5c:	4613      	movlt	r3, r2
 8007a5e:	6033      	str	r3, [r6, #0]
 8007a60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a64:	4607      	mov	r7, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	b10a      	cbz	r2, 8007a6e <_printf_common+0x26>
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	6033      	str	r3, [r6, #0]
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	0699      	lsls	r1, r3, #26
 8007a72:	bf42      	ittt	mi
 8007a74:	6833      	ldrmi	r3, [r6, #0]
 8007a76:	3302      	addmi	r3, #2
 8007a78:	6033      	strmi	r3, [r6, #0]
 8007a7a:	6825      	ldr	r5, [r4, #0]
 8007a7c:	f015 0506 	ands.w	r5, r5, #6
 8007a80:	d106      	bne.n	8007a90 <_printf_common+0x48>
 8007a82:	f104 0a19 	add.w	sl, r4, #25
 8007a86:	68e3      	ldr	r3, [r4, #12]
 8007a88:	6832      	ldr	r2, [r6, #0]
 8007a8a:	1a9b      	subs	r3, r3, r2
 8007a8c:	42ab      	cmp	r3, r5
 8007a8e:	dc26      	bgt.n	8007ade <_printf_common+0x96>
 8007a90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a94:	6822      	ldr	r2, [r4, #0]
 8007a96:	3b00      	subs	r3, #0
 8007a98:	bf18      	it	ne
 8007a9a:	2301      	movne	r3, #1
 8007a9c:	0692      	lsls	r2, r2, #26
 8007a9e:	d42b      	bmi.n	8007af8 <_printf_common+0xb0>
 8007aa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007aa4:	4641      	mov	r1, r8
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	47c8      	blx	r9
 8007aaa:	3001      	adds	r0, #1
 8007aac:	d01e      	beq.n	8007aec <_printf_common+0xa4>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	6922      	ldr	r2, [r4, #16]
 8007ab2:	f003 0306 	and.w	r3, r3, #6
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	bf02      	ittt	eq
 8007aba:	68e5      	ldreq	r5, [r4, #12]
 8007abc:	6833      	ldreq	r3, [r6, #0]
 8007abe:	1aed      	subeq	r5, r5, r3
 8007ac0:	68a3      	ldr	r3, [r4, #8]
 8007ac2:	bf0c      	ite	eq
 8007ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ac8:	2500      	movne	r5, #0
 8007aca:	4293      	cmp	r3, r2
 8007acc:	bfc4      	itt	gt
 8007ace:	1a9b      	subgt	r3, r3, r2
 8007ad0:	18ed      	addgt	r5, r5, r3
 8007ad2:	2600      	movs	r6, #0
 8007ad4:	341a      	adds	r4, #26
 8007ad6:	42b5      	cmp	r5, r6
 8007ad8:	d11a      	bne.n	8007b10 <_printf_common+0xc8>
 8007ada:	2000      	movs	r0, #0
 8007adc:	e008      	b.n	8007af0 <_printf_common+0xa8>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	4652      	mov	r2, sl
 8007ae2:	4641      	mov	r1, r8
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	47c8      	blx	r9
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d103      	bne.n	8007af4 <_printf_common+0xac>
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295
 8007af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af4:	3501      	adds	r5, #1
 8007af6:	e7c6      	b.n	8007a86 <_printf_common+0x3e>
 8007af8:	18e1      	adds	r1, r4, r3
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	2030      	movs	r0, #48	@ 0x30
 8007afe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b02:	4422      	add	r2, r4
 8007b04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	e7c7      	b.n	8007aa0 <_printf_common+0x58>
 8007b10:	2301      	movs	r3, #1
 8007b12:	4622      	mov	r2, r4
 8007b14:	4641      	mov	r1, r8
 8007b16:	4638      	mov	r0, r7
 8007b18:	47c8      	blx	r9
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d0e6      	beq.n	8007aec <_printf_common+0xa4>
 8007b1e:	3601      	adds	r6, #1
 8007b20:	e7d9      	b.n	8007ad6 <_printf_common+0x8e>
	...

08007b24 <_printf_i>:
 8007b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b28:	7e0f      	ldrb	r7, [r1, #24]
 8007b2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b2c:	2f78      	cmp	r7, #120	@ 0x78
 8007b2e:	4691      	mov	r9, r2
 8007b30:	4680      	mov	r8, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	469a      	mov	sl, r3
 8007b36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b3a:	d807      	bhi.n	8007b4c <_printf_i+0x28>
 8007b3c:	2f62      	cmp	r7, #98	@ 0x62
 8007b3e:	d80a      	bhi.n	8007b56 <_printf_i+0x32>
 8007b40:	2f00      	cmp	r7, #0
 8007b42:	f000 80d2 	beq.w	8007cea <_printf_i+0x1c6>
 8007b46:	2f58      	cmp	r7, #88	@ 0x58
 8007b48:	f000 80b9 	beq.w	8007cbe <_printf_i+0x19a>
 8007b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b54:	e03a      	b.n	8007bcc <_printf_i+0xa8>
 8007b56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b5a:	2b15      	cmp	r3, #21
 8007b5c:	d8f6      	bhi.n	8007b4c <_printf_i+0x28>
 8007b5e:	a101      	add	r1, pc, #4	@ (adr r1, 8007b64 <_printf_i+0x40>)
 8007b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b64:	08007bbd 	.word	0x08007bbd
 8007b68:	08007bd1 	.word	0x08007bd1
 8007b6c:	08007b4d 	.word	0x08007b4d
 8007b70:	08007b4d 	.word	0x08007b4d
 8007b74:	08007b4d 	.word	0x08007b4d
 8007b78:	08007b4d 	.word	0x08007b4d
 8007b7c:	08007bd1 	.word	0x08007bd1
 8007b80:	08007b4d 	.word	0x08007b4d
 8007b84:	08007b4d 	.word	0x08007b4d
 8007b88:	08007b4d 	.word	0x08007b4d
 8007b8c:	08007b4d 	.word	0x08007b4d
 8007b90:	08007cd1 	.word	0x08007cd1
 8007b94:	08007bfb 	.word	0x08007bfb
 8007b98:	08007c8b 	.word	0x08007c8b
 8007b9c:	08007b4d 	.word	0x08007b4d
 8007ba0:	08007b4d 	.word	0x08007b4d
 8007ba4:	08007cf3 	.word	0x08007cf3
 8007ba8:	08007b4d 	.word	0x08007b4d
 8007bac:	08007bfb 	.word	0x08007bfb
 8007bb0:	08007b4d 	.word	0x08007b4d
 8007bb4:	08007b4d 	.word	0x08007b4d
 8007bb8:	08007c93 	.word	0x08007c93
 8007bbc:	6833      	ldr	r3, [r6, #0]
 8007bbe:	1d1a      	adds	r2, r3, #4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6032      	str	r2, [r6, #0]
 8007bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e09d      	b.n	8007d0c <_printf_i+0x1e8>
 8007bd0:	6833      	ldr	r3, [r6, #0]
 8007bd2:	6820      	ldr	r0, [r4, #0]
 8007bd4:	1d19      	adds	r1, r3, #4
 8007bd6:	6031      	str	r1, [r6, #0]
 8007bd8:	0606      	lsls	r6, r0, #24
 8007bda:	d501      	bpl.n	8007be0 <_printf_i+0xbc>
 8007bdc:	681d      	ldr	r5, [r3, #0]
 8007bde:	e003      	b.n	8007be8 <_printf_i+0xc4>
 8007be0:	0645      	lsls	r5, r0, #25
 8007be2:	d5fb      	bpl.n	8007bdc <_printf_i+0xb8>
 8007be4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	da03      	bge.n	8007bf4 <_printf_i+0xd0>
 8007bec:	232d      	movs	r3, #45	@ 0x2d
 8007bee:	426d      	negs	r5, r5
 8007bf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bf4:	4859      	ldr	r0, [pc, #356]	@ (8007d5c <_printf_i+0x238>)
 8007bf6:	230a      	movs	r3, #10
 8007bf8:	e011      	b.n	8007c1e <_printf_i+0xfa>
 8007bfa:	6821      	ldr	r1, [r4, #0]
 8007bfc:	6833      	ldr	r3, [r6, #0]
 8007bfe:	0608      	lsls	r0, r1, #24
 8007c00:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c04:	d402      	bmi.n	8007c0c <_printf_i+0xe8>
 8007c06:	0649      	lsls	r1, r1, #25
 8007c08:	bf48      	it	mi
 8007c0a:	b2ad      	uxthmi	r5, r5
 8007c0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c0e:	4853      	ldr	r0, [pc, #332]	@ (8007d5c <_printf_i+0x238>)
 8007c10:	6033      	str	r3, [r6, #0]
 8007c12:	bf14      	ite	ne
 8007c14:	230a      	movne	r3, #10
 8007c16:	2308      	moveq	r3, #8
 8007c18:	2100      	movs	r1, #0
 8007c1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c1e:	6866      	ldr	r6, [r4, #4]
 8007c20:	60a6      	str	r6, [r4, #8]
 8007c22:	2e00      	cmp	r6, #0
 8007c24:	bfa2      	ittt	ge
 8007c26:	6821      	ldrge	r1, [r4, #0]
 8007c28:	f021 0104 	bicge.w	r1, r1, #4
 8007c2c:	6021      	strge	r1, [r4, #0]
 8007c2e:	b90d      	cbnz	r5, 8007c34 <_printf_i+0x110>
 8007c30:	2e00      	cmp	r6, #0
 8007c32:	d04b      	beq.n	8007ccc <_printf_i+0x1a8>
 8007c34:	4616      	mov	r6, r2
 8007c36:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c3a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c3e:	5dc7      	ldrb	r7, [r0, r7]
 8007c40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c44:	462f      	mov	r7, r5
 8007c46:	42bb      	cmp	r3, r7
 8007c48:	460d      	mov	r5, r1
 8007c4a:	d9f4      	bls.n	8007c36 <_printf_i+0x112>
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d10b      	bne.n	8007c68 <_printf_i+0x144>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	07df      	lsls	r7, r3, #31
 8007c54:	d508      	bpl.n	8007c68 <_printf_i+0x144>
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	6861      	ldr	r1, [r4, #4]
 8007c5a:	4299      	cmp	r1, r3
 8007c5c:	bfde      	ittt	le
 8007c5e:	2330      	movle	r3, #48	@ 0x30
 8007c60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c68:	1b92      	subs	r2, r2, r6
 8007c6a:	6122      	str	r2, [r4, #16]
 8007c6c:	f8cd a000 	str.w	sl, [sp]
 8007c70:	464b      	mov	r3, r9
 8007c72:	aa03      	add	r2, sp, #12
 8007c74:	4621      	mov	r1, r4
 8007c76:	4640      	mov	r0, r8
 8007c78:	f7ff fee6 	bl	8007a48 <_printf_common>
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d14a      	bne.n	8007d16 <_printf_i+0x1f2>
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	b004      	add	sp, #16
 8007c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	f043 0320 	orr.w	r3, r3, #32
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	4833      	ldr	r0, [pc, #204]	@ (8007d60 <_printf_i+0x23c>)
 8007c94:	2778      	movs	r7, #120	@ 0x78
 8007c96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	6831      	ldr	r1, [r6, #0]
 8007c9e:	061f      	lsls	r7, r3, #24
 8007ca0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ca4:	d402      	bmi.n	8007cac <_printf_i+0x188>
 8007ca6:	065f      	lsls	r7, r3, #25
 8007ca8:	bf48      	it	mi
 8007caa:	b2ad      	uxthmi	r5, r5
 8007cac:	6031      	str	r1, [r6, #0]
 8007cae:	07d9      	lsls	r1, r3, #31
 8007cb0:	bf44      	itt	mi
 8007cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8007cb6:	6023      	strmi	r3, [r4, #0]
 8007cb8:	b11d      	cbz	r5, 8007cc2 <_printf_i+0x19e>
 8007cba:	2310      	movs	r3, #16
 8007cbc:	e7ac      	b.n	8007c18 <_printf_i+0xf4>
 8007cbe:	4827      	ldr	r0, [pc, #156]	@ (8007d5c <_printf_i+0x238>)
 8007cc0:	e7e9      	b.n	8007c96 <_printf_i+0x172>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	f023 0320 	bic.w	r3, r3, #32
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	e7f6      	b.n	8007cba <_printf_i+0x196>
 8007ccc:	4616      	mov	r6, r2
 8007cce:	e7bd      	b.n	8007c4c <_printf_i+0x128>
 8007cd0:	6833      	ldr	r3, [r6, #0]
 8007cd2:	6825      	ldr	r5, [r4, #0]
 8007cd4:	6961      	ldr	r1, [r4, #20]
 8007cd6:	1d18      	adds	r0, r3, #4
 8007cd8:	6030      	str	r0, [r6, #0]
 8007cda:	062e      	lsls	r6, r5, #24
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	d501      	bpl.n	8007ce4 <_printf_i+0x1c0>
 8007ce0:	6019      	str	r1, [r3, #0]
 8007ce2:	e002      	b.n	8007cea <_printf_i+0x1c6>
 8007ce4:	0668      	lsls	r0, r5, #25
 8007ce6:	d5fb      	bpl.n	8007ce0 <_printf_i+0x1bc>
 8007ce8:	8019      	strh	r1, [r3, #0]
 8007cea:	2300      	movs	r3, #0
 8007cec:	6123      	str	r3, [r4, #16]
 8007cee:	4616      	mov	r6, r2
 8007cf0:	e7bc      	b.n	8007c6c <_printf_i+0x148>
 8007cf2:	6833      	ldr	r3, [r6, #0]
 8007cf4:	1d1a      	adds	r2, r3, #4
 8007cf6:	6032      	str	r2, [r6, #0]
 8007cf8:	681e      	ldr	r6, [r3, #0]
 8007cfa:	6862      	ldr	r2, [r4, #4]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f7f8 fa9e 	bl	8000240 <memchr>
 8007d04:	b108      	cbz	r0, 8007d0a <_printf_i+0x1e6>
 8007d06:	1b80      	subs	r0, r0, r6
 8007d08:	6060      	str	r0, [r4, #4]
 8007d0a:	6863      	ldr	r3, [r4, #4]
 8007d0c:	6123      	str	r3, [r4, #16]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d14:	e7aa      	b.n	8007c6c <_printf_i+0x148>
 8007d16:	6923      	ldr	r3, [r4, #16]
 8007d18:	4632      	mov	r2, r6
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	47d0      	blx	sl
 8007d20:	3001      	adds	r0, #1
 8007d22:	d0ad      	beq.n	8007c80 <_printf_i+0x15c>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	079b      	lsls	r3, r3, #30
 8007d28:	d413      	bmi.n	8007d52 <_printf_i+0x22e>
 8007d2a:	68e0      	ldr	r0, [r4, #12]
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	4298      	cmp	r0, r3
 8007d30:	bfb8      	it	lt
 8007d32:	4618      	movlt	r0, r3
 8007d34:	e7a6      	b.n	8007c84 <_printf_i+0x160>
 8007d36:	2301      	movs	r3, #1
 8007d38:	4632      	mov	r2, r6
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	4640      	mov	r0, r8
 8007d3e:	47d0      	blx	sl
 8007d40:	3001      	adds	r0, #1
 8007d42:	d09d      	beq.n	8007c80 <_printf_i+0x15c>
 8007d44:	3501      	adds	r5, #1
 8007d46:	68e3      	ldr	r3, [r4, #12]
 8007d48:	9903      	ldr	r1, [sp, #12]
 8007d4a:	1a5b      	subs	r3, r3, r1
 8007d4c:	42ab      	cmp	r3, r5
 8007d4e:	dcf2      	bgt.n	8007d36 <_printf_i+0x212>
 8007d50:	e7eb      	b.n	8007d2a <_printf_i+0x206>
 8007d52:	2500      	movs	r5, #0
 8007d54:	f104 0619 	add.w	r6, r4, #25
 8007d58:	e7f5      	b.n	8007d46 <_printf_i+0x222>
 8007d5a:	bf00      	nop
 8007d5c:	08008712 	.word	0x08008712
 8007d60:	08008723 	.word	0x08008723

08007d64 <__sflush_r>:
 8007d64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6c:	0716      	lsls	r6, r2, #28
 8007d6e:	4605      	mov	r5, r0
 8007d70:	460c      	mov	r4, r1
 8007d72:	d454      	bmi.n	8007e1e <__sflush_r+0xba>
 8007d74:	684b      	ldr	r3, [r1, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	dc02      	bgt.n	8007d80 <__sflush_r+0x1c>
 8007d7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	dd48      	ble.n	8007e12 <__sflush_r+0xae>
 8007d80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d82:	2e00      	cmp	r6, #0
 8007d84:	d045      	beq.n	8007e12 <__sflush_r+0xae>
 8007d86:	2300      	movs	r3, #0
 8007d88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d8c:	682f      	ldr	r7, [r5, #0]
 8007d8e:	6a21      	ldr	r1, [r4, #32]
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	d030      	beq.n	8007df6 <__sflush_r+0x92>
 8007d94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	0759      	lsls	r1, r3, #29
 8007d9a:	d505      	bpl.n	8007da8 <__sflush_r+0x44>
 8007d9c:	6863      	ldr	r3, [r4, #4]
 8007d9e:	1ad2      	subs	r2, r2, r3
 8007da0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007da2:	b10b      	cbz	r3, 8007da8 <__sflush_r+0x44>
 8007da4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007da6:	1ad2      	subs	r2, r2, r3
 8007da8:	2300      	movs	r3, #0
 8007daa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dac:	6a21      	ldr	r1, [r4, #32]
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b0      	blx	r6
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	d106      	bne.n	8007dc6 <__sflush_r+0x62>
 8007db8:	6829      	ldr	r1, [r5, #0]
 8007dba:	291d      	cmp	r1, #29
 8007dbc:	d82b      	bhi.n	8007e16 <__sflush_r+0xb2>
 8007dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8007e68 <__sflush_r+0x104>)
 8007dc0:	410a      	asrs	r2, r1
 8007dc2:	07d6      	lsls	r6, r2, #31
 8007dc4:	d427      	bmi.n	8007e16 <__sflush_r+0xb2>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	6062      	str	r2, [r4, #4]
 8007dca:	04d9      	lsls	r1, r3, #19
 8007dcc:	6922      	ldr	r2, [r4, #16]
 8007dce:	6022      	str	r2, [r4, #0]
 8007dd0:	d504      	bpl.n	8007ddc <__sflush_r+0x78>
 8007dd2:	1c42      	adds	r2, r0, #1
 8007dd4:	d101      	bne.n	8007dda <__sflush_r+0x76>
 8007dd6:	682b      	ldr	r3, [r5, #0]
 8007dd8:	b903      	cbnz	r3, 8007ddc <__sflush_r+0x78>
 8007dda:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dde:	602f      	str	r7, [r5, #0]
 8007de0:	b1b9      	cbz	r1, 8007e12 <__sflush_r+0xae>
 8007de2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007de6:	4299      	cmp	r1, r3
 8007de8:	d002      	beq.n	8007df0 <__sflush_r+0x8c>
 8007dea:	4628      	mov	r0, r5
 8007dec:	f7ff fbdc 	bl	80075a8 <_free_r>
 8007df0:	2300      	movs	r3, #0
 8007df2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007df4:	e00d      	b.n	8007e12 <__sflush_r+0xae>
 8007df6:	2301      	movs	r3, #1
 8007df8:	4628      	mov	r0, r5
 8007dfa:	47b0      	blx	r6
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	1c50      	adds	r0, r2, #1
 8007e00:	d1c9      	bne.n	8007d96 <__sflush_r+0x32>
 8007e02:	682b      	ldr	r3, [r5, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0c6      	beq.n	8007d96 <__sflush_r+0x32>
 8007e08:	2b1d      	cmp	r3, #29
 8007e0a:	d001      	beq.n	8007e10 <__sflush_r+0xac>
 8007e0c:	2b16      	cmp	r3, #22
 8007e0e:	d11e      	bne.n	8007e4e <__sflush_r+0xea>
 8007e10:	602f      	str	r7, [r5, #0]
 8007e12:	2000      	movs	r0, #0
 8007e14:	e022      	b.n	8007e5c <__sflush_r+0xf8>
 8007e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e1a:	b21b      	sxth	r3, r3
 8007e1c:	e01b      	b.n	8007e56 <__sflush_r+0xf2>
 8007e1e:	690f      	ldr	r7, [r1, #16]
 8007e20:	2f00      	cmp	r7, #0
 8007e22:	d0f6      	beq.n	8007e12 <__sflush_r+0xae>
 8007e24:	0793      	lsls	r3, r2, #30
 8007e26:	680e      	ldr	r6, [r1, #0]
 8007e28:	bf08      	it	eq
 8007e2a:	694b      	ldreq	r3, [r1, #20]
 8007e2c:	600f      	str	r7, [r1, #0]
 8007e2e:	bf18      	it	ne
 8007e30:	2300      	movne	r3, #0
 8007e32:	eba6 0807 	sub.w	r8, r6, r7
 8007e36:	608b      	str	r3, [r1, #8]
 8007e38:	f1b8 0f00 	cmp.w	r8, #0
 8007e3c:	dde9      	ble.n	8007e12 <__sflush_r+0xae>
 8007e3e:	6a21      	ldr	r1, [r4, #32]
 8007e40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e42:	4643      	mov	r3, r8
 8007e44:	463a      	mov	r2, r7
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b0      	blx	r6
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	dc08      	bgt.n	8007e60 <__sflush_r+0xfc>
 8007e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e56:	81a3      	strh	r3, [r4, #12]
 8007e58:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e60:	4407      	add	r7, r0
 8007e62:	eba8 0800 	sub.w	r8, r8, r0
 8007e66:	e7e7      	b.n	8007e38 <__sflush_r+0xd4>
 8007e68:	dfbffffe 	.word	0xdfbffffe

08007e6c <_fflush_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	690b      	ldr	r3, [r1, #16]
 8007e70:	4605      	mov	r5, r0
 8007e72:	460c      	mov	r4, r1
 8007e74:	b913      	cbnz	r3, 8007e7c <_fflush_r+0x10>
 8007e76:	2500      	movs	r5, #0
 8007e78:	4628      	mov	r0, r5
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	b118      	cbz	r0, 8007e86 <_fflush_r+0x1a>
 8007e7e:	6a03      	ldr	r3, [r0, #32]
 8007e80:	b90b      	cbnz	r3, 8007e86 <_fflush_r+0x1a>
 8007e82:	f7ff fa21 	bl	80072c8 <__sinit>
 8007e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0f3      	beq.n	8007e76 <_fflush_r+0xa>
 8007e8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e90:	07d0      	lsls	r0, r2, #31
 8007e92:	d404      	bmi.n	8007e9e <_fflush_r+0x32>
 8007e94:	0599      	lsls	r1, r3, #22
 8007e96:	d402      	bmi.n	8007e9e <_fflush_r+0x32>
 8007e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e9a:	f7ff fb82 	bl	80075a2 <__retarget_lock_acquire_recursive>
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	f7ff ff5f 	bl	8007d64 <__sflush_r>
 8007ea6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ea8:	07da      	lsls	r2, r3, #31
 8007eaa:	4605      	mov	r5, r0
 8007eac:	d4e4      	bmi.n	8007e78 <_fflush_r+0xc>
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	059b      	lsls	r3, r3, #22
 8007eb2:	d4e1      	bmi.n	8007e78 <_fflush_r+0xc>
 8007eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eb6:	f7ff fb75 	bl	80075a4 <__retarget_lock_release_recursive>
 8007eba:	e7dd      	b.n	8007e78 <_fflush_r+0xc>

08007ebc <_getc_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	b118      	cbz	r0, 8007ecc <_getc_r+0x10>
 8007ec4:	6a03      	ldr	r3, [r0, #32]
 8007ec6:	b90b      	cbnz	r3, 8007ecc <_getc_r+0x10>
 8007ec8:	f7ff f9fe 	bl	80072c8 <__sinit>
 8007ecc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ece:	07d8      	lsls	r0, r3, #31
 8007ed0:	d405      	bmi.n	8007ede <_getc_r+0x22>
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	0599      	lsls	r1, r3, #22
 8007ed6:	d402      	bmi.n	8007ede <_getc_r+0x22>
 8007ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eda:	f7ff fb62 	bl	80075a2 <__retarget_lock_acquire_recursive>
 8007ede:	6863      	ldr	r3, [r4, #4]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	6063      	str	r3, [r4, #4]
 8007ee6:	da0f      	bge.n	8007f08 <_getc_r+0x4c>
 8007ee8:	4628      	mov	r0, r5
 8007eea:	4621      	mov	r1, r4
 8007eec:	f000 f811 	bl	8007f12 <__srget_r>
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ef4:	07da      	lsls	r2, r3, #31
 8007ef6:	d405      	bmi.n	8007f04 <_getc_r+0x48>
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	059b      	lsls	r3, r3, #22
 8007efc:	d402      	bmi.n	8007f04 <_getc_r+0x48>
 8007efe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f00:	f7ff fb50 	bl	80075a4 <__retarget_lock_release_recursive>
 8007f04:	4628      	mov	r0, r5
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	6022      	str	r2, [r4, #0]
 8007f0e:	781d      	ldrb	r5, [r3, #0]
 8007f10:	e7ef      	b.n	8007ef2 <_getc_r+0x36>

08007f12 <__srget_r>:
 8007f12:	b538      	push	{r3, r4, r5, lr}
 8007f14:	460c      	mov	r4, r1
 8007f16:	4605      	mov	r5, r0
 8007f18:	b118      	cbz	r0, 8007f22 <__srget_r+0x10>
 8007f1a:	6a03      	ldr	r3, [r0, #32]
 8007f1c:	b90b      	cbnz	r3, 8007f22 <__srget_r+0x10>
 8007f1e:	f7ff f9d3 	bl	80072c8 <__sinit>
 8007f22:	4621      	mov	r1, r4
 8007f24:	4628      	mov	r0, r5
 8007f26:	f000 f881 	bl	800802c <__srefill_r>
 8007f2a:	b938      	cbnz	r0, 8007f3c <__srget_r+0x2a>
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	6063      	str	r3, [r4, #4]
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	6022      	str	r2, [r4, #0]
 8007f38:	7818      	ldrb	r0, [r3, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	e7fb      	b.n	8007f3a <__srget_r+0x28>

08007f42 <memmove>:
 8007f42:	4288      	cmp	r0, r1
 8007f44:	b510      	push	{r4, lr}
 8007f46:	eb01 0402 	add.w	r4, r1, r2
 8007f4a:	d902      	bls.n	8007f52 <memmove+0x10>
 8007f4c:	4284      	cmp	r4, r0
 8007f4e:	4623      	mov	r3, r4
 8007f50:	d807      	bhi.n	8007f62 <memmove+0x20>
 8007f52:	1e43      	subs	r3, r0, #1
 8007f54:	42a1      	cmp	r1, r4
 8007f56:	d008      	beq.n	8007f6a <memmove+0x28>
 8007f58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f60:	e7f8      	b.n	8007f54 <memmove+0x12>
 8007f62:	4402      	add	r2, r0
 8007f64:	4601      	mov	r1, r0
 8007f66:	428a      	cmp	r2, r1
 8007f68:	d100      	bne.n	8007f6c <memmove+0x2a>
 8007f6a:	bd10      	pop	{r4, pc}
 8007f6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f70:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f74:	e7f7      	b.n	8007f66 <memmove+0x24>
	...

08007f78 <_sbrk_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d06      	ldr	r5, [pc, #24]	@ (8007f94 <_sbrk_r+0x1c>)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	602b      	str	r3, [r5, #0]
 8007f84:	f7f9 fca8 	bl	80018d8 <_sbrk>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d102      	bne.n	8007f92 <_sbrk_r+0x1a>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b103      	cbz	r3, 8007f92 <_sbrk_r+0x1a>
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	20001ad4 	.word	0x20001ad4

08007f98 <memcpy>:
 8007f98:	440a      	add	r2, r1
 8007f9a:	4291      	cmp	r1, r2
 8007f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fa0:	d100      	bne.n	8007fa4 <memcpy+0xc>
 8007fa2:	4770      	bx	lr
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fae:	4291      	cmp	r1, r2
 8007fb0:	d1f9      	bne.n	8007fa6 <memcpy+0xe>
 8007fb2:	bd10      	pop	{r4, pc}

08007fb4 <_realloc_r>:
 8007fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb8:	4680      	mov	r8, r0
 8007fba:	4615      	mov	r5, r2
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	b921      	cbnz	r1, 8007fca <_realloc_r+0x16>
 8007fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	f7ff bb5b 	b.w	8007680 <_malloc_r>
 8007fca:	b92a      	cbnz	r2, 8007fd8 <_realloc_r+0x24>
 8007fcc:	f7ff faec 	bl	80075a8 <_free_r>
 8007fd0:	2400      	movs	r4, #0
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd8:	f000 f89c 	bl	8008114 <_malloc_usable_size_r>
 8007fdc:	4285      	cmp	r5, r0
 8007fde:	4606      	mov	r6, r0
 8007fe0:	d802      	bhi.n	8007fe8 <_realloc_r+0x34>
 8007fe2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007fe6:	d8f4      	bhi.n	8007fd2 <_realloc_r+0x1e>
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4640      	mov	r0, r8
 8007fec:	f7ff fb48 	bl	8007680 <_malloc_r>
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d0ec      	beq.n	8007fd0 <_realloc_r+0x1c>
 8007ff6:	42b5      	cmp	r5, r6
 8007ff8:	462a      	mov	r2, r5
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	bf28      	it	cs
 8007ffe:	4632      	movcs	r2, r6
 8008000:	f7ff ffca 	bl	8007f98 <memcpy>
 8008004:	4621      	mov	r1, r4
 8008006:	4640      	mov	r0, r8
 8008008:	f7ff face 	bl	80075a8 <_free_r>
 800800c:	463c      	mov	r4, r7
 800800e:	e7e0      	b.n	8007fd2 <_realloc_r+0x1e>

08008010 <lflush>:
 8008010:	898b      	ldrh	r3, [r1, #12]
 8008012:	f003 0309 	and.w	r3, r3, #9
 8008016:	2b09      	cmp	r3, #9
 8008018:	d103      	bne.n	8008022 <lflush+0x12>
 800801a:	4b03      	ldr	r3, [pc, #12]	@ (8008028 <lflush+0x18>)
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	f7ff bf25 	b.w	8007e6c <_fflush_r>
 8008022:	2000      	movs	r0, #0
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	20000020 	.word	0x20000020

0800802c <__srefill_r>:
 800802c:	b570      	push	{r4, r5, r6, lr}
 800802e:	460c      	mov	r4, r1
 8008030:	4605      	mov	r5, r0
 8008032:	b118      	cbz	r0, 800803c <__srefill_r+0x10>
 8008034:	6a03      	ldr	r3, [r0, #32]
 8008036:	b90b      	cbnz	r3, 800803c <__srefill_r+0x10>
 8008038:	f7ff f946 	bl	80072c8 <__sinit>
 800803c:	2300      	movs	r3, #0
 800803e:	6063      	str	r3, [r4, #4]
 8008040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008044:	069e      	lsls	r6, r3, #26
 8008046:	d408      	bmi.n	800805a <__srefill_r+0x2e>
 8008048:	0758      	lsls	r0, r3, #29
 800804a:	d445      	bmi.n	80080d8 <__srefill_r+0xac>
 800804c:	06d9      	lsls	r1, r3, #27
 800804e:	d407      	bmi.n	8008060 <__srefill_r+0x34>
 8008050:	2209      	movs	r2, #9
 8008052:	602a      	str	r2, [r5, #0]
 8008054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	f04f 30ff 	mov.w	r0, #4294967295
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	071a      	lsls	r2, r3, #28
 8008062:	d50b      	bpl.n	800807c <__srefill_r+0x50>
 8008064:	4621      	mov	r1, r4
 8008066:	4628      	mov	r0, r5
 8008068:	f7ff ff00 	bl	8007e6c <_fflush_r>
 800806c:	2800      	cmp	r0, #0
 800806e:	d1f4      	bne.n	800805a <__srefill_r+0x2e>
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	60a0      	str	r0, [r4, #8]
 8008074:	f023 0308 	bic.w	r3, r3, #8
 8008078:	81a3      	strh	r3, [r4, #12]
 800807a:	61a0      	str	r0, [r4, #24]
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f043 0304 	orr.w	r3, r3, #4
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	b91b      	cbnz	r3, 8008090 <__srefill_r+0x64>
 8008088:	4621      	mov	r1, r4
 800808a:	4628      	mov	r0, r5
 800808c:	f000 f870 	bl	8008170 <__smakebuf_r>
 8008090:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8008094:	07b3      	lsls	r3, r6, #30
 8008096:	d00f      	beq.n	80080b8 <__srefill_r+0x8c>
 8008098:	2301      	movs	r3, #1
 800809a:	4a1b      	ldr	r2, [pc, #108]	@ (8008108 <__srefill_r+0xdc>)
 800809c:	491b      	ldr	r1, [pc, #108]	@ (800810c <__srefill_r+0xe0>)
 800809e:	481c      	ldr	r0, [pc, #112]	@ (8008110 <__srefill_r+0xe4>)
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	f7ff f929 	bl	80072f8 <_fwalk_sglue>
 80080a6:	81a6      	strh	r6, [r4, #12]
 80080a8:	f006 0609 	and.w	r6, r6, #9
 80080ac:	2e09      	cmp	r6, #9
 80080ae:	d103      	bne.n	80080b8 <__srefill_r+0x8c>
 80080b0:	4621      	mov	r1, r4
 80080b2:	4628      	mov	r0, r5
 80080b4:	f7ff fe56 	bl	8007d64 <__sflush_r>
 80080b8:	6922      	ldr	r2, [r4, #16]
 80080ba:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80080bc:	6963      	ldr	r3, [r4, #20]
 80080be:	6a21      	ldr	r1, [r4, #32]
 80080c0:	6022      	str	r2, [r4, #0]
 80080c2:	4628      	mov	r0, r5
 80080c4:	47b0      	blx	r6
 80080c6:	2800      	cmp	r0, #0
 80080c8:	6060      	str	r0, [r4, #4]
 80080ca:	dc17      	bgt.n	80080fc <__srefill_r+0xd0>
 80080cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d0:	d116      	bne.n	8008100 <__srefill_r+0xd4>
 80080d2:	f043 0320 	orr.w	r3, r3, #32
 80080d6:	e7bf      	b.n	8008058 <__srefill_r+0x2c>
 80080d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080da:	2900      	cmp	r1, #0
 80080dc:	d0d2      	beq.n	8008084 <__srefill_r+0x58>
 80080de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080e2:	4299      	cmp	r1, r3
 80080e4:	d002      	beq.n	80080ec <__srefill_r+0xc0>
 80080e6:	4628      	mov	r0, r5
 80080e8:	f7ff fa5e 	bl	80075a8 <_free_r>
 80080ec:	2300      	movs	r3, #0
 80080ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80080f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080f2:	6063      	str	r3, [r4, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0c5      	beq.n	8008084 <__srefill_r+0x58>
 80080f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80080fa:	6023      	str	r3, [r4, #0]
 80080fc:	2000      	movs	r0, #0
 80080fe:	e7ae      	b.n	800805e <__srefill_r+0x32>
 8008100:	2200      	movs	r2, #0
 8008102:	6062      	str	r2, [r4, #4]
 8008104:	e7a6      	b.n	8008054 <__srefill_r+0x28>
 8008106:	bf00      	nop
 8008108:	20000014 	.word	0x20000014
 800810c:	08008011 	.word	0x08008011
 8008110:	20000024 	.word	0x20000024

08008114 <_malloc_usable_size_r>:
 8008114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008118:	1f18      	subs	r0, r3, #4
 800811a:	2b00      	cmp	r3, #0
 800811c:	bfbc      	itt	lt
 800811e:	580b      	ldrlt	r3, [r1, r0]
 8008120:	18c0      	addlt	r0, r0, r3
 8008122:	4770      	bx	lr

08008124 <__swhatbuf_r>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	460c      	mov	r4, r1
 8008128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800812c:	2900      	cmp	r1, #0
 800812e:	b096      	sub	sp, #88	@ 0x58
 8008130:	4615      	mov	r5, r2
 8008132:	461e      	mov	r6, r3
 8008134:	da0d      	bge.n	8008152 <__swhatbuf_r+0x2e>
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800813c:	f04f 0100 	mov.w	r1, #0
 8008140:	bf14      	ite	ne
 8008142:	2340      	movne	r3, #64	@ 0x40
 8008144:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008148:	2000      	movs	r0, #0
 800814a:	6031      	str	r1, [r6, #0]
 800814c:	602b      	str	r3, [r5, #0]
 800814e:	b016      	add	sp, #88	@ 0x58
 8008150:	bd70      	pop	{r4, r5, r6, pc}
 8008152:	466a      	mov	r2, sp
 8008154:	f000 f848 	bl	80081e8 <_fstat_r>
 8008158:	2800      	cmp	r0, #0
 800815a:	dbec      	blt.n	8008136 <__swhatbuf_r+0x12>
 800815c:	9901      	ldr	r1, [sp, #4]
 800815e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008162:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008166:	4259      	negs	r1, r3
 8008168:	4159      	adcs	r1, r3
 800816a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800816e:	e7eb      	b.n	8008148 <__swhatbuf_r+0x24>

08008170 <__smakebuf_r>:
 8008170:	898b      	ldrh	r3, [r1, #12]
 8008172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008174:	079d      	lsls	r5, r3, #30
 8008176:	4606      	mov	r6, r0
 8008178:	460c      	mov	r4, r1
 800817a:	d507      	bpl.n	800818c <__smakebuf_r+0x1c>
 800817c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	6123      	str	r3, [r4, #16]
 8008184:	2301      	movs	r3, #1
 8008186:	6163      	str	r3, [r4, #20]
 8008188:	b003      	add	sp, #12
 800818a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818c:	ab01      	add	r3, sp, #4
 800818e:	466a      	mov	r2, sp
 8008190:	f7ff ffc8 	bl	8008124 <__swhatbuf_r>
 8008194:	9f00      	ldr	r7, [sp, #0]
 8008196:	4605      	mov	r5, r0
 8008198:	4639      	mov	r1, r7
 800819a:	4630      	mov	r0, r6
 800819c:	f7ff fa70 	bl	8007680 <_malloc_r>
 80081a0:	b948      	cbnz	r0, 80081b6 <__smakebuf_r+0x46>
 80081a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a6:	059a      	lsls	r2, r3, #22
 80081a8:	d4ee      	bmi.n	8008188 <__smakebuf_r+0x18>
 80081aa:	f023 0303 	bic.w	r3, r3, #3
 80081ae:	f043 0302 	orr.w	r3, r3, #2
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	e7e2      	b.n	800817c <__smakebuf_r+0xc>
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	6020      	str	r0, [r4, #0]
 80081ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081be:	81a3      	strh	r3, [r4, #12]
 80081c0:	9b01      	ldr	r3, [sp, #4]
 80081c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081c6:	b15b      	cbz	r3, 80081e0 <__smakebuf_r+0x70>
 80081c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081cc:	4630      	mov	r0, r6
 80081ce:	f000 f81d 	bl	800820c <_isatty_r>
 80081d2:	b128      	cbz	r0, 80081e0 <__smakebuf_r+0x70>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	f043 0301 	orr.w	r3, r3, #1
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	89a3      	ldrh	r3, [r4, #12]
 80081e2:	431d      	orrs	r5, r3
 80081e4:	81a5      	strh	r5, [r4, #12]
 80081e6:	e7cf      	b.n	8008188 <__smakebuf_r+0x18>

080081e8 <_fstat_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4d07      	ldr	r5, [pc, #28]	@ (8008208 <_fstat_r+0x20>)
 80081ec:	2300      	movs	r3, #0
 80081ee:	4604      	mov	r4, r0
 80081f0:	4608      	mov	r0, r1
 80081f2:	4611      	mov	r1, r2
 80081f4:	602b      	str	r3, [r5, #0]
 80081f6:	f7f9 fb46 	bl	8001886 <_fstat>
 80081fa:	1c43      	adds	r3, r0, #1
 80081fc:	d102      	bne.n	8008204 <_fstat_r+0x1c>
 80081fe:	682b      	ldr	r3, [r5, #0]
 8008200:	b103      	cbz	r3, 8008204 <_fstat_r+0x1c>
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	bd38      	pop	{r3, r4, r5, pc}
 8008206:	bf00      	nop
 8008208:	20001ad4 	.word	0x20001ad4

0800820c <_isatty_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4d06      	ldr	r5, [pc, #24]	@ (8008228 <_isatty_r+0x1c>)
 8008210:	2300      	movs	r3, #0
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	602b      	str	r3, [r5, #0]
 8008218:	f7f9 fb45 	bl	80018a6 <_isatty>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_isatty_r+0x1a>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_isatty_r+0x1a>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	20001ad4 	.word	0x20001ad4

0800822c <atan2f>:
 800822c:	f000 b800 	b.w	8008230 <__ieee754_atan2f>

08008230 <__ieee754_atan2f>:
 8008230:	ee10 2a90 	vmov	r2, s1
 8008234:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8008238:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800823c:	b510      	push	{r4, lr}
 800823e:	eef0 7a40 	vmov.f32	s15, s0
 8008242:	d806      	bhi.n	8008252 <__ieee754_atan2f+0x22>
 8008244:	ee10 0a10 	vmov	r0, s0
 8008248:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800824c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008250:	d904      	bls.n	800825c <__ieee754_atan2f+0x2c>
 8008252:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008256:	eeb0 0a67 	vmov.f32	s0, s15
 800825a:	bd10      	pop	{r4, pc}
 800825c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8008260:	d103      	bne.n	800826a <__ieee754_atan2f+0x3a>
 8008262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008266:	f000 b883 	b.w	8008370 <atanf>
 800826a:	1794      	asrs	r4, r2, #30
 800826c:	f004 0402 	and.w	r4, r4, #2
 8008270:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008274:	b943      	cbnz	r3, 8008288 <__ieee754_atan2f+0x58>
 8008276:	2c02      	cmp	r4, #2
 8008278:	d05e      	beq.n	8008338 <__ieee754_atan2f+0x108>
 800827a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800834c <__ieee754_atan2f+0x11c>
 800827e:	2c03      	cmp	r4, #3
 8008280:	bf08      	it	eq
 8008282:	eef0 7a47 	vmoveq.f32	s15, s14
 8008286:	e7e6      	b.n	8008256 <__ieee754_atan2f+0x26>
 8008288:	b941      	cbnz	r1, 800829c <__ieee754_atan2f+0x6c>
 800828a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8008350 <__ieee754_atan2f+0x120>
 800828e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008354 <__ieee754_atan2f+0x124>
 8008292:	2800      	cmp	r0, #0
 8008294:	bfb8      	it	lt
 8008296:	eef0 7a47 	vmovlt.f32	s15, s14
 800829a:	e7dc      	b.n	8008256 <__ieee754_atan2f+0x26>
 800829c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80082a0:	d110      	bne.n	80082c4 <__ieee754_atan2f+0x94>
 80082a2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80082a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80082aa:	d107      	bne.n	80082bc <__ieee754_atan2f+0x8c>
 80082ac:	2c02      	cmp	r4, #2
 80082ae:	d846      	bhi.n	800833e <__ieee754_atan2f+0x10e>
 80082b0:	4b29      	ldr	r3, [pc, #164]	@ (8008358 <__ieee754_atan2f+0x128>)
 80082b2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80082b6:	edd3 7a00 	vldr	s15, [r3]
 80082ba:	e7cc      	b.n	8008256 <__ieee754_atan2f+0x26>
 80082bc:	2c02      	cmp	r4, #2
 80082be:	d841      	bhi.n	8008344 <__ieee754_atan2f+0x114>
 80082c0:	4b26      	ldr	r3, [pc, #152]	@ (800835c <__ieee754_atan2f+0x12c>)
 80082c2:	e7f6      	b.n	80082b2 <__ieee754_atan2f+0x82>
 80082c4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80082c8:	d0df      	beq.n	800828a <__ieee754_atan2f+0x5a>
 80082ca:	1a5b      	subs	r3, r3, r1
 80082cc:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80082d0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80082d4:	da1a      	bge.n	800830c <__ieee754_atan2f+0xdc>
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	da01      	bge.n	80082de <__ieee754_atan2f+0xae>
 80082da:	313c      	adds	r1, #60	@ 0x3c
 80082dc:	db19      	blt.n	8008312 <__ieee754_atan2f+0xe2>
 80082de:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80082e2:	f000 f919 	bl	8008518 <fabsf>
 80082e6:	f000 f843 	bl	8008370 <atanf>
 80082ea:	eef0 7a40 	vmov.f32	s15, s0
 80082ee:	2c01      	cmp	r4, #1
 80082f0:	d012      	beq.n	8008318 <__ieee754_atan2f+0xe8>
 80082f2:	2c02      	cmp	r4, #2
 80082f4:	d017      	beq.n	8008326 <__ieee754_atan2f+0xf6>
 80082f6:	2c00      	cmp	r4, #0
 80082f8:	d0ad      	beq.n	8008256 <__ieee754_atan2f+0x26>
 80082fa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008360 <__ieee754_atan2f+0x130>
 80082fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008302:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008364 <__ieee754_atan2f+0x134>
 8008306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800830a:	e7a4      	b.n	8008256 <__ieee754_atan2f+0x26>
 800830c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8008350 <__ieee754_atan2f+0x120>
 8008310:	e7ed      	b.n	80082ee <__ieee754_atan2f+0xbe>
 8008312:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008368 <__ieee754_atan2f+0x138>
 8008316:	e7ea      	b.n	80082ee <__ieee754_atan2f+0xbe>
 8008318:	ee17 3a90 	vmov	r3, s15
 800831c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	e797      	b.n	8008256 <__ieee754_atan2f+0x26>
 8008326:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8008360 <__ieee754_atan2f+0x130>
 800832a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800832e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8008364 <__ieee754_atan2f+0x134>
 8008332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008336:	e78e      	b.n	8008256 <__ieee754_atan2f+0x26>
 8008338:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8008364 <__ieee754_atan2f+0x134>
 800833c:	e78b      	b.n	8008256 <__ieee754_atan2f+0x26>
 800833e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800836c <__ieee754_atan2f+0x13c>
 8008342:	e788      	b.n	8008256 <__ieee754_atan2f+0x26>
 8008344:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8008368 <__ieee754_atan2f+0x138>
 8008348:	e785      	b.n	8008256 <__ieee754_atan2f+0x26>
 800834a:	bf00      	nop
 800834c:	c0490fdb 	.word	0xc0490fdb
 8008350:	3fc90fdb 	.word	0x3fc90fdb
 8008354:	bfc90fdb 	.word	0xbfc90fdb
 8008358:	08008740 	.word	0x08008740
 800835c:	08008734 	.word	0x08008734
 8008360:	33bbbd2e 	.word	0x33bbbd2e
 8008364:	40490fdb 	.word	0x40490fdb
 8008368:	00000000 	.word	0x00000000
 800836c:	3f490fdb 	.word	0x3f490fdb

08008370 <atanf>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	ee10 5a10 	vmov	r5, s0
 8008376:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800837a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800837e:	eef0 7a40 	vmov.f32	s15, s0
 8008382:	d310      	bcc.n	80083a6 <atanf+0x36>
 8008384:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8008388:	d904      	bls.n	8008394 <atanf+0x24>
 800838a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800838e:	eeb0 0a67 	vmov.f32	s0, s15
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80084cc <atanf+0x15c>
 8008398:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80084d0 <atanf+0x160>
 800839c:	2d00      	cmp	r5, #0
 800839e:	bfc8      	it	gt
 80083a0:	eef0 7a47 	vmovgt.f32	s15, s14
 80083a4:	e7f3      	b.n	800838e <atanf+0x1e>
 80083a6:	4b4b      	ldr	r3, [pc, #300]	@ (80084d4 <atanf+0x164>)
 80083a8:	429c      	cmp	r4, r3
 80083aa:	d810      	bhi.n	80083ce <atanf+0x5e>
 80083ac:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80083b0:	d20a      	bcs.n	80083c8 <atanf+0x58>
 80083b2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80084d8 <atanf+0x168>
 80083b6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80083ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083be:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80083c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c6:	dce2      	bgt.n	800838e <atanf+0x1e>
 80083c8:	f04f 33ff 	mov.w	r3, #4294967295
 80083cc:	e013      	b.n	80083f6 <atanf+0x86>
 80083ce:	f000 f8a3 	bl	8008518 <fabsf>
 80083d2:	4b42      	ldr	r3, [pc, #264]	@ (80084dc <atanf+0x16c>)
 80083d4:	429c      	cmp	r4, r3
 80083d6:	d84f      	bhi.n	8008478 <atanf+0x108>
 80083d8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80083dc:	429c      	cmp	r4, r3
 80083de:	d841      	bhi.n	8008464 <atanf+0xf4>
 80083e0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80083e4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80083e8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80083ec:	2300      	movs	r3, #0
 80083ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80083f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80083fc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80084e0 <atanf+0x170>
 8008400:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80084e4 <atanf+0x174>
 8008404:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80084e8 <atanf+0x178>
 8008408:	ee66 6a06 	vmul.f32	s13, s12, s12
 800840c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008410:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80084ec <atanf+0x17c>
 8008414:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008418:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80084f0 <atanf+0x180>
 800841c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008420:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80084f4 <atanf+0x184>
 8008424:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008428:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80084f8 <atanf+0x188>
 800842c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008430:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80084fc <atanf+0x18c>
 8008434:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008438:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008500 <atanf+0x190>
 800843c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008440:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8008504 <atanf+0x194>
 8008444:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008448:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008508 <atanf+0x198>
 800844c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008450:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008454:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008458:	ee27 7a87 	vmul.f32	s14, s15, s14
 800845c:	d121      	bne.n	80084a2 <atanf+0x132>
 800845e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008462:	e794      	b.n	800838e <atanf+0x1e>
 8008464:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008468:	ee30 7a67 	vsub.f32	s14, s0, s15
 800846c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008470:	2301      	movs	r3, #1
 8008472:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008476:	e7be      	b.n	80083f6 <atanf+0x86>
 8008478:	4b24      	ldr	r3, [pc, #144]	@ (800850c <atanf+0x19c>)
 800847a:	429c      	cmp	r4, r3
 800847c:	d80b      	bhi.n	8008496 <atanf+0x126>
 800847e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8008482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008486:	eea0 7a27 	vfma.f32	s14, s0, s15
 800848a:	2302      	movs	r3, #2
 800848c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008494:	e7af      	b.n	80083f6 <atanf+0x86>
 8008496:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800849a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800849e:	2303      	movs	r3, #3
 80084a0:	e7a9      	b.n	80083f6 <atanf+0x86>
 80084a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008510 <atanf+0x1a0>)
 80084a4:	491b      	ldr	r1, [pc, #108]	@ (8008514 <atanf+0x1a4>)
 80084a6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80084aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80084ae:	edd3 6a00 	vldr	s13, [r3]
 80084b2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80084b6:	2d00      	cmp	r5, #0
 80084b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084bc:	edd2 7a00 	vldr	s15, [r2]
 80084c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084c4:	bfb8      	it	lt
 80084c6:	eef1 7a67 	vneglt.f32	s15, s15
 80084ca:	e760      	b.n	800838e <atanf+0x1e>
 80084cc:	bfc90fdb 	.word	0xbfc90fdb
 80084d0:	3fc90fdb 	.word	0x3fc90fdb
 80084d4:	3edfffff 	.word	0x3edfffff
 80084d8:	7149f2ca 	.word	0x7149f2ca
 80084dc:	3f97ffff 	.word	0x3f97ffff
 80084e0:	3c8569d7 	.word	0x3c8569d7
 80084e4:	3d4bda59 	.word	0x3d4bda59
 80084e8:	bd6ef16b 	.word	0xbd6ef16b
 80084ec:	3d886b35 	.word	0x3d886b35
 80084f0:	3dba2e6e 	.word	0x3dba2e6e
 80084f4:	3e124925 	.word	0x3e124925
 80084f8:	3eaaaaab 	.word	0x3eaaaaab
 80084fc:	bd15a221 	.word	0xbd15a221
 8008500:	bd9d8795 	.word	0xbd9d8795
 8008504:	bde38e38 	.word	0xbde38e38
 8008508:	be4ccccd 	.word	0xbe4ccccd
 800850c:	401bffff 	.word	0x401bffff
 8008510:	0800875c 	.word	0x0800875c
 8008514:	0800874c 	.word	0x0800874c

08008518 <fabsf>:
 8008518:	ee10 3a10 	vmov	r3, s0
 800851c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008520:	ee00 3a10 	vmov	s0, r3
 8008524:	4770      	bx	lr
	...

08008528 <_init>:
 8008528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852a:	bf00      	nop
 800852c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852e:	bc08      	pop	{r3}
 8008530:	469e      	mov	lr, r3
 8008532:	4770      	bx	lr

08008534 <_fini>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	bf00      	nop
 8008538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853a:	bc08      	pop	{r3}
 800853c:	469e      	mov	lr, r3
 800853e:	4770      	bx	lr
